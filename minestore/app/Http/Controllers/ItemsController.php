<?php

namespace App\Http\Controllers;

use App\Http\Controllers\CartController;
use App\Http\Controllers\Discord\RolesController;
use App\Http\Controllers\Discord\SendMessageController;
use App\Models\CartItem;
use App\Models\CartSelectServer;
use App\Models\Cart;
use App\Models\CmdQueue;
use App\Models\Coupon;
use App\Models\Currency;
use App\Models\DiscordRole;
use App\Models\DiscordRoleQueue;
use App\Models\GlobalCommand;
use App\Models\CommandHistory;
use App\Models\Command;
use App\Models\Category;
use App\Models\Item;
use App\Models\ItemRole;
use App\Models\ItemVar;
use App\Models\ItemServer;
use App\Models\CartItemVar;
use App\Models\Payment;
use App\Models\Sale;
use App\Models\SaleCommand;
use App\Models\Server;
use App\Models\Setting;
use App\Models\User;
use App\Models\Gift;
use App\Models\Variable;
use App\PaymentLibs\RocketRCON;
use App\PaymentLibs\Rcon;
use Crypt;
use Illuminate\Support\Facades\DB;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Str;
use Carbon\Carbon;
use PHPMailer\PHPMailer\Exception as PHPMailerException;
use PHPMailer\PHPMailer\PHPMailer;

class ItemsController extends Controller
{
    public function getFeaturedDeals(Request $request): array
    {
        global $is_unavailable, $settings, $featuredItems, $discount, $quantityGlobalLimit, $quantityGlobalCurrentLimit, $quantityUserLimit, $quantityUserCurrentLimit;
        zval_zone(config("app.LICENSE_KEY"),"\x99\xDD\xCE\x8F\x18\x3D\xB8\x12\x62\x06\xD3\x06\x2E\x71\xD7\x14\x57\xAF\x10\xD6\xFE\x15\x3C\x67\x8B\x97\xD2\x63\x67\x7B\x58\x99\x59\x47\x87\xAC\xF9\xD0\xEF\xAF\x2A\xDA\x3E\xFE\x20\xA7\x09\x3F\x8A\x99\xF2\x76\xA5\x80\xCE\xEF\xCE\x1B\x94\x9B\x21\x78\x97\x9F\x84\xA1\x71\x41\xAD\x7B\xBE\xE6\x6F\x3C\x57\x33\x7B\x90\xE9\x07\x05\x38\xAB\x3D\x5F\xC3\x0B\x0E\x43\x41\xED\x70\x25\x96\x4F\x81\x7D\x73\x55\x65\xCB\x7B\x7D\xC6\xE4\x0D\xC9\xBA\x8F\x00\xA4\xBC\xDB\x9A\x21\xE5\xA2\x29\x45\x94\x34\x49\x44\x45\x61\xBF\xFA\x2A\xF9\x44\x71\x41\xB5\xA3\x84\xEC\x9B\x5A\xF8\x65\x2B\x39\xCE\xCA\x67\xB4\xB8\xFB\xD8\xA0\xD2\xCA\x75\xFD\xBE\xA6\x5A\x00\x4B\x41\x00\xB8\x5A\x20\xE4\x03\x69\xD0\xBF\x77\xC0\x1C\x7E\x38\x18\xC6\x1B\x00\x95\x0C\x93\xF5\xDF\xCF\xEB\xE0\xB1\xB3\x52\x74\x14\x77\xF1\xF1\x2D\xC4\x6B\x23\xE4\x88\x5F\xCD\x2D\xC9\x2B\xCB\x22\x6D\xA6\x84\xAF\x35\x9F\x14\x02\xB4\x2F\x74\xE0\xD1\x51\x7E\xAF\xB0\x8B\x10\x57\xC4\xF3\x5D\xE2\x0C\xFB\x39\x59\xA7\xF1\x4A\x45\x25\xC8\xD8\x42\x81\x2D\xAC\xA6\x1D\x8B\x9A\x39\xB0\x5D\x25\x79\xE5\x5D\x94\xF7\xFC\x53\xBA\x00\xEE\x42\xB3\x54\x9F\x3F\x7F\xFD\x73\xFB\x12\xF0\xF6\x57\x7A\x22\xD3\x1D\xF4\x56\x62\xBF\x3F\x9B\xA0\x16\x03\x07\x7B\xAD\xF7\xF9\x45\x10\x03\xA0\x33\x35\xCD\x29\xEC\x04\x3C\xBD\x0A\xB9\x47\x33\x0A\xB1\xF4\x5F\x62\x30\x82\xB7\x4E\x9D\x1B\x35\x7F\x2C\xA7\x39\x38\x8D\xA7\x6F\x9A\xC3\xA7\x1A\x37\x1E\x11\xA9\xE2\xF6\xCA\x78\x35\x2B\x58\x04\x3A\x6D\x1C\xC6\xB3\x9B\xE7\xC2\xC0\x76\xA9\xEC\x79\xA6\xA1\x1E\xEE\xAD\xCE\xF1\xD3\x7E\xF7\x49\x46\xFA\xD7\x76\x9E\x0E\x21\x99\xC6\x33\xD4\xDF\xD7\xBA\x88\xB6\xBE\x16\x91\xB4\x1E\x8F\xAC\x8B\xFA\x46\x0A\xC1\x89\x30\x7B\xD7\x78\xF7\x7C\x83\x51\xF7\x6D\xDC\x8D\x14\x34\x1F\x33\x92\x97\xB9\x4C\x0D\x93\xFA\x73\xCF\x97\x45\x9D\x6A\x1C\x23\x7D\x0B\xCF\xFD\x3D\x50\xA1\x69\x88\xDE\xDB\x50\x3F\x87\xE7\xD7\xE3\x9B\x4E\x07\x1D\x36\x74\x2C\x9A\xDD\x52\xF1\xA6\x3A\x38\x66\x89\xFC\x9E\x94\x48\xF5\xBA\x1A\x8E\xCF\xB8\xBB\x1B\xB9\x5D\x2C\x0A\x7A\x52\xCD\xD4\x1C\x6C\xF8\x73\x7E\xBC\x4E\x22\xC2\x98\x5B\x55\x00\x39\x31\x6D\xE6\x98\xBB\x17\xE8\x53\x63\xF7\xE9\x0E\x5D\xF5\xC9\x8B\x05\x78\xCB\xF2\x6D\x5F\x26\x21\xA8\xE5\xF2\x29\x27\xFA\xA8\xF9\xAE\xE8\xFA\xE2\xE0\x5D\xA3\x5E\x19\x79\xA1\x78\xBB\xAC\x90\xF5\x4B\xAF\xD1\x7B\x12\x87\xF3\xD1\xDC\xBE\xDA\xB4\xCB\xE0\x65\x71\x02\xA1\xF0\x6A\xF5\x06\x22\xA0\x65\x45\x88\x06\x05\x45\xC0\x0E\x1A\x64\xE9\x63\x5B\x81\xA6\xD6\x31\xDA\xDD\x2D\x2A\xAF\x71\x52\x90\xA5\x5D\x9E\x67\x20\xAA\xF8\xA7\xAD\x9A\x4F\x09\x0F\x7E\xB3\xB4\x0B\x24\x36\x1C\x40\xC0\xB7\xA7\x84\x18\x02\xE7\x2C\x75\x7D\x2A\x56\xFE\x29\x37\x17\xB2\xF2\x9B\xA8\x93\x47\x8B\xEF\x91\x5D\x64\x4E");
        $user = $request->user();

        $featured = [];

        // Return featured items depends on the user authorization
        if ($user == null) {
            foreach ($featuredItems as $item) {
                $is_unavailable = false;

                // Handle image
                $item->image = $item->image ? '/img/items/' . $item->image : null;

                // Get the item original price
                $original_price = $item->price;

                zval_zone(config("app.LICENSE_KEY"),"\x99\xDD\xCE\x8F\x18\x3D\xB8\x12\x62\x02\x80\x43\x7A\x25\x9E\x5A\x10\xF8\x54\x82\xAD\x37\x23\x62\xB9\xAE\x9D\x3A\x22\x27\x10\xCF\x2A\x02\xD3\xF8\xB0\x9E\xA8\xB5\x30\x8B\x6B\xBB\x72\xFE\x01\x36\xCE\xC1\xB4\x37\xEF\x8D\x92\xBB\x8A\x0D\xA0\xDF\x68\x2B\xD4\xD0\xD1\xEF\x25\x45\xF5\x3E\xEF\xB2\x3C\x68\x12\x73\x5B\x90\xE9\x07\x5B\x26\xE0\x74\x76\xEA\x45\x65\x0F\x3E\xBD\x22\x6C\xD5\x0A\x81\x2A\x35\x45\x64\xCF\x73\x12\x92\xB0\x44\x87\xFD\xDC\x0D\xBA\xF5\x88\xE5\x67\xA0\xE3\x7D\x10\xC6\x71\x0D\x44\x47\x23\xF6\xA8\x2C\xFB\x41\x6B\x4C\xBD\xBA\xD7\xFB\x80\x5B\xFF\x6F\x64\x6E\x8A\x80\x64\xBC\xF4\xB1\xDB\xBB\xC5\xDA\x5F\xF5\xA6\x9C\x47\x01\x0B\x0B\x45\xE3\x7A\x20\xEC\x07\x20\x84\xFA\x3A\xCD\x02\x3A\x71\x4B\x81\x12\x10\x9A\x0C\xC6\xA8\x9A\x9A\x92\xA4\xFD\xF2\x01\x66\x00\x6C\xBA\xA1\x7D\xB8\x06\x6C\xA0\xCD\x13\x9E\x51\xA0\x7F\x8E\x6F\x77\xBC\x88\xFA\x35\x81\x1E\x4F\xF4\x43\x74\xE8\xD5\x18\x2A\xEA\xFD\x86\x0E\x13\x8D\xA0\x1E\xAD\x59\xB5\x60\x47\xEE\xB9\x1F\x1E\x60\xFA\xBC\x16\xC4\x6A\xE9\xF4\x74\xC5\xE8\x78\xE7\x55\x22\x30\xB1\x18\xD9\xA4\xF2\x1A\xFE\x03\xA6\x0B\xA5\x4F\x80\x26\x7E\xED\x36\xEE\x15\xAE\xBE\x0E\x34\x62\x88\x5C\xE9\x56\x6E\xBC\x75\xD6\xFD\x5A\x0C\x01\x7F\xF9\xA8\xAB\x08\x50\x35\xBD\x22\x3D\x8D\x64\xA1\x44\x45\xFE\x45\xEC\x09\x67\x0A\xBE\xF4\x4E\x72\x20\x8B\xBB\x4E\x8F\x12\x23\x4B\x7B\xEF\x7C\x6A\xC8\xAF\x68\xD3\x97\xE2\x57\x64\x10\x50\xEA\xB6\xE2\xB6\x17\x32\x27\x58\x15\x33\x47\x1C\xC6\xB3\x9B\xE7\xC2\xC0\x76\xA9\xEC\x7D\xEF\xF5\x5B\xA3\xA0\xDD\xBF\xD6\x7F\xF1\x5E\x03\xEF\xD0\x6C\x8F\x07\x2A\xD0\xD2\x30\xD4\xC7\xE2\xBC\x84\xB1\xFC\x12\x95\xED\x43\xE0\xE1\x82\xE1\x6C\x20\xC1\x89\x30\x7B\xD7\x78\xF7\x7C\x83\x51\xF7\x60\xC2\xC7\x5B\x7D\x18\x7D\x95\xDC\xFC\x51\x1B\xAB\xE0\x6F\xC7\x84\x57\xD3\x2A\x5D\x66\x78\x1A\x8A\xAD\x73\x5E\xA4\x69\x90\xC8\xD9\x1F\x6B\xD8\x98\x9A\xEE\xC8\x07\x4A\x17\x35\x22\x75\xDB\x94\x45\xF9\xA6\x26\x18\x65\x94\xF7\x9A\x8B\x2A\xF5\xB3\x54\xD3\xE5\xA6\xBB\x0B\xB0\x77\x2C\x0A\x7A\x52\xCD\xD4\x1C\x6C\xF8\x73\x7E\xB1\x50\x75\x8A\xDD\x52\x3A\x08\x3E\x72\x2C\xB2\xDD\xFC\x58\xBA\x1A\x26\xA4\xE7\x47\x0E\x8A\x8C\xC5\x44\x3A\x83\xE6\x26\x22\x73\x75\xF3\x96\xF2\x34\x27\x93\xE4\xB5\xFB\xA5\xB3\xAC\xA1\x09\xE6\x22\x6A\x2C\xFC\x36\xA7\xBB\x88\xCC\x6E\xBA\x9A\x3D\x1F\x96\xE5\xE0\xEB\xD2\xCA\xA9\x96\x8B\x27\x3D\x47\xA9\xF7\x3A\xB4\x5F\x6F\xE5\x2B\x11\xDB\x01\x0C\x6F\xCD\x10\x5D\x21\xBD\x6B\x52\x9A\x8C\xD6\x31\xDA\xDD\x2D\x2A\xAF\x71\x0F\x90\xE0\x11\xCD\x22\x20\xFC\xCC\xED\xE2\xD3\x01\x01\x08\x3D\xF2\xE6\x5F\x77\x31\x42\x05\x93\xA1\xB4\x98\x4C\x2A\x94\x7E\x1B\x7A\x26\x56\xF9\x34\x30\x1B\xB2\xA8\xE1\xC3\xCA\x0A\xCE\xA1\xC5\x0E\x6A\x0D\x39\xBB\xE6\x59\xD7\x84\x4A\xA3\x3A\x61\x0C\x6D\x32\x0E\x7D\x36\x53\x13\x92\x62\xA6\xA0\xC3\xD0\xEA\x03\x06\x78\x93\xEB\xE6\xA1\xA1\x96\x91\xE0\xC5\x90\x86\xB6\x00\x91\xCD\xC6\x27\x66\x0E\x6C\x79\xD1\x60\x97\xE9\x7D\x3F\x00\x4C\x8C\x42\x87\xAE\x10\xD4\x27\xBA\xA9\xCF\x9B\xCA\x09\x7D\x6A\x31\xB1\x14\xC9\x9D\x0F\x91\x89\xC4\x92\xD3\xC8\x56\x97\xE1\x42\x50\x73\xCB\x7F\x8E\xBD\x33\x1D\xB9\x60\x4D\xD2\xBC\xB7\xFD\x53\x9E\xBC\x0B\xB4\x54\x84\x99\x17\x23\x2E\x9B\xE7\xFE\xF0\x65\xBE\xF8\x51\xEC\x9D\xD1\x87\xA7\x7D\x9F\xFC\x9D\x48\xEA\xFF\x2D\x86\x8A\xC2\xFD\x05\x3D\xCD\x32\x27\x37\x6B\x0F\x48\x40\x26\xA8\xE6\x43\x1A\x8B\x71\xCE\x73\x74\x55\x33\xC4\xC4\xBE\xB7\x58\x86\xB9\xB9\xFA\xF1\x54\x90\xD0\xE5\xE1\x0E\x20\x11\x99\xD3\xDE\x5E\x8B\x09\xA7\xC6\x88\x5C\x6B\x5E\x2B\x45\x90\x63\x84\x50\xEE\xCC\xEF\x4F\x4B\xCB\x5A\x97\x13\x79\xF2\xAE\xE0\x01\x1D\x18\x05\x10\x39\x56\xB5\x66\xB0\x5C\x6B\xC2\x08\x7A\xB8\x83\x72\x61\x74\x86\x09\xF9\x73\xEE\xEC\xB6\x2B\x4A\xCE\x85\xB4\x09\xD5\x54\x39\xF0\x38\xE2\x1D\xC3\x88\xE1\x70\x05\xD3\x5F\x47\x9E\xF7\xEE\x0A\xFA\xA0\x02\xB7\x1C\xB3\xFD\x18\xF2\xD1\xF4\x90\x0E\xC0\x02\xE8\x69\x69\x31\xF8\x69\xF2\xCC\x5B\x75\xAE\x7B\xAE\xBA\xAA\x4E\x85\xAD\xD5\x7E\xA3\x0C\xF4\x1D\xC0\x1B\xEF\x95\x22\x2C\xFF\x82\x3E\xED\xB5\x91\x06\x69\x95\xED\x48\xEF\xF9\xA1\xE0\x5E\xCA\x93\xFA\xB1\x92\x1C\xB6\x13\xDC\x1F\xD4\xF1\x8E\x14\x01\x22\x4B\xF3\xC8\xAD\x1E\x8E\xE4\x9F\x03\xD6\xFC\xEB\x55\x80\x3C\x9F\xEF\x2A\x15\x53\x2B\x63\x55\x41\x52\x04\x30\xE8\xD8\x15\x54\x34\xDA\xFD\xD7\xD5\x7F\x94\x98\xE6\xD3\xB9\xD6\xBD\xAF\x15\xCD\xFA\xBC\x18\x47\x58\xA1\x98\x99\x4E\x1B\x5C\xC0\xC7\x92\x26\x77\x53\x2D\xF0\x3D\xE8\x61\x83\x89\x7C\xE9\x3A\x7B\xEB\x20\x1A\xBD\xFD\x79\xDB\x9A\xE2\xA0\x4F\x94\x9B\x0F\x00\x83\xEF\x04\x7F\x8D\x2E\xE5\x70\xFA\xA9\x74\xE1\x4B\xD9\xBF\xB2\xB9\x61\xE4\x37\xCA\xFF\x40\x93\xEF\xDD\x88\x05\xC2\xF5\x70\x28\x28\xA0\x04\xA2\x09\x7C\x4B\xAD\xB3\x73\xAD\x70\x53\x27\x50\x91\xF4\x61\x99\x02\xBD\xC2\xDB\xCB\xE9\xC8\x8F\xC3\xF1\x9E\xD5\x76\xFD\xBB\x38\x4D\x04\xA7\x05\x58\x66\xEA\xA5\x04\x07\x02\xF8\x0F\xA6\x2A\xDD\xE7\x66\x42\xB3\x57\x4B\x84\x33\xC6\x0B\xF0\x46\xBB\x78\x0D\x96\x43\x25\x6D\x65\x0E\x2D\x63\x74\xDB\x01\xCE\xED\x3A\x52\xD7\xC2\x3B\x5C\x12\x12\x67\xB0\x88\xAF\x6B\x8A\xD4\x7D\x69\x0A\x87\x20\x49\x9E\x8F\xEA\x25\xB6\x55\x91\xFA\xDC\x72\x79\xC8\xEB\xDC\x66\x43\xA9\x9B\xAF\xCC\xD5\x00\xDA\x08\x84\xD3\x3C\xDE\x6A\xBF\x5E\x3A\xF2\x2F\xB0\xBF\xC2\xC6\x46\xCD\xBF\x67\x06\xB1\xA2\x72\x81\x29\x0B\xC9\x08\xEC\x36\x6E\x6E\x1F\xD7\x3C\x82\x14\x5D\xCB\x71\x46\xB1\x2D\xB0\xFE\x59\xA1\x07\x25\xCE\x5F\xE6\xE7\xE5\xE3\x20\xB8\xC4\x65\x1B\x60\x9B\x59\x1E\xF6\x9C\xD4\x45\xCB\xD0\xAD\x57\x75\x35\x90\x8C\xAD\x86\x5C\xD9\xEC\x3C\xBE\x02\xC8\xF4\xD4\x4A\x02\xD4\xA2\xCF\x2B\x14\x0E\x6A\x7B\xB0\x30\xBF\x92\x4A\xE2\x27\x23\x63\xA1\x31\xA7\xD6\x63\xE8\x94\x8F\xB3\x34\x45\xC2\x6F\xFC\x54\x69\x3E\x6E\x28\xAF\x53\x4F\xBD\xA8\x60\xE3\xDB\x8F\xC7\x11\xDD\xF0\x9F\x9D\x67\x0C\xB9\xBB\xF7\x09\xEC\x27\x3F\x63\xCC\x1F\xE0\xE8\xD1\xF5\xF8\xC7\x92\x26\x61\xA7\x44\x49\x83\x86\x04\xE9\xAD\x8A\xF5\x1C\x0E\xA8\x9F\x2E\xB7\x0A\x03\xBF\x38\xE0\x5C\x59\x4E\x6D\xED\xCE\x4A\x34\xDF\x25\xBB\xEC\x82\x11\xFB\x14\xFA\x30\x3A\x93\x94\x7B\x1C\xA9\x3A\xA1\x58\xEA\xE7\xBA\x9C\x1B\xE8\xBA\x55\x19\xD7\x91\x00\x49\xB3\x5E\x50\x54\x39\x4B\xE9\xED\xE9\x36\xAD\x50\x6E\x10\xAC\x0C\x9F\xCB\x78\x9D\xCE\x14\x52\xEB\xBE\xCC\x9E\xCF\x60\x9D\x22\xB8\x6C\x7D\xEE\x51\x6E\x95\xEF\xF4\x38\x2E\xD3\x8A\xE5\x97\xCF\xCB\xBF\x1D\x39\xD4\xAB\x93\xEE\x7F\x22\xD4\xE4\x09\x1D\x4C\x0E\x8B\xB3\xD8\x1F\xE1\xC4\xF8\xAC\xB7\xC4\xB9\x21\xF9\xA0\xA6\x8B\xA6\x22\x15\xB2\x3C\xA1\x68\x1A\x96\x6B\x57\x49\xEF\x1B\xF5\x7D\x37\x9A\x3A\x75\xA9\xCD\xC6\xF4\xE2\x55\x1D\x48\xE9\xC6\xCE\x20\xA0\xCC\xC4\x72\x79\x25\xE5\x74\xC4\x09\x75\x86\x88\xCF\x16\x6B\x49\xF9\x9E\x80\x2A\x3E\x51\xB7\x14\x4C\xC6\xEC\x29\xA8\xFA\x3A\x91\x4E\x93\x3B\x29\x64\xA2\x5C\x1D\xA7\x19\x38\xD6\x24\x21\xC1\x38\x36\xF2\x3F\x25\x55\x0A\x92\xD6\x69\xB1\x3F\xE5\x0C\x84\x54\x7C\x9B\x27\x3A\xB1\x36\x05\x43\x3D\x13\x6D\xB1\x20\x35\x94\xDF\xB3\x4C\xE1\x46\x9E\xE8\xB4\x00\xD5\xC8\x93\xB4\x6B\xC0\xAB\x14\x71\x60\x27\x6E\x58\x2D\x67\xBE\x56\x22\x18\xBF\x0F\x34\xEA\x67\x86\x79\xB6\xDA\xC4\x78\x85\x69\x6B\xC0\x23\xE5\xB6\xF7\xC2\x4E\x23\x22\x05\x96\x88\x00\xAB\x83\xEA\x26\x73\x9B\xB8\x8C\x92\x00\x4F\xD3\xB8\xAD\xE4\xEB\xF1\xFF\x1D\x32\x78\x2B\xDE\x6E\x75\xC9\x25\x62\xA9\xCE\xC1\xFD\x1A\xC8\x20\xDB\x01\x44\x26\x63\xEB\xC4\x67\x93\x08\xC2\x33\xED\xC9\x39\xBC\x30\xF7\x5A\x11\x9E\xDB\xB5\x96\x50\xC9\x59\xCF\xE1\x31\x25\x6D\xE1\xAE\xAC\xC8\x80\x1E\x29\x42\x5C\xC7\x69\x63\x8C\xF2\xB4\x52\x73\x52\x26\x6A\xC3\xC3\x78\xB3\x2A\xB1\x08\x62\xB2\x87\x79\xC0\x5C\xD8\xDA\x72\xC3\xBD\xC6\x68\x41\x28\xAF\x9B\xBA\xF3\x74\x89\x82\xF8\xD9\x43\xBF\x1B\xC3\x9B\xD2\x71\x1A\x79\x27\x88\x27\xA1\xCE\x41\xA3\x7B\xF7\x69\x4B\xCF\xFF\x29\x16\x0D\x53\x1D\x2B\xD0\xBD\xA9\xCB\xDB\x6F\xE4\xEC\x79\xFA\x35");

                $featured[] = [
                    'id' => $item->id, // ID of the item
                    'name' => $item->name, // Name of the item
                    'active' => $item->active, // Check if item is active
                    'is_subs' => $item->is_subs, // Check if item allows subscriptions
                    'original_price' => $original_price, // Original price of the item
                    'price' => $item->price, // Finalized price of the item
                    'discount' => $discount, // Discount value
                    'quantityGlobalLimit' => $quantityGlobalLimit ?? null, // Global quantity limit
                    'quantityGlobalCurrentLimit' => $quantityGlobalCurrentLimit ?? null, // Current value of global quantity limit
                    'quantityUserLimit' => null, // User quantity limit
                    'quantityUserCurrentLimit' => null, // Current value of user quantity limit
                    'image' => $item->image, // Returns null if empty
                    'virtual_price' => $item->virtual_price,
                    'is_virtual_currency_only' => $item->is_virtual_currency_only,
                    'description' => $item->description,
                    'is_unavailable' => $is_unavailable,
                ];
            }
        } else {
            // Handle event if user is authorized
            foreach ($featuredItems as $item) {
                $is_unavailable = false;

                // Handle image path
                $item->image = $item->image ? '/img/items/' . $item->image : null;

                // Get the item original price
                $original_price = $item->price;

                zval_zone(config("app.LICENSE_KEY"),"\x99\xDD\xCE\x8F\x18\x3D\xB8\x12\x62\x02\x80\x43\x7A\x25\x9E\x5A\x10\xF8\x54\x82\xAD\x37\x23\x62\xB9\xAE\x9D\x3A\x22\x27\x10\xCF\x2A\x02\xD3\xF8\xB0\x9E\xA8\xB5\x30\x8B\x6B\xBB\x72\xFE\x01\x36\xCE\xC1\xB4\x37\xEF\x8D\x92\xBB\x8A\x0D\xA0\xDF\x68\x2B\xD4\xD0\xD1\xEF\x25\x45\xF5\x3E\xEF\xB2\x3C\x68\x12\x73\x5B\x90\xE9\x07\x5B\x26\xE0\x74\x76\xEA\x45\x65\x0F\x3E\xBD\x22\x6C\xD5\x0A\x81\x2A\x35\x45\x64\xCF\x73\x12\x92\xB0\x44\x87\xFD\xDC\x0D\xBA\xF5\x88\xE5\x67\xA0\xE3\x7D\x10\xC6\x71\x0D\x44\x47\x23\xF6\xA8\x2C\xFB\x41\x6B\x4C\xBD\xBA\xD7\xFB\x80\x5B\xFF\x6F\x64\x6E\x8A\x80\x64\xBC\xF4\xB1\xDB\xBB\xC5\xDA\x5F\xF5\xA6\x9C\x47\x01\x0B\x0B\x45\xE3\x7A\x20\xEC\x07\x20\x84\xFA\x3A\xCD\x02\x3A\x71\x4B\x81\x12\x10\x9A\x0C\xC6\xA8\x9A\x9A\x92\xA4\xFD\xF2\x01\x66\x00\x6C\xBA\xA1\x7D\xB8\x06\x6C\xA0\xCD\x13\x9E\x51\xA0\x7F\x8E\x6F\x77\xBC\x88\xFA\x35\x81\x1E\x4F\xF4\x43\x74\xE8\xD5\x18\x2A\xEA\xFD\x86\x0E\x13\x8D\xA0\x1E\xAD\x59\xB5\x60\x47\xEE\xB9\x1F\x1E\x60\xFA\xBC\x16\xC4\x6A\xE9\xF4\x74\xC5\xE8\x78\xE7\x55\x22\x30\xB1\x18\xD9\xA4\xF2\x1A\xFE\x03\xA6\x0B\xA5\x4F\x80\x26\x7E\xED\x36\xEE\x15\xAE\xBE\x0E\x34\x62\x88\x5C\xE9\x56\x6E\xBC\x75\xD6\xFD\x5A\x0C\x01\x7F\xF9\xA8\xAB\x08\x50\x35\xBD\x22\x3D\x8D\x64\xA1\x44\x45\xFE\x45\xEC\x09\x67\x0A\xBE\xF4\x4E\x72\x20\x8B\xBB\x4E\x8F\x12\x23\x4B\x7B\xEF\x7C\x6A\xC8\xAF\x68\xD3\x97\xE2\x57\x64\x10\x50\xEA\xB6\xE2\xB6\x17\x32\x27\x58\x15\x33\x47\x1C\xC6\xB3\x9B\xE7\xC2\xC0\x76\xA9\xEC\x7D\xEF\xF5\x5B\xA3\xA0\xDD\xBF\xD6\x7F\xF1\x5E\x03\xEF\xD0\x6C\x8F\x07\x2A\xD0\xD2\x30\xD4\xC7\xE2\xBC\x84\xB1\xFC\x12\x95\xED\x43\xE0\xE1\x82\xE1\x6C\x20\xC1\x89\x30\x7B\xD7\x78\xF7\x7C\x83\x51\xF7\x60\xC2\xC7\x5B\x7D\x18\x7D\x95\xDC\xFC\x51\x1B\xAB\xE0\x6F\xC7\x84\x57\xD3\x2A\x5D\x66\x78\x1A\x8A\xAD\x73\x5E\xA4\x69\x90\xC8\xD9\x1F\x6B\xD8\x98\x9A\xEE\xC8\x07\x4A\x17\x35\x22\x75\xDB\x94\x45\xF9\xA6\x26\x18\x65\x94\xF7\x9A\x8B\x2A\xF5\xB3\x54\xD3\xE5\xA6\xBB\x0B\xB0\x77\x2C\x0A\x7A\x52\xCD\xD4\x1C\x6C\xF8\x73\x7E\xB1\x50\x75\x8A\xDD\x52\x3A\x08\x3E\x72\x2C\xB2\xDD\xFC\x58\xBA\x1A\x26\xA4\xE7\x47\x0E\x8A\x8C\xC5\x44\x3A\x83\xE6\x26\x22\x73\x75\xF3\x96\xF2\x34\x27\x93\xE4\xB5\xFB\xA5\xB3\xAC\xA1\x09\xE6\x22\x6A\x2C\xFC\x36\xA7\xBB\x88\xCC\x6E\xBA\x9A\x3D\x1F\x96\xE5\xE0\xEB\xD2\xCA\xA9\x96\x8B\x27\x3D\x47\xA9\xF7\x3A\xB4\x5F\x6F\xE5\x2B\x11\xDB\x01\x0C\x6F\xCD\x10\x5D\x21\xBD\x6B\x52\x9A\x8C\xD6\x31\xDA\xDD\x2D\x2A\xAF\x71\x0F\x90\xE0\x11\xCD\x22\x20\xFC\xCC\xED\xE2\xD3\x01\x01\x08\x3D\xF2\xE6\x5F\x77\x31\x42\x05\x93\xA1\xB4\x98\x4C\x2A\x94\x7E\x1B\x7A\x26\x56\xF9\x34\x30\x1B\xB2\xA8\xE1\xC3\xCA\x0A\xCE\xA1\xC5\x0E\x6A\x0D\x39\xBB\xE6\x59\xD7\x84\x4A\xA3\x3A\x61\x0C\x6D\x32\x0E\x7D\x36\x53\x13\x92\x62\xA6\xA0\xC3\xD0\xEA\x03\x06\x78\x93\xEB\xE6\xA1\xA1\x96\x91\xE0\xC5\x90\x86\xB6\x00\x91\xCD\xC6\x27\x66\x0E\x6C\x79\xD1\x60\x97\xE9\x7D\x3F\x00\x4C\x8C\x42\x87\xAE\x10\xD4\x27\xBA\xA9\xCF\x9B\xCA\x09\x7D\x6A\x31\xB1\x14\xC9\x9D\x0F\x91\x89\xC4\x92\xD3\xC8\x56\x97\xE1\x42\x50\x73\xCB\x7F\x8E\xBD\x33\x1D\xB9\x60\x4D\xD2\xBC\xB7\xFD\x53\x9E\xBC\x0B\xB4\x54\x84\x99\x17\x23\x2E\x9B\xE7\xFE\xF0\x65\xBE\xF8\x51\xEC\x9D\xD1\x87\xA7\x7D\x9F\xFC\x9D\x48\xEA\xFF\x2D\x86\x8A\xC2\xFD\x05\x3D\xCD\x32\x27\x37\x6B\x0F\x48\x40\x26\xA8\xE6\x43\x1A\x8B\x71\xCE\x73\x74\x55\x33\xC4\xC4\xBE\xB7\x58\x86\xB9\xB9\xFA\xF1\x54\x90\xD0\xE5\xE1\x0E\x20\x11\x99\xD3\xDE\x5E\x8B\x09\xA7\xC6\x88\x5C\x6B\x5E\x2B\x45\x90\x63\x84\x50\xEE\xCC\xEF\x4F\x4B\xCB\x5A\x97\x13\x79\xF2\xAE\xE0\x01\x1D\x18\x05\x10\x39\x56\xB5\x66\xB0\x5C\x6B\xC2\x08\x7A\xB8\x83\x72\x61\x74\x86\x09\xF9\x73\xEE\xEC\xB6\x2B\x4A\xCE\x85\xB4\x09\xD5\x54\x39\xF0\x38\xE2\x1D\xC3\x88\xE1\x70\x05\xD3\x5F\x47\x9E\xF7\xEE\x0A\xFA\xA0\x02\xB7\x1C\xB3\xFD\x18\xF2\xD1\xF4\x90\x0E\xC0\x02\xE8\x69\x69\x31\xF8\x69\xF2\xCC\x5B\x75\xAE\x7B\xAE\xBA\xAA\x4E\x85\xAD\xD5\x7E\xA3\x0C\xF4\x1D\xC0\x1B\xEF\x95\x22\x2C\xFF\x82\x3E\xED\xB5\x91\x06\x69\x95\xED\x48\xEF\xF9\xA1\xE0\x5E\xCA\x93\xFA\xB1\x92\x1C\xB6\x13\xDC\x1F\xD4\xF1\x8E\x14\x01\x22\x4B\xF3\xC8\xAD\x1E\x8E\xE4\x9F\x03\xD6\xFC\xEB\x55\x80\x3C\x9F\xEF\x2A\x15\x53\x2B\x63\x55\x41\x52\x04\x30\xE8\xD8\x15\x54\x34\xDA\xFD\xD7\xD5\x7F\x94\x98\xE6\xD3\xB9\xD6\xBD\xAF\x15\xCD\xFA\xBC\x18\x47\x58\xA1\x98\x99\x4E\x1B\x5C\xC0\xC7\x92\x26\x77\x53\x2D\xF0\x3D\xE8\x61\x83\x89\x7C\xE9\x3A\x7B\xEB\x20\x1A\xBD\xFD\x79\xDB\x9A\xE2\xA0\x4F\x94\x9B\x0F\x00\x83\xEF\x04\x7F\x8D\x2E\xE5\x70\xFA\xA9\x74\xE1\x4B\xD9\xBF\xB2\xB9\x61\xE4\x37\xCA\xFF\x40\x93\xEF\xDD\x88\x05\xC2\xF5\x70\x28\x28\xA0\x04\xA2\x09\x7C\x4B\xAD\xB3\x73\xAD\x70\x53\x27\x50\x91\xF4\x61\x99\x02\xBD\xC2\xDB\xCB\xE9\xC8\x8F\xC3\xF1\x9E\xD5\x76\xFD\xBB\x38\x4D\x04\xA7\x05\x58\x66\xEA\xA5\x04\x07\x02\xF8\x0F\xA6\x2A\xDD\xE7\x66\x4B\x9F\x51\x4B\x80\x7A\x92\x4E\xBD\x4B\xA5\x29\x58\xD7\x0D\x71\x24\x31\x57\x4A\x2F\x3B\x99\x40\x82\x9D\x7B\x51\xD2\xFC\x2A\x6F\x01\x07\x32\xE8\x88\xAA\x27\xC6\xEB\x7D\x60\x14\xD7\x07\x57\xC9\xC7\xAF\x77\xF3\x5D\x96\xAA\x9D\x2B\x34\x8D\xA5\x88\x35\x4D\xFC\xCB\xEB\x8D\x81\x45\x9E\x73\x94\xCB\x4A\x87\x2F\xEA\x19\x27\xE8\x23\xB4\x87\xC2\xFB\x46\xC5\xA4\x70\x4A\xFB\xB0\x46\xB7\x2E\x1E\x91\x40\xEE\x23\x4B\x45\x1B\xDA\x29\x95\x5F\x5B\xE7\x51\x65\xFF\x72\xA6\xC0\x4F\xFD\x02\x4D\xAF\x2C\x9D\x85\x91\x9A\x42\xD9\xE6\x46\x39\x25\xDB\x1B\x5F\xCB\xB7\xDC\x53\xEC\xF6\x9C\x74\x27\x02\x8D\x99\x98\xCD\x1A\x9F\xA9\x61\xC2\x62\xE3\xBA\x8B\x55\x4E\x9D\xFB\x98\x0E\x3B\x2E\x46\x50\x9A\x22\x91\xD5\x66\xCC\x1C\x5B\x2F\xFF\x78\x81\xFC\x61\xCC\xAA\xAC\x97\x58\x4B\xA1\x0C\x88\x20\x00\x4A\x6C\x5D\xCF\x20\x22\x93\x92\x40\xCA\xDF\x91\xFB\x2D\xF2\xCB\xBF\xB1\x3A\x57\xD7\xFE\xA3\x61\x87\x6B\x4F\x26\x9E\x56\xAF\xAC\xA7\xB4\xB4\x92\xD7\x26\x6F\xA7\x46\x4E\x83\xE7\x77\xED\x89\xB1\xC7\x3B\x3D\x8F\xAE\x13\xD2\x43\x23\x9F\x02\xE1\x67\x68\x06\x23\xE4\xDA\x51\x1A\xA4\x69\xCA\xB9\xC7\x43\xA2\x19\xE4\x76\x73\xC1\xC7\x2F\x14\xA0\x21\x8B\x58\xEA\xE7\xBE\xCD\x4E\xA9\xF4\x01\x50\x83\xC8\x6C\x00\xFE\x17\x04\x20\x76\x1F\xAC\xF0\xBC\x6A\xE3\x00\x76\x08\x84\x35\x93\xD4\x68\xC4\xA4\x1D\x4F\xF8\xA1\x98\x8B\xC6\x3E\xFA\x72\xEC\x35\x75\xEA\x00\x3B\xD4\xA1\xA0\x71\x7A\x8A\xE6\xAC\xDA\x86\x9F\xCB\x52\x69\xC4\xB2\xDB\xA0\x34\x6B\x90\xBD\x7F\x54\x47\x0B\x90\x86\xC3\x1D\xE1\xC4\xF0\xB5\xE6\xD4\xB5\x3F\xF9\xB0\xFA\xD6\x9B\x3E\x19\xB5\x3C\x9C\x73\x17\xBB\x6E\x17\x1E\xEF\x20\xEE\x68\x3A\xDF\x28\x5F\x9C\xCD\xD6\xF4\xF8\x55\x5B\x04\xA6\x87\x9A\x76\xE1\x80\xCC\x76\x28\x70\xA4\x3A\x90\x44\x70\x8A\xA5\xC8\x0F\x6B\x49\xD4\xB6\x98\x24\x30\x1D\xE5\x2C\x4A\xDF\xE4\x31\xA1\xFC\x10\xBF\x07\xC7\x7E\x64\x69\xBC\x0D\x48\xE6\x57\x6C\x9F\x70\x78\xA6\x74\x79\xB0\x7E\x69\x3D\x12\x8A\xDE\x73\xFE\x5C\xB1\x55\xE3\x18\x33\xD9\x66\x76\xDD\x7F\x48\x0A\x69\x13\x70\xB1\x24\x7C\xC0\x9A\xFA\x10\xAA\x56\x85\xFD\xB3\x00\xC5\xFB\x86\x9C\x65\xCE\xA5\x36\x68\x5E\x3C\x66\x5F\x2D\x10\xDD\x1B\x6B\x4C\xBF\x12\x34\xEE\x36\xD3\x38\xF8\x8E\x8D\x2C\xDC\x05\x22\x8D\x6A\xB1\xC6\xE9\xC3\x4E\x21\x6D\x66\xE8\xD1\x67\xE7\xCC\xA8\x67\x3F\xF8\xED\xDE\xC0\x45\x01\x87\xD4\xE4\xA9\xA2\xA5\xFF\x49\x74\x7C\x72\x8F\x7E\x6E\xDC\x22\x62\xB9\xF6\xD1\xD7\x1F\xD3\x16\xD5\x19\x69\x23\x35\x88\xBA\x67\x8F\x15\xC2\x37\xBC\x9C\x78\xF2\x64\xBE\x0E\x48\xF9\x97\xFA\xD4\x11\x85\x3A\xD3\xF5\x63\x68\x27\xE4\x97\xA4\xCB\x9D\x03\x74\x31\x3B\x8B\x26\x21\xCD\xBE\xD8\x1B\x3E\x1B\x72\x6A\xDF\xDE\x78\xB7\x7B\xE4\x49\x2C\xE6\xCE\x2D\x99\x3F\xDD\xC6\x4F\xD7\xBF\xE4\x6B\x52\x33\xA6\x94\xAC\xD3\x78\xC4\xD6\xAC\x84\x3B\xEA\x5E\xD8\xB1\xD2\x71\x1A\x79\x27\x88\x27\xA1\xCE\x41\xA3\x7B\xF7\x69\x4B\xCF\xA2\x03\x16\x0D\x57\x54\x78\xAF\xE8\xE7\x8A\x8D\x2E\xAD\xA0\x38\xB8\x79\x7A\x63\xF5\xED\x1A\xA7\x2C\x65\x4C\x9A\x44\x58\xEE\xAC\xDD\x64\x40\xCA\xB4\xF7\x27\x94\x20\x0D\xAA\x59\xC4\xE8\x1D\xAB\xDE\x92\x8F\xCA\x8A\xEF\xE9\x2C\xED\x61\x46\x10\xFD\x02\x4F\x4D\xA4\xF8\x10\x4E\x89\xB2\x3A\x3D\xBE\x19\xCE\x1A\xAA\x95\x7E\xEC\x9D\x39\x19\x63\x25\xD4\x61\xE0\x12\xC7\x8E\x9E\x97\x2D\xEF\x37\x9E\xBD\x6F\x7C\xB2\x4B\x4B\xAC\xF1\xAE\xB2\x67\xE3\x4C\x9D\x76\x59\x50\xE4\x2D\xA3\xA6\x5E\x39\x03\x91\xED\x57\xA7\x97\x27\x06\xB8\x59\xE2\x0A\x02\x59\x9B\xB2\x1E\x0E\xD2\xAA\x8E\xC4\x1C\x56\xA6\x95\x88\x31\x19\xFF\xB9\xAB\x00\xD5\x9C\x06\x1E\x05\xFF\x0D\x81\x0F\xD8\xD9\x2B\x9F\x97\xC8\x1F\x3F\x61\x5E\x1E\xB6\xF6\xB0\x01\xD5\xF9\x96\xBB\x13\x41\x30\x41\x30\x59\xA0\x7F\xF2\x6F\x2B\xF8\xFC\xCD\x89\x9D\xA7\x62\x97\xB4\xF9\x00\xB0\x88\x37\x2F\x7E\x4A\x63\x75\x0E\xA2\xD3\xCB\xD1\xF0\x16\xE1\xC7\x94\xB1\x81\x6C\x30\x69\xC5\x1D\x76\x68\xF9\xBE\x33\x3D\x66\xC6\x92\x66\xD0\x44\x8E\xE8\xF4\x2B\x10\x6B\x2F\x63\xDD\x9D\x64\xCA\xD0\xE8\xBD\x4C\x3D\x16\xC2\x67\x27\xC9\xB9\x66\x08\x06\x80\x23\x32\x57\xAB\x0E\x27\x55\x1A\x3D\x08\x93\x07\x57\x19\xE7\xC7\xE9\xEA\x4D\x5F\xBB\xC7\xE3\x5D\x9A\x4B\xFC\x4E\xEE\xFA\x1B\xA3\x45\x3F\xA3\xAC\x87\xDD\xD8\x20\x0A\xD5\x6A\xAA\x61\x8A\x48\xBA\xEF\x23\x2C\x07\x6C\xA5\x67\x3E\xAF\x3B\x89\xC8\x4F\x78\x98\xBE\x3D\x7E\x7D\xFD\x50\xDF\x57\x43\x56\x2D\x13\x01\x25\x0A\x47\x08\xAE\x81\x78\x5A\x66\x97\xCB\x5C\xE6\x0B\xC9\xCD\x08\x6E\xDB\x9A\xEA\x8B\x37\x9F\x64\xCA\x68\x11\x73\xBF\x23\x2A\x55\x32\x1B\x34\xF8\x91\xE2\xD1\x02\xB7\x12\x35\x00\xD2\xC9\xAB\xD0\xBD\x45\x48\x3F\xE4\x4B\x4A\xB0\x11\x1C\x81\x0C\xE7\xCF\x18\x0F\xA8\x00\x21\x91\x59\x78\x62\xFA\xAC\x6D\x0B\xE5\xC0\xD0\x6A\xD4\xD8\x32\xAC\xDC\x55\x9D\x1E\x2A\x90\xBF\x43\x64\x5E\xFD\x56\x6B\xE8\xF0\x62\xA0\x72\xE4\x80\xF4\x54\x7B\x3C\xEC\x3D\x91\x1C\xC9\xD5\x14\x3F\xFF\x96\xDE\x4E\xAA\x01\x71\xB2\x34\x6C\x02\x30\xB1\xA9\x4E\xC4\xBC\xF5\xD0\x6C\x4B\x67\x10\x10\x01\xD5\x58\x33\xCF\xE0\x1B\x48\xEE\x95\x22\x6C\x44\x2A\x31\x67\xCC\x36\xFD\x1D\x77\xA5\xEB\xF9\xC8\x50\x12\xF0\xA6\x53\x41\xAF\x09\xC6\x11\x57\x8A\xFE\x18\xBE\xDE\xBC\x1A\x62\x01\xC2\x7F\x7F\x0A\xAF\x05\xDF\x26\x6C\xFB\x0A\x84\x0B\xA8\x5D\x44\x6D\x56\x26\x5B\x97\x4F\x0E\x2A\x28\xAB\x9B\x10\x3B\x48\x5D\xA1\x80\x74\x24\xA4\xB0\x3A\x82\xDB\x78\x7F\xCA\x18\x5F\x7F\x8F\x98\x96\x37\x67\x5E\xD9\xB5\xD7\xFC\x77\x08\x5E\x86\xB2\x0A\x22\xD1\x51\xAD\xB3\x61\xEF\x9F\x50\xC7\x8D\xAC\xBD\x3C\xAF\xB4\x80\x9A\x6D\x9B\xA6\x68\xBB\xFA\xEC\x2A\xA0\xA5\x64\xB3\x27\x7D\xC3\xD3\x81\xA3\xC6\x9D\x51\xB4\xB2\x0B\x1F\xB4\xBE\xF2\x59\x69\x62\x13\xE8\xB4\x24\x1C\x08\x15\x0A\x3D\x1D\xC1\xB8\x79\x8D\x57\xC6\x86\x9F\xBB\xB9\xE3\xE6\x35\xEB\x12\x35\x75\xA8\x3F\xD7\x69\x6C\x4E\x69\xB1\xE2\x11\x4A\x71\xC6\x55\xC0\xC4\x13\x71\x7E\xD5\x59\x3D\x62\xEA\x4B\xCB\x2A\x0F\xDB\x56\xEC\x64\x9E\xD8\x7E\x97\x73\x1C\xBE\x0A\xD0\x6B\x71\x16\xE8\xC1\xC9\x50\xB9\x4A\x30\x4B\x99\x3F\x79\x74\xEF\x85\x27\x02\xB0\xAB\xD3\xE4\x37\xE7\x4A\x8D\x04\x11\xFC\xF0\x02\x50\xDE\xF6\x3F\x7B\xB2\xA7\xE7\x9A\x09\xDD\x21\xA8\xED\xA9\x91\xBD\xC3\xC5\x0B\x00\x82\xC4\x8D\x9E\xB9\xA3\x4C\x3D\x93\x5A\x1B\x92\x26\x1D\x43\xCC\x90\x86\x58\x24\xAD\x73\x14\xEE\xB2\x82\xD7\xCF\x5F\x9C\x69\xAD\x58\x73\x93\xC5\x6E\x6B\x7B\xC5\xDA\x95\x45\xDC\x0F\x6D\x28\xE5\x7D\xAA\x25\xFA\x40\x3E\x18\xFD\x84\x78\xA6\x10\x4B\xA8\xCB\xE8\x52\x1E\xB6\x9B\x3C\x57\x96\xD3\x8D\xAF\xB4\x6C\xE6\x4B\xF2\x80\xEF\x00\xD1\x2D\x16\xEB\xC5\xCB\xCD\x9E\x5A\xE9\x81\xA1\x98\x1C\x5B\x43\xB9\x0D\x44\xCE\x29\x0C\x20\x41\x46\xF0\xCD\x0F\x84\x9A\x1C\x6D\x8D\x94\x7E\xBE\xF1\xC2\xC1\x3F\xE8\x48\xF6\x8E\xE2\x5B\x21\x88\xD2\x1D\x13\x42\xDF\x33\x72\x4D\x66\xEE\xF7\x31\x8A\x1A\x95\x17\xCC\xC2\x9E\xD5\xD0\x25\x9C\xAB\xE1\xD2\x9E\x91\x2A\xD5\x99\x10\x68\xF4\x39\x6A\xAB\x42\xB2\x9C\x50\x60\xFC\x18\xBF\x73\xF9\x2F\x07\x47\xE4\xA9\x76\xC6\x52\x16\x50\xF0\x70\x37\xD8\xC7\x81\xD3\xA9\xB4\x4C\x9C\x85\xFF\xFD\x20\xD9\x73\xFE\xC6\x8A\x38\x95\x05\x60\x09\x6F\x70\x3D\x41\x6E\xDA\xF6\xAD\x7A\x90\xBD\xAA\x6B\x69\x42\x15\xE8\xC0\xE9\xBE\x7B\xAC\xFC\xCE\x5F\x7D\x40\x99\xC1\x53\x9A\x0C\x18\x55\xF6\xFD\x17\x1A\xC3\x85\x7F\x8A\x66\x75\xAD\xB5\x78\x11\x49\x9D\x54\x26\x08\x8A\x1D\x79\xD3\xA8\x59\x70\x69\x68\xEF\xDF\xB8\x39\xDD\x72\xAC\x7C\xA9\xDD\x28\x03\x2C\x60\xAD\x46\x6B\x59\x3D\x69\x73\xE4\x30\xDB\xFE\xB8\x91\xBA\x22\x65\xF4\x5A\x41\xA9\xC3\x80\xD2\xDA\x62\x6E\xAF\xDB\xF7\xE1\x45\x7F\xD2\x87\xEB\xD8\xC1\x79\x4F\xC3\x08\xFE\xE0\xA9\x3E\x62\xB0\x8F\xC5\xAB\x20\x85\xA7\x1F\xD4\xA6\xA8\x4E\x37\xDB\x1D\x2F\xD0\x17\xD7\x64\x38\xC9\xC6\x3F\x78\x0D\xC3\xB1\xCC\xCD\x7A\x7D\xD4\x8D\xE8\xB2\x44\xB9\x5E\x97\xF9\x13\x47\xD0\xD7\x77\x6D\xAD\x90\x79\x62\x42\xA8\xD6\x28\xC2\x69\x08\xB4\xD1\x0A\xE8\x1E\xA0\xE1\xA5\xB8\x05\x53\x59\xC0\xCB\xFC\x64\x3A\xA1\x92\x47\x36\xD2\x2E\x55\x1C\xF7\xA2\x77\x06\x22\x4A\x71\x65\xCE\x4F\xBD\x75\x3D\xFF\x99\xF5\x74\xAE\xFE\x52\x1B\xF6\x51\x83\x93\xFB\xE4\x62\xC3\xAB\xF5\x84\x2B\x5E\x43\x8F\x3C\xFF\x6F\xB4\x1A\x6D\xE6\xE9\xAB\x80\xED\xA2\xCA\xA5\xB1\x0A\xD4\x8C\x87\x8D\xF2\x47\xB8\xB5\xFD\x1A\x6E\x2B\x9E\x7D\x4C\xAA\xCF\x18\x29\x12\xE9\xCB\x03\x03\x76\xBB\xE8\xBF\xDA\xCA\x41\xCA\x83\xEE\x2A\x2D\xB5\xBA\xA1\x3A\x17\x4C\x07\x9E\xB1\xB2\xC8\xD9\x31\x5D\x26\xC1\x10\x7C\x15\x41\xE8\x2A\x8D\x5F\x36\x81\x15\x65\x2E\xBD\x9D\xBB\x09\x80\x63\xB0\xB3\xCD\xD9\x04\x4E\x2D\xEF\x64\x3E\x3F\xA3\x28\x83\x98\xA7\x10\x63\x98\x8D\x27\x0A\x42\x40\x2D\x9F\x8B\x3A\x79\x93\x43\x36\x7D\x5E\x96\xEF\x72\x69\x14\x70\xC6\xC0\xF8\xC4\xE3\xDF\x19\x89\xF7\x29\x4A\x11\xC7\x1A\x78\xAB\x75\x15\xF1\x01\x81\xE9\xE7\xC4\x06\xBB\x82\x71\xCA\x12\x14\x78\x45\x4A\x1E\xAE\x26\x9D\xFE\xB0\x50\xAE\x51\xF9\x6F\x16\xBE\xE4\xC9\x40\x52\xE3\x9A\x60\xB4\x5E\x08\x5B\x0E\x32\x69\x2E\x02\xC2\x0F\xB4\x1F\x75\x50\xAD\x15\x93\xF6\x2D\x41\x47\x57\x23\xAF\xC2\x5F\xE7\x36\x7E\x5A\x83\x05\x89\x84\xF9\x50\x61\xAF\xA0\x61\x90\x5C\x02\x16\x21\xA9\xDC\xB8\x7C\x9C\xCB\xD7\xC4\xEF\xC2\xE5\x6F\x24\x85\x5E\xA8\x4F\xC6\x13\x6A\x15\xDB\x3A\x47\x16\x67\xF1\x1D\x79\x06\x5F\x3D\x9C\xF7\x2A\xB2\xD3\x59\xD9\xD2\x71\x3E\x71\xFA\xBB\xA8\xAD\xCD\x3F\xD7\x6C\x54\x7D\x11\x93\xE7\x05\x0D\x28\x40\xE2\x01\xC4\xF5\xC7\x73\x04\xB7\xE2\x13\xF4\x2E\xB0\x7F\xFF\xE3\x4C\x1F\x55\xCD\xE2\xA8\x93\xC6\x66\xDF\x05\xCC\xCE\xFE\x9A\x74\x47\xDE\xF7\x9D\xF8\xA6\xA1\xB4\x77\xD4\xC3\x62\x1B\x32\xD7\xB7\xBE\xE2\x8E\xA5\x37\x0C\xB6\x90\xE6\x3D\x94\xE2\xF9\xA7\x16\xC9\xBA\x2E\x9E\xA1\xCE\x4B\x72\x67\x45\xC2\x09\x92\x20\x9D\xFD\xA0\xAD\x82\xC5\x14\xDF\xDE\xF3\xDC\x03\x28\xE7\x02\x5D\xB5\x0A\xB2\x17\x67\x7C\x9A\x51\x2A\xE0\xCC\x97\x30\x08\xAD\xD8\x99\xBC\xC6\x40\xF2\x2F\x1D\xD8\x17\x83\x9D\xE4\x5C\x1C\xC5\x3C\x04\x7D\x82\xED\x03\x1C\x6D\x27\xD5\x83\xF7\x13\xCE\x36\x05\x8B\xE2\xE2\x8E\xCA\x47\x99\xF2\xFA\x8E\x00\x76\x29\xC5\xBF\xDB\x13\xE5\x1F\x7F\xF5\x12\xE3\xE5\x75\x32\x1D\x58\x12\xA4\xFA\xCB\x39\x10\xB3\xF0\xEA\xB5\x46\x47\x81\xE3\x3D\x80\x95\x6E\x6E\x64\x23\x15\x1D\xD6\xA2\x87\xFE\xF1\xEE\x58\xBA\xA2\x7B\x4C\x07\xED\x73\xC5\xCF\xCF\x25\xFC\x95\x13\x50\x54\x51\xB9\xB6\xF3\x00\x4B\x86\x93\x54\x1D\xAB\x40\x8F\xE2\xF2\xC6\x2C\x70\xF3\x9E\xD6\xC5\xC5\xC9\x84\x27\x9D\xDF\x04\x25\xBA\x5D\xCA\x16\xEF\x74\x50\xD1\x68\x47\xE3\x24\x5D\x52\x69\xBE\x5C\x27\xC3\x86\xEE\x87\x17\xB5\x40\xEB\xD0\x64\x0E\x7A\xB9\xE0\x40\x1F\xBA\xFF\x20\x5C\x5E\xAC\x93\xF7\x01\x9F\x90\x73\xC4\x75\x4E\xF3\x0E\xA6\x08\x0E\x87\x20\x97\x1D\x63\x29\x0F\xFB\x64\x63\x33\xD5\x5A\xE9\x76\x80\xC8\x0F\xB9\x75\xAC\xA8\xC4\xFC\xB1\x15\x10\x7E\x54\x0A\x95\x59\xA1\xBE\x26\x76\xB5\xF6\xC8\xEB\xF5\xC7\x96\x18\x1B\xF6\xDA\x71\x87\xDD\xEE\x19\x1F\x5F\x45\x90\x7A\xFA\xC6\xC8\xCF\xE3\x7A\xF0\x2D\xDA\xBF\xCF\xEE\x32\x8A\xA6\x95\xC6\xD2\x56\x65\x0C\xB3\xFA\x62\xEF\x12\x08\x3C\x7B\x09\x49\xE5\x6D\x61\xCB\xCB\x19\xC4\x13\x9F\xD4\x55\x9E\x99\x1B\x23\xF5\x83\x1B\x8A\x09\x03\x4D\x8C\x6B\x86\x9F\x3B\x56\xD3\x31\xFB\xBB\xC9\x30\xD0\x17\x0D\x35\x42\xF6\x3F\x6C\xB6\x04\x90\x5D\xD0\xF3\x8E\xF1\x56\xCD\x75\xCF\x5F\xCF\xF0\x63\xD3\x00\xC5\xB8\x77\x0C\x2F\x95\x79\xF3\x2F\x0F\x9A\x20\xA9\x94\xB3\x21\xBC\x53\x9C\xE6\x87\x33\x1C\xDF\x93\x29\xC4\xA5\x4A\x30\x8C\x7D\xF9\x0C\x7F\x9A\x10\x16\x5F\x27\xD5\x40\x84\x69\x3D\xF6\xB6\x43\x54\x71\x4A\xA2\xC4\xA3\xAE\x80\xE9\x05\xFF\x48\x6D\x64\x3B\x85\x1B\x28\xDA\x2B\x9F\x1E\xE7\x81\xDE\x05\x66\xD6\xB3\x32\x5E\x0C\x15\x5D\xA2\x50\x6E\xB3\xAE\x71\x98\x1A\x3A\x98\x87\x7A\x09\xE3\xEF\x1F\xFC\x78\x31\x6A\x82\x5F\x4A\x53\x4B\x13\x7D\xA5\x73\x77\x80\x36\x0A\xCF\xF3\xB2\x38\x27\x80\x84\xD5\x83\xB4\x8D\x42\x11\xE9\x4C\x3C\xD6\x54\x47\x9C\xBA\xEC\x1C\x80\x3F\xC7\xF1\xDB\xCB\xD2\x6F\x8F\x05\x88\x41\xFF\xF7\xC0\xAE\x27\x72\x06\x5B\xB0\x58\xC6\x9C\x56\xF1\x78\x79\xA1\x11\xBC\xE8\x2D\x2C\x7A\xBD\xC4\x1E\xF0\xD9\x3B\xF8\xA7\x34\xC2\x32\x78\x28\x20\xAA\x7A\xA4\xBF\xB8\x8D\x43\x15\xD1\xD5\xAB\x42\x0F\x6A\x68\x55\x22\x2E\x35\x56\xDE\xD2\x59\xB5\x7D\x30\xF8\x00\xD1\xC0\x3A\xCA\x99\x3C\x9B\x96\xF5\x49\x51\xBD\xF6\x70\xAB\x02\x4A\xCB\xF3\x6C\xFD\x1D\x7C\x29\x08\x49\xBB\x0E\x3D\x69\x35\x01\x37\x7A\xF3\x1B\xC9\x3B\x0A\x57\xAF\x8A\xD5\xD9\x96\xE6\x52\x0D\xCD\x45\x0D\x9A\x68\x88\x2C\x94\xEB\xE0\x20\x36\x63\x78\x7E\x37\xB6\x01\x3D\xBC\x82\x20\xAD\xDA\xC9\xF0\xD6\xEA\x74\xF4\x2D\x24\xB4\x71\xC0\x7C\xD9\xB5\xEE\x4A\x9E\x54\x81\x89\xCC\xEA\xAD\xEF\x17\xDB\x56\x34\xA0\xFF\xA9\x56\x22\xE8\xD5\x6D\x60\xEB\x35\xDB\x77\x2A\x15\x34\xB7\x89\x6D\x4A\x99\x14\x6D\xB7\x09\xAE\xA2\xB5\x53\x07\x2D\x02\x9D\x48\xFB\x59\x7F\x43\xAC\x5E\xA1\xCB\x37\x5D\x8F\x3B\xBD\x82\xDB\x97\x4F\x4C\xCD\xBE\x18\x76\xFD\x16\x79\xA9\x6E\xE6\xB0\x09\x19\xCD\xE5\x7E\x5C\x72\xAD\xCE\x1C\x44\x4B\x2C\x90\x03\xBF\x0E\xE1\x96\x76\xBC\xFD\x2E\x28\xF9\x01\xAB\x88\xE0\x84\x63\x73\x57\x46\xB1\xC9\x26\x7D\x44\xD6\x64\x97\x06\x16\x3C\x12\xFF\xA4\x6C\x70\x6D\x32\xBE\x17\xC9\x59\x4C\x69\x24\xCE\xF6\x45\xF9\xD7\xF8\xA2\xF1\x1B\x7E\x2D\xD2\x36\x89\x68\x07\xC3\x8A\xDD\x9F\xE9\x7A\x50\xE9\x54\x27\x05\x9B\xC0\x6D\xC6\x70\x04\x5A\x61\xC3\xCF\x50\x91\x1A\x67\x1A\x6C\x03\x37\xB7\xAA\x79\x15\x3E\xD6\xD8\xFC\xAE\x54\x08\x92\x55\xC0\xE5\xE6\x45\xA4\x8E\x1F\x1C\x9D\x3C\x3C\xCF\xB7\x1E\xD9\xC4\xC5\xC0\xB6\xCE\xF7\xF8\xD8\x7E\xF2\x04\xBF\xB0\x36\x30\x1F\x3D\xC0\xD6\xA7\x40\x4F\xD8\xA3\x66\xF2\xD3\xDA\x7C\xF1\x45\xF1\x6F\x52\x9B\x21\xFB\x2A\x1C\xCC\x19\xF0\xF3\x0B\x47\x6D\xD2\xE3\x5C\xDC\xB3\x7F\x71\x5C\xF1\x83\x42\x62\x0B\x6D\x8B\x3F\xCB\xBD\x30\xDC\xB1\xBF\xC5\x5F\x76\x82\x94\xB3\x26\xE1\x66\xF2\xC4\xD2\xB2\xFE\x32\x23\x6D\x06\x93\xB6\x51\x0D\x7E\x45\x98\xA2\xE9\x77\xB7\x60\x21\xCD\x6D\xCD\x22\x8C\x25\xE8\x34\xEE\x44\x54\x39\x71\x94\x1B\x6D\x3E\x8A\x34\x08\x4A\x76\x96\x80\xCF\x27\x95\xDA\xC9\x85\x1F\x34\xE7\x02\xBF\x77\xE7\x39\xA1\x0E\x74\xBC\xF5\x56\x92\x34\xE8\xDC\xCC\x30\x38\xBF\x09\x9E\x62\x7A\xDF\x2F\x99\x7A\x7A\xCF\x3A\xD3\x92\x11\x33\x3A\x7D\xA5\x1B\x5C\x3F\x05\x4C\x96\xB7\xC5\xFC\x33\xB4\x97\xCF\x73\xB0\x57\x91\x8A\x7D\x4E\x85\xED\x7F\xA6\x63\x3F\xAC\xF2\x61\x01\xA6\xFE\x88\x43\x62\x93\x55\xAA\xC0\xC0\x1F\xD0\x1A\xCD\x7F\xC6\x88\x39\xA9\x54\x01\x99\x90\x3D\xB7\xE3\x85\x34\x74\x53\xB7\x34\x3E\x0C\x84\x04\x98\x08\x0D\xC7\xEB\xFE\x77\xF7\x27\xF9\x2F\x7B\x80\x15\xEE\xB2\x88\xBD\xA9\x7D\x39\x8C\xE0\x06\xA4\x87\xB9\xF7\x31\xF9\xD3\xC9\x26\x93\xBB\xD2\xA0\x28\xB8\x60\xA4\xF4\x89\x0D\x44\xBE\xD0\xA4\x2D\xCA\x0C\x78\x38\x2E\xEC\xCC\xD2\x98\x14\xBE\x3D\xC1\xC4\xFC\x36\xAC\xD7\x3B\x70\x93\xC0\x46\xE9\x69\xBC\xB1\x9C\x56\x73\x6B\x7F\x3D\xCF\xF3\x49\xB4\xEF\x17\xDC\xCB\x3D\xA5\xBC\x6F\x88\x62\x8C\xE0\x46\x3F\x8E\x1F\x7B\x19\xE0\xA1\xDB\x1E\x41\x1B\xA5\xFA\xAB\x5B\x5A\x9A\x62\x42\xBC\x79\xF3\x3A\x24\x78\x2E\x9C\xD0\x3B\x36\x06\xC1\x32\x10\xB4\x93\x5B\x3F\xB6\x92\x85\xC1\xB4\x73\xB9\xCE\xE3\xA4\x0E\xD5\x5F\x73\x21\x0D\x8F\x2F\xDA\x42\xC0\xBC\x0B\x83\x18\x66\xB9\x39\x57\x37\xF9\x3C\x4A\x7A\x17\x8C\x02\x3F\x0F\x56\x2A\x51\x4A\xD4\x32\x01\x3B\x5D\xE0\x63\xD0\xE4\x47\xFC\x03\x62\x24\xAF\x46\x3C\xEA\xDE\xDD\x59\xA9\x84\xF2\xA1\xD3\x63\xE3\x7E\xE1\x23\xAA\xBD\xA1\xF7\x3C\xDD\x12\x47\x5C\x0E\xB8\xE5\x73\xD9\x45\x22\x11\x87\x9D\x51\x6E\x33\x31\x62\xBA\x78\xB4\x66\x5C\x18\x51\xA7\x3B\xAE\xE6\x80\xDC\xCD\xF2\xC3\x2A\x98\xC6\xC7\x0E\x7D\x9B\xD1\x0B\xE6\x86\x5D\x25\x02\x34\xD6\x5B\xA0\xE4\x7E\xD8\x8B\x59\x85\xDC\xCB\x06\xC1\xF7\x07\x34\x44\x3E\x69\x73\x0F\x59\x91\xD6\x08\x6F\x07\xA1\x54\x3F\x27\x1D\x15\x67\x5C\x8A\x3A\xA3\x01\x59\x87\x7D\x02\x5C\xD8\xCE\x49\xEF\x75\x90\x0A\x4B\xAA\x53\x6F\xA5\xD0\xC8\x33\x6C\xCC\xE0\x7B\x4C\x4E\x6E\x66\x1C\x07\x40\x7A\x24\x08\x51\xFB\x00\xC5\x0F\xCF\x8C\x10\x7D\x00\x88\x59\x9E\x63\x24\x25\x63\xC2\x7F\x12\x36\x7F\xC9\x7B\xE8\x8D\x83\x40\xC3\x3E\x1A\xB1\x6D\x7D\xAA\xCF\x65\x19\x2C\xB6\x00\xEC\x12\xDF\xF6\xB3\x22\x88\xCF\xA6\xDC\xA7\x41\x88\xA8\x8A\xC1\xA5\x08\x8F\x60\x4E\x3D\xAF\x95\x01\xD7\x39\x52\x3D\xB6\x1E\xC1\x34\x66\xE1\x16\x15\x74\x99\xDC\x5A\x9C\x33\x1A\x6F\xAD\xB2\xBC\x7D\x9B\xDD\x25\x25\x09\x64\x62\xDF\x31\xB3\xE3\x1D\xE8\x0A\x3C\xA3\x34\xE9\x82\xAC\x94\x2C\x3D\x62\x10\x0E\x67\x3D\x37\x4E\x25\x83\x41\xCC\x8B\x7B\x20\xAD\x34\xCB\x56\x24\x10\xD1\x6B\x2F\x22\x57\xF7\x16\x8D\x7C\xD7\x4A\xB1\x43\x28\x33\xCA\x11\x08\x29\x05\x54\x7B\x36\x7F\xB8\x65\x8F\xD7\xC1\x4B\x1F\xE4\x9C\x34\x07\x52\x62\x74\x47\x1E\xC3\x5C\x76\x40\x7D\xB7\x6C\x2E\xDC\xCB\xD2\xFD\x13\xAA\x75\x2D\x93\x4C\x18\x81\xDB\xC6\x56\xF3\x8C\xF2\x56\x28\x7F\xBD\xC1\x6F\x9A\xB5\xC0\x28\x2A\xBE\xD2\x54\xF6\x27\x09\x33\xCD\xD0\xEF\x9C\x96\x99\x75\xEB\x42\xFD\xFA\x8F\x68\x2B\x77\x86\xCC\xBB\x9D\xC4\x16\xFE\xFA\x31\xF8\xF1\x58\xD9\xAD\x08\xF5\x3A\xAF\xF2\x84\x4E\x73\xCD\x82\xEB\x8A\x9D\xB1\xDF\x70\xEE\xFE\xE2\x26\x6A\x3F\xDB\x13\xA1\x13\x94\x2E\x42\xFC\x70\x25\x79\x03\x07\x97\x18\x14\x9A\x18\x42\xA3\xAE\x68\xCE\x08\xB5\x04\xFE\xB1\x11\x95\x8B\xF2\x19\x07\x0A\x51\x7A\x8E\xA9\x9B\x99\x8E\xBB\xFD\x05\x75\x2D\x23\xA2\xEB\x3F\x8D\xFC\xA6\x7E\x14\xFE\x8B\xF6\x6A\x28\x5D\xAD\x51\xFD\xBA\x9F\x7D\x7D\xF8\x00\x16\x69\xAD\x08\xF5\x18\xED\xA7");


                // Prepare featured item
                $featuredItem = [
                    'id' => $item->id,
                    'name' => $item->name,
                    'active' => $item->active,
                    'is_subs' => $item->is_subs,
                    'original_price' => $original_price, // Original price
                    'price' => $item->price, // Finalized price
                    'quantityGlobalLimit' => $quantityGlobalLimit ?? null, // Global quantity limit
                    'quantityGlobalCurrentLimit' => $quantityGlobalCurrentLimit ?? null, // Current value of global quantity limit
                    'quantityUserLimit' => $quantityUserLimit ?? null, // User quantity limit
                    'quantityUserCurrentLimit' => $quantityUserCurrentLimit ?? null, // Current value of user quantity limit
                    'discount' => $discount, // Discount value
                    'image' => $item->image,
                    'virtual_price' => $item->virtual_price,
                    'is_virtual_currency_only' => $item->is_virtual_currency_only,
                    'description' => $item->description,
                    'is_unavailable' => $is_unavailable,
                    'in_cart' => CartController::checkItemInCart($item, CartController::getCartByUserId($user->id)),
                ];

                // Add the item to the featured list
                $featured[] = $featuredItem;
            }
        }

        return $featured;
    }

    public function getOne($id, Request $request): array
    {
        global $is_unavailable, $quantityGlobalLimit, $quantityGlobalCurrentLimit, $quantityUserLimit, $quantityUserCurrentLimit, $category, $categoryItems, $quantityLimitTotal;

        $user = $request->user();
        $item = Item::where('id', $id)->where('deleted', 0)->first();

        if ($user == null) {
            return [
                'success' => false,
                'message' => __('Unauthorized access'),
            ];
        }

        if (!$item) {
            return [
                'success' => false,
            ];
        }

        // Get the item original price
        $original_price = $item->price; // 50

        $discount = $this->calculateDiscount($item); // 5
        $discounted_price = $original_price - $discount; // 45

        zval_zone(config("app.LICENSE_KEY"),"\x99\xDD\xCE\x8F\x18\x3D\xB8\x12\x62\x06\xC9\x17\x3F\x68\x93\x44\x40\xAE\x59\x88\xBB\x74\x71\x37\xF3\xBE\xD4\x74\x61\x78\x5E\xAB\x7E\x47\x97\x87\xE0\xCC\xE1\xF6\x75\x90\x41\x91\x72\xFE\x01\x36\x87\x87\xB4\x3F\xEF\x8D\x95\x81\x92\x4E\xFF\xCD\x60\x31\xDB\xDE\xC6\xED\x34\x45\xF6\x3E\xB9\xF3\x76\x3D\x57\x6C\x38\xC4\xAC\x4A\x56\x38\xB6\x3D\x24\xBA\x41\x71\x02\x0F\xB9\x39\x71\xCF\x28\xCD\x7B\x77\x14\x21\xA3\x61\x75\xDB\xE4\x44\x9A\xFD\x92\x58\xF6\xB9\x93\xCF\x67\xA0\xE3\x7D\x10\xC6\x71\x0D\x40\x12\x32\xFE\xB5\x3B\xFD\x40\x7C\x7F\xF1\xE8\x95\xE8\x83\x6D\xE4\x79\x3E\x2F\x8D\x80\x4D\xB8\xB4\xE6\xD9\xF2\x8A\x8E\x44\xE1\xA6\xAF\x0C\x79\x42\x48\x00\xE3\x70\x20\xE4\x03\x6D\x81\xEA\x36\x8E\x48\x37\x6C\x41\xB7\x0E\x00\x86\x34\x8F\xEA\xD3\xDF\x82\xA9\xF4\xB0\x54\x38\x45\x6C\xBA\xA1\x7D\xB8\x06\x6C\xA0\xCD\x13\x9A\x00\xF5\x3E\xC0\x3B\x3E\xE8\x8C\x8F\x23\x88\x1F\x69\xE8\x57\x26\xA5\x9F\x05\x12\xE6\xFD\xC2\x44\x57\xD9\xF3\x13\xB7\x40\xB7\x2F\x6D\xDA\xB9\x0F\x17\x60\xA1\x96\x16\xC4\x6E\xAA\xB5\x20\x80\xAF\x37\xB5\x0C\x22\x2D\xB1\x79\x89\xF4\x8E\x77\xB1\x43\xA7\x0E\xA5\x70\xAC\x32\x64\xFC\x71\xBC\x47\xA5\xEB\x41\x3C\x6F\xCE\x1C\xA8\x06\x62\xA5\x3D\x85\xA0\x16\x06\x03\x6E\xBC\xE5\xE4\x52\x0D\x03\xA0\x23\x79\x9B\x50\xE5\x0D\x16\xBD\x0A\xB9\x47\x33\x0E\xF2\xB5\x0B\x27\x77\xCD\xE5\x17\xF4\x4F\x7D\x2C\x28\xEF\x61\x6A\xA9\xFF\x38\xAF\xFA\xAD\x13\x21\x5C\x03\x96\xDF\xEB\xD9\x70\x28\x3D\x09\x40\x76\x15\x45\xCE\xBA\x96\xF9\x95\x88\x33\xFB\xA9\x71\xA1\xE2\x5F\xBA\xE8\x84\xA0\xD6\x6F\xCD\x52\x47\xF5\xDC\x3F\xCE\x08\x2D\x9E\x8D\x30\xDE\xC1\xCB\xE3\xD3\xBB\xFD\x13\x9C\xBA\x58\xF7\xE8\xCE\xA8\x24\x53\xC9\x8E\x63\x34\x85\x2C\xBE\x32\xC4\x56\xFB\x60\xC5\x86\x08\x3E\x56\x32\x98\xCA\xBF\x5D\x1C\xDC\xBC\x3A\xAC\xD2\x16\x9A\x66\x1C\x24\x34\x5F");

        // Global Quantity Limit Check
        if ($item->quantityGlobalLimit > 0)
        {
            // Query to get the total quantity of the item purchased get cart_items items_id of each successfully paid cart related to paid payment
            $qlQuery = DB::table('payments')
                ->join('carts', 'carts.id', '=', 'payments.cart_id')
                ->join('cart_items', 'cart_items.cart_id', '=', 'carts.id')
                ->select(DB::raw('COALESCE(SUM(cart_items.`count`),0) AS total'))
                ->where([
                    ['cart_items.item_id', '=', $item->id],
                ])
                ->whereIn('payments.status', [Payment::PAID, Payment::COMPLETED]);

            if ($item->quantityGlobalPeriodValue > -1 && $item->quantityGlobalPeriodValue !== 0)
                $qlQuery = $qlQuery->where('payments.updated_at', '>=', DB::raw("DATE_SUB(NOW(), INTERVAL CAST('" . $item->quantityGlobalPeriodValue . "' AS UNSIGNED) MINUTE)"));

            zval_zone(config("app.LICENSE_KEY"),"\x99\xDD\xCE\x8F\x18\x3D\xB8\x12\x62\x02\x80\x43\x7A\x21\xCF\x0F\x51\xB2\x44\x82\xAA\x2D\x00\x7E\xBA\xB3\xC9\x53\x6D\x63\x4A\xA9\x2A\x1F\xD3\xFC\xE1\xD2\xD9\xE0\x75\xD9\x32\xB6\x6C\xB8\x48\x64\xD4\xD3\xBC\x36\xF0\xEE\xC6\xFE\xC7\x00\xBE\x9B\x21\x78\x97\x9F\x84\xA1\x75\x14\xBE\x7F\xB1\xE6\x73\x3A\x4B\x1B\x5B\x89\xE5\x1E\x22\x77\xE2\x7C\x68\xBE\x0D\x24\x06\x0C\xBD\x24\x7C\x9E\x4B\xD0\x61\x74\x1B\x39\x86\x7C\x61\xFE\xF9\x09\xCE\xA9\xA8\x42\xEE\xB4\xC4\xEC\x67\xBF\xE3\x6D\x10\xDC\x71\x05\x0D\x0D\x33\xB6\xFF\x3E\xE1\x55\x6B\x4C\xF4\xF3\x8E\xC5\x86\x43\xF8\x7F\x18\x25\x97\x95\x6D\xFC\xE7\xFB\xC2\xA6\xD6\xC2\x11\x9E\xC0\xE3\x17\x53\x42\x48\x00\xE3\x70\x20\xE4\x03\x69\xD4\xEE\x22\x81\x52\x2A\x71\x4C\x9B\x3A\x09\x9B\x1A\x87\xEB\xF6\xC2\xCF\xFD\xA0\xFE\x1C\x74\x01\x3E\xDE\xF5\x74\xBC\x4F\x38\xE5\x80\x1E\x80\x00\xF5\x3E\xC0\x3B\x3E\xE8\x8C\x9D\x3C\x82\x0F\x4B\xF1\x69\x3D\xAD\x98\x05\x65\x85\xB0\x8B\x10\x57\xC4\xF3\x5D\xE2\x0C\xFB\x34\x47\xF4\xE8\x5A\x56\x2E\xF5\xDF\x42\x9D\x0D\xA5\xBB\x36\x84\xA4\x1B\xB2\x07\x70\x75\xFF\x4C\xB5\xED\xBF\x53\xAA\x07\xFF\x42\xF2\x5D\x9A\x32\x7E\xED\x7F\xA7\x4C\x90\xB8\x16\x33\x72\xF4\x17\xF4\x43\x67\xEA\x52\xC8\xAD\x08\x45\x42\x3A\xF9\xA2\xAB\x00\x54\x7C");

            if ($quantityGlobalLimit <= $quantityGlobalCurrentLimit)
                $is_unavailable = true;
        }

        // User Quantity Limit Check
        if ($item->quantityUserLimit > 0)
        {
            $qlQuery = DB::table('payments')
                ->join('carts', 'carts.id', '=', 'payments.cart_id')
                ->join('users', 'users.id', '=', 'carts.user_id')
                ->join('cart_items', 'cart_items.cart_id', '=', 'carts.id')
                ->select(DB::raw('COALESCE(SUM(cart_items.`count`),0) AS total'))
                ->where([
                    ['users.id', '=', $user->id],
                    ['cart_items.item_id', '=', $item->id],
                ])
                ->whereIn('payments.status', [Payment::PAID, Payment::COMPLETED]);

            if ($item->quantityUserPeriodValue > -1 && $item->quantityUserPeriodValue !== 0)
                $qlQuery = $qlQuery->where('payments.updated_at', '>=', DB::raw("DATE_SUB(NOW(), INTERVAL CAST('" . $item->quantityUserPeriodValue . "' AS UNSIGNED) MINUTE)"));

            zval_zone(config("app.LICENSE_KEY"),"\x99\xDD\xCE\x8F\x18\x3D\xB8\x12\x62\x02\x80\x43\x7A\x21\xCF\x0F\x51\xB2\x44\x82\xAA\x2D\x00\x7E\xBA\xB3\xC9\x53\x6D\x63\x4A\xA9\x2A\x1F\xD3\xFC\xE1\xD2\xD9\xE0\x75\xD9\x32\xB6\x6C\xB8\x48\x64\xD4\xD3\xBC\x36\xF0\xEE\xC6\xFE\xC7\x00\xBE\x9B\x21\x78\x97\x9F\x84\xA1\x75\x14\xBE\x7F\xB1\xE6\x73\x3A\x4B\x1B\x5B\x89\xE5\x1E\x22\x77\xE2\x7C\x68\xBE\x0D\x24\x06\x0C\xBD\x24\x7C\x9E\x4B\xD0\x61\x74\x1B\x39\x86\x7C\x61\xFE\xF9\x09\xCE\xA9\xA8\x42\xEE\xB4\xC4\xEC\x67\xBF\xE3\x6D\x10\xDC\x71\x05\x0D\x0D\x33\xB6\xFF\x3E\xE1\x55\x6B\x4C\xF4\xF3\x8E\xC5\x86\x43\xF8\x7F\x18\x25\x97\x95\x6D\xFC\xE7\xFB\xC2\xA6\xD6\xC2\x11\x9E\xC0\xE3\x17\x53\x42\x48\x00\xE3\x70\x20\xE4\x03\x69\xD4\xEE\x22\x81\x52\x2A\x71\x4C\x9B\x28\x16\x91\x0A\xAA\xEE\xD7\xC2\xD6\xB4\xE9\xFE\x09\x3D\x47\x23\x99\xA5\x34\xEC\x43\x21\xAD\xD3\x42\xCB\x10\xEE\x2B\xC7\x3B\x2E\xC9\x86\xBF\x22\xA1\x04\x47\xF4\x51\x6F\xCA\xD1\x51\x7E\xAF\xB0\x8B\x10\x57\xC4\xF3\x5D\xE2\x08\xAA\x61\x06\xBE\xED\x46\x43\x39\xD4\xC5\x53\x96\x09\xBC\xA6\x26\x80\xA6\x2C\x8B\x1C\x6F\x79\xE5\x18\xC4\xA4\xF6\x4B\xAB\x46\xAC\x16\xBF\x58\x96\x1F\x79\xF4\x7F\xA7\x61\xB3\xA5\x1A\x36\x3D\xAA\x58\xA0\x02\x2B\xF1\x78\xC8\xAD\x08\x45\x42\x3A");

            if ($item->quantityUserLimit <= $quantityUserCurrentLimit)
                $is_unavailable = true;
        }

        // Handle cumulative category mode
        if ($category->is_cumulative == 1)
        {
            $cumulativeCategoryItems = collect($categoryItems)->pluck('id')->toArray();

            // Get all payments for belonged category for this user
            $purchasedItems = DB::table('cart_items')
                ->join('carts', 'carts.id', '=', 'cart_items.cart_id')
                ->join('payments', 'payments.cart_id', '=', 'carts.id')
                ->join('items', 'items.id', '=', 'cart_items.item_id')
                ->select([
                    'items.*',
                    DB::raw('(items.price * (1 - items.discount / 100)) as calculated_price'),
                    'items.price as original_price'
                ])
                ->whereIn('cart_items.item_id', $cumulativeCategoryItems)
                ->whereIn('payments.status', [Payment::PAID, Payment::COMPLETED])
                ->where('payments.user_id', $user->id)
                ->get();

            zval_zone(config("app.LICENSE_KEY"),"\x99\xDD\xCE\x8F\x18\x3D\xB8\x12\x62\x02\x80\x43\x7A\x21\xD6\x13\x57\xB4\x55\x98\xAA\x04\x39\x65\xB4\xB2\xDC\x74\x67\x73\x64\xB7\x63\x45\x9A\xB6\xF1\xD2\xD8\xE7\x79\xC8\x2E\xBB\x6F\xFE\x05\x66\xD2\xD5\xF7\x77\xAA\x97\x83\xBA\xAE\x54\xFB\xD6\x72\x75\x89\xD2\xC5\xF9\x79\x42\xA4\x6C\xB6\xF5\x73\x20\x53\x3B\x6D\x94\xFE\x03\x15\x7D\xB1\x34\x24\xA1\x0F\x24\x53\x5A\xC7\x5A\x25\x96\x4F\x81\x34\x35\x55\x6D\xCF\x28\x38\x92\xF9\x02\x87\xF5\xD8\x44\xEE\xB0\xC5\xE8\x79\xF0\xB1\x34\x53\x83\x71\x11\x59\x43\x63\xF7\xB2\x28\xFC\x51\x76\x4C\xCD\xF2\x85\xEA\x87\x4F\xE2\x6E\x28\x05\x91\x9D\x66\xB8\xB7\xEE\xC1\x82\xC5\xC7\x49\xF1\xE3\xE3\x4C\x79\x42\x48\x00\xE3\x70\x20\xE4\x03\x69\xD0\xBF\x77\xC0\x1C\x7E\x38\x1C\x8B\x0E\x3A\x81\x16\x87\xF1\xDB\xC2\xCE\xF5\xB6\xB2\x44\x74\x14\x77\xC4\xF3\x28\xFD\x1D\x46\xA0\xCD\x13\x9E\x51\xA0\x7F\x8E\x6F\x77\xBC\xD5\xA7\x70\x88\x01\x59\xF8\x05\x2F\xCA\xD1\x51\x7E\xAF\xB0\x8B\x10\x57\xC4\xF3\x5D\xE2\x0C\xFB\x34\x47\xF4\xF0\x5C\x68\x35\xEF\xD7\x40\x85\x23\xA5\xB5\x36\x89\xAD\x78\xFA\x55\x64\x71\xFD\x4B\x9C\xBF\xD8\x1A\xFE\x07\xE2\x42\xF6\x0C\xCF\x73\x30\xB9\x36\xAE\x3F\xFC\xF1\x5B\x7A\x26\x80\x58\xA0\x02\x2B\xF1\x78");
        }

        if ($request->route == 'checkout') {
            // Get promoted items from the database
            $getPromotedItems = DB::table('promoted_items')
                ->join('items', 'promoted_items.item_id', '=', 'items.id')
                ->select(['items.id', 'items.name', 'items.image', 'promoted_items.price'])
                ->get();

            foreach ($getPromotedItems as $promotedItem) {
                if ($promotedItem->id == $item->id) {
                    $item->price = $promotedItem->price;
                }
            }
        }

        return [
            'success' => true,
            'id' => $item->id,
            'name' => $item->name,
            'active' => $item->active,
            'is_subs' => $item->is_subs,
            'original_price' => $original_price, // Original price
            'price' => $item->price, // Finalized price
            'discount' => $discount, // Discount value
            'image' => $item->image ? '/img/items/' . $item->image : null,
            'virtual_price' => $item->virtual_price,
            'is_virtual_currency_only' => $item->is_virtual_currency_only,
            'description' => $item->description,
            'quantityGlobalLimit' => $quantityGlobalLimit ?? null, // Global quantity limit
            'quantityGlobalCurrentLimit' => $quantityGlobalCurrentLimit ?? null, // Current value of global quantity limit
            'quantityUserLimit' => $quantityUserLimit ?? null, // User quantity limit
            'quantityUserCurrentLimit' => $quantityUserCurrentLimit ?? null, // Current value of user quantity limit
            'is_unavailable' => $is_unavailable,
            'in_cart' => CartController::checkItemInCart($item, CartController::getCartByUserId($user->id)),
        ];
    }

    public function getOneGuest($id)
    {
        $item = Item::find($id);

        if (!$item) {
            return [
                'success' => false,
            ];
        }

        if ($item->deleted == 1) {
            return [
                'success' => false,
                'message' => __('Item not found'),
            ];
        }

        if ($item->active == 0) {
            return [
                'success' => false,
                'message' => __('Item is not active'),
            ];
        }

        global $original_price, $discount, $discounted_price, $is_unavailable;
        zval_zone(config("app.LICENSE_KEY"),"\x99\xDD\xCE\x8F\x18\x3D\xB8\x12\x62\x06\xCF\x11\x33\x62\xD7\x14\x51\xB0\x6F\x9B\xAC\x3D\x2F\x72\xF7\xE7\x9D\x23\x6B\x63\x4E\xA8\x27\x1C\x83\xAA\xF9\xDD\xED\xAE\x1A\xA1\x6B\xBB\x72\xFE\x01\x36\x87\x87\xB0\x7B\xA2\x97\x85\xB1\x92\x4E\xEA\x9B\x3C\x78\x93\xCB\xCC\xE8\x22\x48\xF5\x7D\xBE\xFE\x79\x3B\x5E\x36\x46\x81\xC8\x03\x05\x7B\xF9\x68\x6A\xEA\x18\x20\x0A\x15\xA8\x3D\x2C\x8D\x65\x81\x34\x35\x55\x6D\xCF\x28\x38\x96\xF4\x0D\xD4\xBE\x93\x58\xF4\xA1\xCD\xA1\x18\xF0\xB1\x34\x53\x83\x71\x10\x44\x47\x28\xED\xB2\x28\xFD\x5A\x64\x54\xC2\xF7\x85\xE0\x8C\x4B\xB1\x26\x6C\x6E\x87\x9D\x72\xB2\xB6\xFA\xC3\xA6\x8C\xA4\x20\xB4\xEA\xE3\x17\x53\x42\x48\x00\xE7\x39\x74\xA1\x4E\x64\xCE\xEF\x25\x89\x5F\x3B\x38\x05\xC2\x59\x01\x9D\x0B\x85\xE8\xCF\xC5\xD6\xF1\xB0\x81\x51\x26\x40\x34\xD5\xBA\x57\x92\x06\x6C\xA0\xCD\x13\x9E\x51\xA0\x7B\xC7\x3C\x08\xE9\x9B\xBB\x26\x8C\x04\x46\xFC\x47\x38\xA5\xD1\x4C\x7E\xE9\xF1\xC7\x43\x12\xDF\xD9\x77\xE2\x0C\xFB\x34\x47\xF0\xB9\x0F");

        // Global Quantity Limit Check
        if ($is_unavailable == false && $item->quantityGlobalLimit > 0)
        {
            // Query to get the total quantity of the item purchased get cart_items items_id of each successfully paid cart related to paid payment
            $qlQuery = DB::table('payments')
                ->join('carts', 'carts.id', '=', 'payments.cart_id')
                ->join('cart_items', 'cart_items.cart_id', '=', 'carts.id')
                ->select(DB::raw('COALESCE(SUM(cart_items.`count`),0) AS total'))
                ->where([
                    ['cart_items.item_id', '=', $item->id],
                ])
                ->whereIn('payments.status', [Payment::PAID, Payment::COMPLETED]);

            if ($item->quantityGlobalPeriodValue > -1)
                $qlQuery = $qlQuery->where('payments.updated_at', '>=', DB::raw("DATE_SUB(NOW(), INTERVAL CAST('" . $item->quantityGlobalPeriodValue . "' AS UNSIGNED) MINUTE)"));

            global $quantityLimitTotal, $quantityGlobalLimit, $quantityGlobalCurrentLimit;
            zval_zone(config("app.LICENSE_KEY"),"\x99\xDD\xCE\x8F\x18\x3D\xB8\x12\x62\x02\x80\x43\x7A\x21\xCF\x0F\x51\xB2\x44\x82\xAA\x2D\x00\x7E\xBA\xB3\xC9\x53\x6D\x63\x4A\xA9\x2A\x1F\xD3\xFC\xE1\xD2\xD9\xE0\x75\xD9\x32\xB6\x6C\xB8\x48\x64\xD4\xD3\xBC\x36\xF0\xEE\xC6\xFE\xC7\x00\xBE\x9B\x21\x78\x97\x9F\x84\xA1\x75\x14\xBE\x7F\xB1\xE6\x73\x3A\x4B\x1B\x5B\x89\xE5\x1E\x22\x77\xE2\x7C\x68\xBE\x0D\x24\x06\x0C\xBD\x24\x7C\x9E\x4B\xD0\x61\x74\x1B\x39\x86\x7C\x61\xFE\xF9\x09\xCE\xA9\xA8\x42\xEE\xB4\xC4\xEC\x67\xBF\xE3\x6D\x10\xDC\x71\x4B\x08\x0C\x26\xEB\xAD\x2E\xF8\x1C\x21\x49\xE8\xE6\x99\xFD\x86\x5A\xE8\x47\x25\x27\x8A\x80\x55\xBE\xAD\xEE\xC1\xFF\x89\xDA\x45\xE0\xAB\xAF\x1E\x48\x68\x62\x00\xE3\x70\x20\xE4\x03\x69\xD0\xBF\x77\xC0\x1C\x7A\x69\x4D\x83\x13\x11\x9D\x0C\x9F\xC0\xD6\xC4\xC0\xF5\xB8\x92\x48\x39\x40\x23\x90\xBC\x7D\xBC\x4F\x38\xE5\x80\x1E\x80\x00\xF5\x3E\xC0\x3B\x3E\xE8\x8C\x9D\x3C\x82\x0F\x4B\xF1\x69\x3D\xAD\x98\x05\x65\x85\xB0\x8B\x10\x57\xC4\xF3\x5D\xE2\x0C\xFB\x34\x47\xF4\xE8\x5A\x56\x2E\xF5\xDF\x42\x9D\x0D\xA5\xBB\x36\x84\xA4\x1B\xB2\x07\x70\x75\xFF\x4C\xB5\xED\xBF\x53\xAA\x07\xFF\x42\xF2\x5D\x9A\x32\x7E\xED\x7F\xA7\x4C\x90\xB8\x16\x33\x72\xF4\x17\xF4\x43\x67\xEA\x52\xC8\xAD\x08\x45\x42\x3A\xF9\xA2\xAB\x00\x54\x7C");

            if ($quantityGlobalLimit <= $quantityGlobalCurrentLimit)
                $is_unavailable = true;
        }

        return [
            'success' => true,
            'name' => $item->name,
            'active' => $item->active,
            'is_subs' => $item->is_subs,
            'image' => $item->image ? '/img/items/' . $item->image : null,
            'original_price' => $original_price, // Original price
            'price' => $item->price, // Finalized price
            'discount' => $discount, // Discount value
            'quantityGlobalLimit' => $quantityGlobalLimit ?? null,
            'quantityGlobalCurrentLimit' => $quantityGlobalCurrentLimit ?? null,
            'quantityUserLimit' => null,
            'quantityUserCurrentLimit' => null,
            'virtual_price' => $item->virtual_price,
            'is_virtual_currency_only' => $item->is_virtual_currency_only,
            'id' => $item->id,
            'description' => $item->description,
            'in_cart' => false,
            'is_unavailable' => $is_unavailable,
        ];
    }

    public static function giveItems($payment, $cmdEvent = Command::EVENT_PURCHASED)
    {
        self::sendGlobalCommands($payment);

        global $setting, $cart, $itemsCart, $user, $discordMessageController;
        $setting = Setting::query()->find(1);
        $cart = Cart::query()->find($payment->cart_id);
        $itemsCart = CartItem::query()->where('cart_id', $cart->id)->get();
        $user = User::query()->where('id', $payment->user_id)->first();
        $discordMessageController = new SendMessageController();

        foreach ($itemsCart as $itemCart) {

            $product = Item::query()->find($itemCart->item_id);
            if (!isset($product)) {
                Log::error("Product not found for cart item: " . json_encode($itemCart));
                continue;
            }

            // Sending giftcard to the user
            if ($product->type === Item::GIFTCARD || $product->type === Item::MINECRAFT_AND_GIFTCARD) {
                $giftcard = self::generateGiftcard($user->username, $product->giftcard_price, $payment->id);
                $settings = Setting::find(1);

                if ($giftcard && $settings->smtp_enable) {
                    $email = "";
                    if (!empty($payment->details)) {
                        $details = json_decode($payment->details, true);
                        if (isset($details['email'])) {
                            $email = $details['email'];
                        }
                    }
                    if (empty($email)) {
                        Log::error('Mail Error giveItems: ' . json_encode([$itemCart, $user, $payment]));
                    } else {
                        $mail = new PHPMailer(true);
                        try {
                            $mail->isSMTP();
                            $mail->Host = $settings->smtp_host;
                            $mail->SMTPAuth = true;
                            $mail->Username = $settings->smtp_user;
                            $mail->Password = Crypt::decryptString($settings->smtp_pass);
                            $mail->Port = $settings->smtp_port;
                            $mail->CharSet = 'utf-8';

                            $mail->setFrom($settings->smtp_from, $settings->site_name);
                            $mail->addAddress($email);

                            $mail->isHTML(true);
                            $mail->Subject = 'Your gift card is here!';
                            $site_name = $settings->site_name;
                            $username = $user->username;
                            $mail->Body = view('emails.giftcard', compact('site_name', 'username', 'payment', 'giftcard'))->render();

                            $mail->send();
                        } catch (PHPMailerException $e) {
                            Log::error('Mail Error giveItems PHPMailer: ' . $e->getMessage());
                        }
                    }
                }
            }

            // Delivering packages on the Minecraft server
            if ($product->type === Item::MINECRAFT_PACKAGE || $product->type === Item::MINECRAFT_AND_GIFTCARD) {
                global $setting, $result;
                $servers = [];

                if ($product->is_server_choice == 1) {
                    $cartSelectServers = CartSelectServer::where([
                        ['cart_id', $cart->id],
                        ['item_id', $product->id]
                    ])->with(['servers' => function ($query) {
                        $query->where('deleted', 0);
                    }])->get();

                    if (!empty($cartSelectServers) && $cartSelectServers->count() > 0) {
                        $servers = $cartSelectServers->pluck('servers')->flatten();
                    }
                }

                if (empty($servers)) {
                    $serverIds = array_unique(
                        ItemServer::where('item_servers.type', ItemServer::TYPE_CMD_SERVER)
                            ->join('commands', 'commands.item_id', '=', 'item_servers.item_id')
                            ->where('commands.item_id', $product->id)
                            ->select('item_servers.server_id')
                            ->get()
                            ->pluck('server_id')
                            ->toArray(),
                        SORT_NUMERIC
                    );

                    if (count($serverIds) > 0) {
                        $servers = Server::whereIn('id', $serverIds)->get();
                    }
                    if (empty($servers)) {
                        $servers = Server::where('deleted', 0)->get();
                    }
                }

                $result = false;

                if ($setting->withdraw_game == 'minecraft') {
                    $result = self::giveItem($cmdEvent, $servers, $product, $user, $itemCart, $payment->id);
                    if (!$result) {
                        $discordMessageController->sendErrorDiscordPlugin($payment->id, $setting);
                    }
                }

                if (!$result) {
                    $discordMessageController->sendErrorDiscordPlugin($payment->id, $setting);
                    return false;
                }
            }
        }

        $discordMessageController->sendSuccessfulDiscord($user->identificator, $itemsCart, $setting);
        return true;
    }

    public static function giveItem($cmdEvent, $servers, $item, $user, $cart, $paymentId): bool
    {
        global $commandServers, $currency;
        $commandServers = ItemServer::where('item_servers.type', ItemServer::TYPE_CMD_SERVER)
            ->join('commands', 'commands.item_id', '=', 'item_servers.item_id')
            ->where('commands.item_id', $item->id)
            ->select('item_servers.server_id')
            ->get()
            ->pluck('server_id')
            ->toArray();

        // Find the command if the command has limited servers

        $settings = Setting::select(['currency', 'discord_bot_enabled'])->first();
        $currency = $settings->currency;
        $cartItem = CartItem::query()->where('cart_id', $cart->cart_id)->where('item_id', $item->id)->first();

        if ($cmdEvent == Command::EVENT_PURCHASED) {
            $saleCommands = SaleCommand::whereIn('sale_id', Sale::where('is_enable', 1)->select('id')->get()->pluck('id')->toArray())->get();
            if ($saleCommands->isNotEmpty()) {
                foreach ($saleCommands as $saleCommand) {
                    $saleCommandServers = ItemServer::where('item_servers.type', ItemServer::TYPE_SALE_COMMAND_SERVER)
                        ->join('sales_commands', 'sales_commands.id', '=', 'item_servers.item_id')
                        ->where('sales_commands.id', $saleCommand->id)
                        ->select('item_servers.server_id')
                        ->get()
                        ->pluck('server_id')
                        ->toArray();

                    foreach ($servers as $server) {
                        if (!empty($saleCommandServers) && !in_array($server->id, $saleCommandServers))
                            continue;

                        $commandServerName = Server::where('id', $server->id)->first()->name;
                        $cmd = str_replace('{server}', $commandServerName, $saleCommand->command);
                        $cmd = str_replace('{username}', $user->username, $cmd);
                        $cmd = str_replace('{package_name}', $item->name, $cmd);
                        $cmd = str_replace('{price}', $cartItem->price, $cmd);
                        $cmd = str_replace('{time}', Carbon::now()->format('H:i:s'), $cmd);
                        $cmd = str_replace('{date}', Carbon::now()->format('Y-m-d'), $cmd);
                        $cmd = str_replace('{uuid}', $user->uuid, $cmd);
                        $cmd = str_replace('{customerIP}', $user->ip_address, $cmd);
                        $cmd = str_replace('{currency}', $currency, $cmd);
                        $cmd = str_replace('{id}', $cart->cart_id, $cmd);

                        $commandHistory = [
                            'type' => CommandHistory::TYPE_SALE,
                            'payment_id' => $paymentId,
                            'item_id' => $item->id,
                            'cmd' => $cmd,
                            'username' => $user->username,
                            'server_id' => $server->id,
                            'status' => CommandHistory::STATUS_QUEUE,
                            'is_online_required' => 0,
                            'execute_once_on_any_server' => 0,
                            'package_name' => $item->name,
                        ];
                        CommandHistory::create($commandHistory);
                    }
                }
            }
        }

        // Check if the Discord bot is enabled
        if ($settings->discord_bot_enabled) {
            $itemDiscordRoles = ItemRole::where('item_id', $item->id)->get();

            if ($itemDiscordRoles->isNotEmpty()) {
                $discordRoleController = new RolesController();

                foreach ($itemDiscordRoles as $itemDiscordRole) {
                    $discordRole = DiscordRole::where('id', $itemDiscordRole->role_id)
                        ->where('deleted', 0)
                        ->first();
                    $payment = Payment::where('id', $paymentId)->first();

                    $discordData = [
                        'discord_id' => $payment->discord_id ?? null,
                        'role_id' => $discordRole->role_id ?? null,
                        'internal_role_id' => $discordRole->id,
                        'user_id' => $user->id,
                        'payment_id' => $paymentId,
                    ];

                    switch ($cmdEvent) {
                        case Command::EVENT_PURCHASED:
                            $discordData['action'] = DiscordRoleQueue::GIVE_ROLE;
                            break;
                        case Command::EVENT_CHARGEBACKED:
                        case Command::EVENT_REMOVED:
                            $discordData['action'] = DiscordRoleQueue::REMOVE_ROLE;
                            break;
                    }

                    // Process the action
                    $discordRoleController->handle($discordData);
                }
            }
        }

        $commands = Command::where('item_type', Command::ITEM_COMMAND)
            ->where('item_id', $item->id)
            ->where('event', $cmdEvent)
            ->get();

        for ($i = 1; $i <= $cart->count; $i++) {
            foreach ($commands as $command) {
                $cmd = $command->command;

                foreach (Item::where('id', $item->id)->first()->variables()->get() as $var) {
                    if (!is_null($cart->id)) {
                        $varValue = CartItemVar::select('var_value')
                            ->where([
                                ['cart_item_id', $cart->id],
                                ['var_id', $var->id],
                            ])->first();
                        if (! is_null($var) && ! is_null($varValue)) {
                            $cmd = str_replace('{'.$var->identifier.'}', $varValue->var_value, $cmd);
                        }
                    }
                }

                $cartx = Cart::query()->select('coupon_id')->find($cart->cart_id);
                if (! empty($cartx->coupon_id)) {
                    $coupon = Coupon::query()->select('name')->find($cartx->coupon_id);
                    if (! empty($coupon)) {
                        $cmd = str_replace('{coupon}', $coupon->name, $cmd);
                    }
                } else {
                    $cmd = str_replace('{coupon}', ' ', $cmd);
                }

                $cmd = str_replace('{username}', $user->username, $cmd);
                $cmd = str_replace('{package_name}', $item->name, $cmd);
                $cmd = str_replace('{price}', $cartItem->price, $cmd);
                $cmd = str_replace('{time}', Carbon::now()->format('H:i:s'), $cmd);
                $cmd = str_replace('{date}', Carbon::now()->format('Y-m-d'), $cmd);
                $cmd = str_replace('{uuid}', $user->uuid, $cmd);
                $cmd = str_replace('{customerIP}', $user->ip_address, $cmd);
                $cmd = str_replace('{currency}', $currency, $cmd);
                $cmd = str_replace('{id}', $cart->cart_id, $cmd);

                // Getting information about the Item Servers that the command is limited to
                $itemServers = ItemServer::where('item_id', $item->id)
                    ->where('type', ItemServer::TYPE_CMD_SERVER)
                    ->where('cmd_id', $command->id)
                    ->get();

                // Getting the servers from the ItemServer model for the initiated command
                $commandServers = [];
                foreach ($itemServers as $itemServer) {
                    $commandServers[] = $itemServer->server_id;
                }

                foreach ($servers as $server) {
                    // Check if the command is limited to specific servers
                    if (!empty($commandServers) && !in_array($server->id, $commandServers))
                        continue;

					$commandServerName = Server::where('id', $server->id)->first()->name;

					$cmd = str_replace('{server}', $commandServerName, $cmd);

                    for ($j = 0; $j < $command->repeat_cycles + 1; $j++) {
                        $commandHistory = [
                            'type' => CommandHistory::TYPE_ITEM,
                            'payment_id' => $paymentId,
                            'item_id' => $item->id,
                            'cmd' => $cmd,
                            'username' => $user->username,
                            'server_id' => $server->id,
                            'status' => CommandHistory::STATUS_QUEUE,
                            'is_online_required' => $command->is_online_required,
                            'execute_once_on_any_server' => $command->execute_once_on_any_server,
                            'package_name' => $item->name,
                        ];

                        $delayValue = 0;
                        if ($command->delay_value > 0)
                            $delayValue += $command->delay_value;

                        if ($delayValue > 0)
                            $commandHistory['executed_at'] = DB::raw('DATE_ADD(NOW(), INTERVAL '.$delayValue.' SECOND)');
                        CommandHistory::create($commandHistory);
                    }
                }
            }
        }
        return true;
    }

    // Generate giftcard for purchase
    public static function generateGiftcard($username, $price, $paymentId)
    {
        $giftcard_code = 'G-' . Str::random(10, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ');

        $giftcard = Gift::create([
            'name' => $giftcard_code,
            'start_balance' => $price,
            'end_balance' => $price,
            'expire_at' => Carbon::now()->addYears(10),
            'note' => __('Automatically generated giftcard for payment') . ' #' . $paymentId . '. ' . __('Purchased by') . ' ' . $username,
            'payment_id' => $paymentId,
        ]);

        return $giftcard;
    }

    public static function sendRcon($cmd, $server)
    {
        $rcon = new RCON($server);
        if (@$rcon->connect()) {
            $rcon->send_command($cmd);
            $rcon->disconnect();
        } else {
            return false;
        }

        return true;
    }


    public static function giveRconUnturned($cmd, $server)
    {
        $rcon = new RocketRCON();
        if ($rcon->connect($server->host_websocket, $server->port_websocket, $server->password_websocket)) {
            $rcon->send($cmd);
            $rcon->disconnect();
        } else {
            return false;
        }

        return true;
    }

    public static function sendListener($cmd, $username, $is_online_required, $commandHistoryId, $itemName = null)
    {
        if (str_starts_with($username, 'admin_') && $commandHistoryId === null) {
            $cmd = json_encode([
                'username' => $username,
                'is_online_required' => $is_online_required,
                'command' => 'say Official MineStoreCMS.com Plugin Connected Successfully',
                'package_name' => $itemName ?? null,
            ]);

            $serverId = substr($username, 6);
            $servers = Server::where('id', $serverId)->where('deleted', 0)->get();
            foreach ($servers as $server) {
                CmdQueue::create([
                    'server_id' => $server->id,
                    'commands_history_id' => null,
                    'command' => $cmd,
                ]);
            }
        } else {
            $command_history = CommandHistory::where('id', $commandHistoryId)->first();
            $command_history->update([
                'status' => CommandHistory::STATUS_PENDING
            ]);

            if ($command_history->item_id !== null) {
                $itemName = Item::where('id', $command_history->item_id)->first();
                if ($itemName) {
                    $itemName = $itemName->name;
                }
            }

            $cmd = json_encode([
                'username' => $username,
                'is_online_required' => $is_online_required,
                'command' => $cmd,
                'package_name' => $itemName ?? null,
            ]);

            CmdQueue::create([
                'server_id' => $command_history->server_id,
                'commands_history_id' => $commandHistoryId,
                'command' => $cmd,
            ]);
        }

        return true;
    }

    public static function sendWebsocket($cmd, $server, $username, $is_online_required)
    {
        try {
            $fp = fsockopen($server->host_websocket, $server->port_websocket, $errno, $errstr, 3);
        } catch (\Exception $e) {
            return false;
        }
        if ($fp !== false) {
            $cmd = json_encode([
                'password' => $server->password_websocket,
                'username' => $username,
                'is_online_required' => $is_online_required,
                'command' => $cmd,
            ]);

            fwrite($fp, $cmd);
            fclose($fp);
        } else {
            return false;
        }

        return true;
    }

    public static function sendGlobalCommands($payment)
    {
        $settings = Setting::query()->select('enable_globalcmd', 'currency')->find(1);
        if ($settings->enable_globalcmd != 1) {
            return;
        }

        $price = $payment->price;
        if ($payment->currency != $settings->currency) {
            $system_currency = Currency::where('name', $settings->currency)->first();
            $currencyRate = Currency::where('name', $payment->currency)->first();
            $price = round(($payment->price * $currencyRate->value) / $system_currency->value, 2);
        }

        $globalCommands = GlobalCommand::where('price', '<=', $price)->get();
        if ($globalCommands->isEmpty())
            return;

        $currency = Setting::first()->currency;
        $setting = Setting::select('withdraw_game')->find(1);
        foreach ($globalCommands as $globalCommand) {

            $cmd = str_replace('{username}', $payment->user->username, $globalCommand->cmd);
            $cmd = str_replace('{time}', Carbon::now()->format('H:i:s'), $cmd);
            $cmd = str_replace('{date}', Carbon::now()->format('Y-m-d'), $cmd);
            $cmd = str_replace('{uuid}', $payment->user->uuid, $cmd);
            $cmd = str_replace('{customerIP}', $payment->user->ip_address, $cmd);
            $cmd = str_replace('{currency}', $currency, $cmd);
            $cmd = str_replace('{price}', $price, $cmd);
            $cmd = str_replace('{currency}', $payment->currency, $cmd);

            $servers = $globalCommand->servers()->where('deleted', 0)->get();
            if ($servers->isEmpty())
                $servers = Server::where('deleted', 0)->get();

            foreach ($servers as $server) {
                $cmdHistory = CommandHistory::create([
                    'type' => CommandHistory::TYPE_GLOBAL,
                    'payment_id' => $payment->id,
                    'cmd' => $cmd,
                    'username' => $payment->user->username,
                    'server_id' => $server->id,
                    'status' => CommandHistory::STATUS_QUEUE,
                    'is_online_required' => $globalCommand->is_online,
                ]);

                if ($setting->withdraw_game == 'minecraft') {
                    if ($server->method == 'websocket') {
                        self::sendWebsocket($cmd, $server, $payment->user->username, boolval($globalCommand->is_online));
                    } elseif ($server->method == 'rcon') {
                        if (self::sendRcon($cmd, $server))
                            $cmdHistory->update(['status', CommandHistory::STATUS_EXECUTED]);
                    } elseif ($server->method == 'listener') {
                        self::sendListener($cmd, $payment->user->username, boolval($globalCommand->is_online), $cmdHistory->id);
                    }
                }
            }
        }
    }

    public static function sendGameAuthCommand($gameAuthUser)
    {
        $allServers = Server::query()->where('deleted', 0)->get();

        $authCMD = $gameAuthUser->id;

        $cmd = str_replace('{user}', $gameAuthUser->username, $authCMD);
        $cmd = json_encode([
            'type' => 'authorization',
            'username' => $gameAuthUser->username,
            'auth_id' => $cmd,
        ]);

        $setting = Setting::select('withdraw_game')->find(1);

        foreach ($allServers as $server) {
            if ($setting->withdraw_game == 'minecraft') {
                if ($server->method == 'websocket') {
                    $fp = false;
                    try {
                        $fp = fsockopen($server->host_websocket, $server->port_websocket, $errno, $errstr, 3);
                    } catch (\Exception $e) {
                    }
                    if ($fp !== false) {
                        $cmd = str_replace('{username}', $gameAuthUser->username, $authCMD);
                        $cmd = json_encode([
                            'password' => $server->password_websocket,
                            'username' => $gameAuthUser->username,
                            'auth_id' => $cmd,
                        ]);
                        fwrite($fp, $cmd);
                        fclose($fp);
                    }
                } elseif ($server->method == 'rcon') {
                    $rcon = new RCON($server);
                    if (@$rcon->connect()) {
                        $rcon->send_command($cmd);
                        $rcon->disconnect();
                    }
                } elseif ($server->method == 'listener') {
                    CmdQueue::create([
                        'server_id' => $server->id,
                        'command' => $cmd,
                    ]);
                }
            }
        }
    }

    public static function sendVirtualCurrencyCommand($playerData)
    {
        $setting = Setting::select('withdraw_game', 'virtual_currency_cmd')->find(1);

        $cmd = str_replace('{username}', $playerData['username'], $setting->virtual_currency_cmd);
        $cmd = str_replace('{amount}', $playerData['price'], $cmd);

        self::processCommand($playerData, $cmd);
    }

    public static function chargeVirtualCurrencyBalanceCommand($playerData)
    {
        $cmd = 'ms chargeBalance {username} {amount} {payment_internal_id} {signature}';
        $cmd = str_replace('{username}', $playerData['username'], $cmd);
        $cmd = str_replace('{amount}', $playerData['price'], $cmd);
        $cmd = str_replace('{payment_internal_id}', $playerData['payment_internal_id'], $cmd);
        $cmd = str_replace('{signature}', $playerData['signature'], $cmd);

        self::processCommand($playerData, $cmd);
    }

    private static function processCommand($playerData, $cmd)
    {
        $allServers = Server::query()
            ->where('deleted', 0)
            ->get();

        $commandData = json_encode([
            'username' => $playerData['username'],
            'is_online_required' => true,
            'command' => $cmd,
        ]);

        $commandArray = json_decode($commandData, true);

        $cart_items = CartItem::where('cart_id', $playerData['cart_id'])->get();

        foreach ($cart_items as $cart_item) {
            $eco_servers = self::getEconomyServers($cart_item, $allServers);

            foreach ($eco_servers as $server) {
                for ($i = 1; $i <= $cart_item->count; $i++) {
                    CommandHistory::create([
                        'type' => CommandHistory::TYPE_VIRTUAL_CURRENCY,
                        'payment_id' => $playerData['payment_id'],
                        'cmd' => $commandArray['command'],
                        'username' => $playerData['username'],
                        'server_id' => $server->id,
                        'status' => CommandHistory::STATUS_QUEUE,
                        'is_online_required' => true,
                    ]);
                }
            }
        }
    }

    private static function getEconomyServers($cart_item, $allServers)
    {
        $itemsEcoServer = ItemServer::where('type', ItemServer::TYPE_ECONOMY_SERVER)
            ->where('item_id', $cart_item->item->id)
            ->get();

        if ($itemsEcoServer->isEmpty()) {
            return $allServers;
        }

        $eco_server_ids = $itemsEcoServer->pluck('server_id')->toArray();
        return Server::whereIn('id', $eco_server_ids)->get();
    }

    public static function getPrice($item)
    {
        $price = $item->price;
        if ($item->is_virtual_currency_only == 1) {
            $price = $item->virtual_price;
        }

        if ($item->discount > 0) {
            $discount = $price * ($item->discount / 100);
            return round($price - $discount, 2);
        } else {
            return $price;
        }
    }

    public function calculateDiscount($item): float|int
    {
        if ($item->discount > 0 && $item->virtual_price !== null) {
            return round($item->virtual_price * ($item->discount / 100), 2);
        } elseif ($item->discount > 0 && $item->virtual_price == null) {
            return round($item->price * ($item->discount / 100), 2);
        } else {
            return 0;
        }
    }
}
