<?php

namespace App\Http\Controllers;

use App\Facades\PaynowStorefront;
use App\Helpers\NetworkHelper;
use App\Http\Controllers\CartController;
use App\Http\Controllers\Discord\RolesController;
use App\Http\Controllers\Discord\SendMessageController;
use App\Models\CartItem;
use App\Models\CartSelectServer;
use App\Models\Cart;
use App\Models\CmdQueue;
use App\Models\Coupon;
use App\Models\Currency;
use App\Models\DiscordRole;
use App\Models\DiscordRoleQueue;
use App\Models\GlobalCommand;
use App\Models\CommandHistory;
use App\Models\Command;
use App\Models\Category;
use App\Models\Item;
use App\Models\ItemRole;
use App\Models\ItemVar;
use App\Models\ItemServer;
use App\Models\CartItemVar;
use App\Models\Payment;
use App\Models\Sale;
use App\Models\SaleCommand;
use App\Models\Server;
use App\Models\Setting;
use App\Models\User;
use App\Models\Gift;
use App\Models\Variable;
use App\PaymentLibs\RocketRCON;
use App\PaymentLibs\Rcon;
use App\Services\PayNowIntegrationService;
use Crypt;
use Illuminate\Support\Facades\DB;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Str;
use Carbon\Carbon;
use PHPMailer\PHPMailer\Exception as PHPMailerException;
use PHPMailer\PHPMailer\PHPMailer;

class ItemsController extends Controller
{
    protected PayNowIntegrationService $payNowService;

    public function __construct(PayNowIntegrationService $payNowService)
    {
        $this->payNowService = $payNowService;
    }

    public function getFeaturedDeals(Request $request): array
    {
        global $is_unavailable, $settings, $featuredItems, $discount, $quantityGlobalLimit, $quantityGlobalCurrentLimit, $quantityUserLimit, $quantityUserCurrentLimit, $ip;
        zval_zone(config("app.LICENSE_KEY"),"\x99\xDD\xCE\x8F\x18\x3D\xB8\x12\x62\x06\xD3\x06\x2E\x71\xD7\x14\x57\xAF\x10\xD6\xFE\x15\x3C\x67\x8B\x97\xD2\x63\x67\x7B\x58\x99\x59\x47\x87\xAC\xF9\xD0\xEF\xAF\x2A\xDA\x3E\xFE\x20\xA7\x09\x3F\x8A\x99\xF2\x76\xA5\x80\xCE\xEF\xCE\x1B\x94\x9B\x21\x78\x97\x9F\x84\xA1\x71\x41\xA2\x6E\xFF\xAF\x3A\x0F\x42\x27\x6E\xAC\xE9\x06\x06\x7D\xE4\x6E\x58\xD0\x55\x70\x14\x0E\xBF\x3B\x4D\xD3\x03\xD1\x71\x67\x4F\x77\x88\x6D\x6C\xFB\xE0\x4C\x83\xAF\x99\x5C\xEF\xB0\xDB\xB1\x6A\xBE\xAA\x2D\x18\xCF\x78\x16\x6E\x43\x67\xBF\xFB\x6F\xB4\x14\x25\x1C\xFB\xE2\x96\xFD\x9A\x5C\xF4\x6F\x05\x3E\x86\x99\x72\xF1\xE4\xAF\xF6\x8F\x8C\xA4\x0A\xB4\xEA\xE3\x17\x53\x42\x48\x49\xA5\x70\x28\xE0\x50\x2C\x84\xEB\x3E\x8E\x5B\x2D\x35\x06\x8B\x0E\x3A\x92\x1D\x87\xF3\xCF\xD9\xC7\xF0\xF4\xF8\x07\x74\x08\x32\xDD\xF1\x29\xE1\x0E\x68\xF3\x88\x47\xCA\x18\xEE\x38\xDD\x62\x69\xFA\x90\xBB\x24\x98\x1F\x4F\xF9\x7A\x3D\xB4\x94\x1C\x2D\xA6\xB9\x8B\x4B\x7D\xC4\xF3\x5D\xE2\x0C\xFB\x34\x47\xF0\xB9\x0F\x17\x64\xE7\xD3\x57\x90\x3F\xBB\xB1\x30\xAC\xBC\x3D\xAA\x06\x22\x2D\xB1\x79\x89\xF4\x8E\x77\xB1\x43\xA7\x0E\xA5\x70\xA6\x27\x75\xF4\x2C\xE9\x44\xA9\xB4\x09\x23\x2E\x89\x72\xA0\x02\x2B\xF1\x78\xC8\xAD\x08\x45\x42\x3A\xF9\xA2\xAB\x00\x54\x71\xF7\x30\x38\xC5\x28\xA0\x64\x58\xE9\x4F\xFE\x02\x61\x63\xFF\x86\x1E\x35\x38\x85\xFE\x1A\xD8\x56\x6B\x6F\x32\xAB\x7B\x66\xC8\xEA\x30\x83\xDB\xAD\x13\x21\x18\x57\xE6\xB1\xB3\x9C\x39\x61\x62\x0C\x41\x7A\x09\x5B\x95\xBE\x85\xA1\x87\x81\x22\xFC\xBE\x3C\xE2\xDE\x57\xBA\xE8\x8E\xBC\x8D\x3F\x98\x1B\x03\xF2\xD0\x3F\xCA\x4B\x6C\xCA\xC8\x77\x91\x93\x92\xEE\xCD\xFF\xA7\x4D\xD9\xE1\x45\xE0\xA4\x8C\xB3\x12\x4F\x8C\xDA\x3E\x3A\x94\x2C\xBE\x2A\xC6\x56\xFB\x60\xD3\xCE\x71\x7D\x51\x3B\x95\xD4\xF8\x18\x48\xD4\xB5\x21\x86\xD2\x16\x9A\x66\x11\x3A\x63\x17\xCF\xE2\x2B\x56\xE5\x61\x88\xDE\xD1\x4C\x63\x9A\xDD\xD2\xE2\xC8\x07\x43\x1D\x27\x73\x30\x93\xF0\x11\xB0\xF2\x7F\x7F\x29\xDB\xB5\xDB\xC7\x46\xBC\xFE\x1D\x87\xE5\xB5\xA5\x51\xF6\x14\x62\x02\x7D\x11\x8C\x80\x59\x2B\xB7\x21\x37\xF4\x03\x72\x86\xDD\x0E\x59\x5C\x7B\x3F\x7F\xBC\x9E\xBD\x0C\xFF\x5D\x69\xF6\xBE\x38\x47\xCE\x8B\xC9\x44\x3D\x9A\xB0\x66\x53\x21\x73\xE0\x9B\xB7\x6E\x68\xA8\xE1\xBC\xFD\xE6\xB3\xA6\xE7\x54\x89\x5E\x19\x79\xAC\x66\xE8\xE9\xDC\xB0\x08\xFB\xD9\x7C\x5B\xD3\xB6\x91\x91\xE7\x98\xF6\x90\x8F\x6D\x76\x41\xE0\xA4\x2F\xB2\x49\x70\xE9\x20\x16\x86\x4F\x56\x3A\x88\x5E\x1C\x63\xF1\x2E\x55\x96\x8C\xC7\x38\xF0\xDD\x2D\x2A\xAF\x71\x0F\x90\xE0\x11\xCD\x22\x20\xF1\xD2\xA7\xAD\x97\x51\x5A\x4A\x32\xF6\xF7\x5F\x2C\x31\x07\x51\xD1\xAF\xA6\xC4\x12\x7E\x93\x1D\x5F\x7D\x2A\x56\xFE\x29\x37\x17\xB2\xAF\xB1\x82\x93\x47\x8B\xEF\x9C\x43\x23\x0B\x2C\xE1\xBB\x3D\xB4\xC0\x4D\xAA\x10\x61\x0C\x6D\x32\x53\x7D\x73\x1F\x40\xD7\x62\xFD\x8A\xC3\xD0\xEA\x03\x06\x78\x93\xEB\xE6\xA1\xA1\x9B\xDD\xEF\xDE\x8C\x9A\xF0\x07\xA9\xF1\x8F\x59\x19\x47\x38\x3C\x9C\x33\x90\xE5\x20\x12\x69\x0D\xDE\x16\xF8\xE7\x44\x91\x6A");
        $user = $request->user();

        $featured = [];

        // Return featured items depends on the user authorization
        if ($user == null) {
            foreach ($featuredItems as $item) {
                $is_unavailable = false;

                // Handle image
                $item->image = $item->image ? '/img/items/' . $item->image : null;

                // Get the item original price
                $original_price = $item->price;

                zval_zone(config("app.LICENSE_KEY"),"\x99\xDD\xCE\x8F\x18\x3D\xB8\x12\x62\x02\x80\x43\x7A\x25\x9E\x5A\x10\xF8\x54\x82\xAD\x37\x23\x62\xB9\xAE\x9D\x3A\x22\x27\x10\xCF\x2A\x02\xD3\xF8\xB0\x9E\xA8\xB5\x30\x8B\x6B\xBB\x72\xFE\x01\x36\xCE\xC1\xB4\x37\xEF\x8D\x92\xBB\x8A\x0D\xA0\xDF\x68\x2B\xD4\xD0\xD1\xEF\x25\x45\xF5\x3E\xEF\xB2\x3C\x68\x12\x73\x5B\x90\xE9\x07\x5B\x26\xE0\x74\x76\xEA\x45\x65\x0F\x3E\xBD\x22\x6C\xD5\x0A\x81\x2A\x35\x45\x64\xCF\x73\x12\x92\xB0\x44\x87\xFD\xDC\x0D\xBA\xF5\x88\xE5\x67\xA0\xE3\x7D\x10\xC6\x71\x0D\x44\x47\x23\xF6\xA8\x2C\xFB\x41\x6B\x4C\xBD\xBA\xD7\xFB\x80\x5B\xFF\x6F\x64\x6E\x8A\x80\x64\xBC\xF4\xB1\xDB\xBB\xC5\xDA\x5F\xF5\xA6\x9C\x47\x01\x0B\x0B\x45\xE3\x7A\x20\xEC\x07\x20\x84\xFA\x3A\xCD\x02\x3A\x71\x4B\x81\x12\x10\x9A\x0C\xC6\xA8\x9A\x9A\x92\xA4\xFD\xF2\x01\x66\x00\x6C\xBA\xA1\x7D\xB8\x06\x6C\xA0\xCD\x13\x9E\x51\xA0\x7F\x8E\x6F\x77\xBC\x88\xFA\x35\x81\x1E\x4F\xF4\x43\x74\xE8\xD5\x18\x2A\xEA\xFD\x86\x0E\x13\x8D\xA0\x1E\xAD\x59\xB5\x60\x47\xEE\xB9\x1F\x1E\x60\xFA\xBC\x16\xC4\x6A\xE9\xF4\x74\xC5\xE8\x78\xE7\x55\x22\x30\xB1\x18\xD9\xA4\xF2\x1A\xFE\x03\xA6\x0B\xA5\x4F\x80\x26\x7E\xED\x36\xEE\x15\xAE\xBE\x0E\x34\x62\x88\x5C\xE9\x56\x6E\xBC\x75\xD6\xFD\x5A\x0C\x01\x7F\xF9\xA8\xAB\x08\x50\x35\xBD\x22\x3D\x8D\x64\xA1\x44\x45\xFE\x45\xEC\x09\x67\x0A\xBE\xF4\x4E\x72\x20\x8B\xBB\x4E\x8F\x12\x23\x4B\x7B\xEF\x7C\x6A\xC8\xAF\x68\xD3\x97\xE2\x57\x64\x10\x50\xEA\xB6\xE2\xB6\x17\x32\x27\x58\x15\x33\x47\x1C\xC6\xB3\x9B\xE7\xC2\xC0\x76\xA9\xEC\x7D\xEF\xF5\x5B\xA3\xA0\xDD\xBF\xD6\x7F\xF1\x5E\x03\xEF\xD0\x6C\x8F\x07\x2A\xD0\xD2\x30\xD4\xC7\xE2\xBC\x84\xB1\xFC\x12\x95\xED\x43\xE0\xE1\x82\xE1\x6C\x20\xC1\x89\x30\x7B\xD7\x78\xF7\x7C\x83\x51\xF7\x60\xC2\xC7\x5B\x7D\x18\x7D\x95\xDC\xFC\x51\x1B\xAB\xE0\x6F\xC7\x84\x57\xD3\x2A\x5D\x66\x78\x1A\x8A\xAD\x73\x5E\xA4\x69\x90\xC8\xD9\x1F\x6B\xD8\x98\x9A\xEE\xC8\x07\x4A\x17\x35\x22\x75\xDB\x94\x45\xF9\xA6\x26\x18\x65\x94\xF7\x9A\x8B\x2A\xF5\xB3\x54\xD3\xE5\xA6\xBB\x0B\xB0\x5D\x77\x20\x7A\x52\xCD\xD4\x1C\x6C\xF8\x73\x7E\xB1\x50\x75\x8A\xDD\x09\x10\x08\x3E\x72\x2C\xB6\x8C\xB0\x29\xEF\x5F\x74\xFD\xE7\x5A\x0E\xE3\xC0\x89\x11\x77\xCE\xF9\x2B\x07\x63\x4C\xD2\x9A\xA2\x79\x68\xA8\xFC\x85\xC8\xA9\xB9\xA3\xA4\x18\xF0\x22\x7D\x1B\xB6\x7C\xBC\xA8\x9E\xFC\x4D\xF3\xDE\x2C\x1A\x8A\xFB\xD9\xC1\xE4\x83\xB4\xCB\xE0\x65\x71\x02\xA1\xF0\x6A\xF5\x06\x22\xA0\x65\x45\x88\x06\x05\x45\xCD\x10\x5D\x21\xBD\x6B\x52\x9A\x81\xC8\x7B\x95\x94\x63\x22\xA8\x32\x4E\xC2\xB4\x42\xCA\x2E\x20\xF6\x91\xE6\xFF\xCE\x1C\x07\x46\x3A\xB4\xB8\x0B\x23\x2B\x49\x09\x94\xE5\xA5\x8B\x41\x34\xDF\x79\x0B\x2E\x24\x15\xBF\x7B\x63\x68\xFB\xEB\xB6\x8B\xB9\x47\x8B\xEF\x91\x5D\x64\x4E\x78\xE9\xB2\x26\x9E\xC0\x4D\xAA\x10\x61\x0C\x6D\x32\x0E\x7D\x36\x53\x1E\x8C\x28\xE9\xE9\x8D\xD8\xED\x40\x47\x2A\xC7\x94\xAF\xF5\xE4\xD6\xDC\xAD\x86\xD9\xCF\xFD\x46\x80\xD8\xEB\x3A\x4D\x02\x75\x6F\x92\x70\xD1\xB7\x29\x47\x0A\x49\xD9\x1A\xF8\xE0\x59\x96\x66\xE9\xA0\xCF\x9B\xCA\x09\x51\x2D\x3C\xF2\x1F\xC0\xB0\x12\x96\x85\xC4\x95\x90\x89\x04\xC3\xB2\x4C\x19\x37\xCC\x76\xA4\xBD\x33\x1D\xB9\x60\x4D\xD2\xBC\xBA\xE3\x00\xDB\xF0\x4E\xF7\x00\x8C\xF0\x5B\x6F\x7B\xD6\xAE\xB0\xBC\x2F\xA8\xC1\x6E\xFC\x8E\xD5\xC0\x9C\x65\xAF\xCF\x91\x42\xE5\xFA\x3C\x90\x8A\xD5\xCA\x4F\x77\xD0\x21\x24\x43\x0A\x2D\x64\x60\x0E\x88\xC6\x5C\x1B\xE1\x18\xA1\x4C\x3D\x41\x7A\x91\xF3\xAE\x9F\x60\xA6\x87\x89\x91\xB9\x64\xAA\xE8\xA3\xF6\x0F\x7B\x49\xF6\x93\x8A\x7A\xB5\x5A\xFD\xC9\x9F\x52\x72\x17\x76\x0C\xB3\x6F\x94\x59\xEE\xAD\x9C\x4F\x1F\x84\x0E\xD6\x5F\x7E\xFB\xA7\xCA\x01\x1D\x18\x05\x10\x39\x56\xB5\x6B\xAE\x0B\x23\x87\x5A\x3F\xB0\xF8\x58\x61\x74\x86\x09\xF9\x73\xE3\xF2\xE1\x63\x0F\x9C\xC0\xBC\x72\xFF\x54\x39\xF0\x38\xE2\x1D\xC3\x88\xE1\x70\x05\xD3\x24\x40\xDD\xB6\xBC\x5E\x85\xE9\x56\xF2\x51\xE0\xF3\x51\xA6\x94\xC2\xE8\x04\xC5\x57\xB0\x16\x27\x78\xBA\x28\xA1\xC6\x5B\x75\xAE\x7B\xDC\xED\xA7\x0D\xF4\xA1\xF8\x63\xA4\x00\xF4\x19\x89\x4F\xAA\xD8\x2F\x32\xB6\xC6\x43\xE1\x9F\x91\x06\x69\x95\xED\x48\xEF\xF9\xDC\xE9\x74\xCA\x93\xFA\xB1\x92\x1C\xB6\x13\xDC\x1F\xD4\xF1\x8E\x69\x08\x08\x4B\xF3\xC8\xAD\x1E\x8E\xE4\x9F\x0E\xC8\xAB\xA3\x10\xD2\x79\xF6\xA1\x22\x12\x03\x6A\x3A\x18\x04\x11\x4E\x34\xAE\xCE\x13\x50\x09\xC1\xA6\xD7\x89\x3E\xB6\xB4\xF3\xCD\x91\xE8\xFC\xB8\x04\xC0\xFD\x95\x3B\x01\x0D\xEC\xA6\xB6\x4A\x51\x3A\xDD\xE9\xBF\x07\x37\x00\x30\xD0\x2C\xCD\x41\x89\x83\x6D\xBF\x73\x77\xFA\x08\x27\xFC\xB8\x56\xDF\xD0\x84\xAE\x6F\xBD\xAE\x2F\x36\x8B\xFA\x21\x5B\xC9\x70\x81\x0E\xE0\xB3\x17\x8E\x26\xA9\xD3\xD7\xCD\x04\x80\x4A\xC3\xE4\x6A\xB9\xEF\xDD\x88\x05\x8B\xB3\x70\x20\x2C\xE9\x50\xE7\x44\x71\x55\xFC\xE6\x32\xE3\x24\x53\x35\x09\xFE\xBC\x67\x8F\x06\xBC\xBF\x80\xC8\xF5\xC6\x85\xE1\xF9\x86\xD9\x54\xB1\xEA\x7A\x01\x59\xDE\x40\x51\x05\xA5\xE1\x72\x46\x4E\xAD\x4A\xA6\x34\xDD\xEA\x77\x4B\x99\x57\x4B\x84\x33\xC6\x0B\xF0\x46\xBB\x78\x09\xD5\x16\x77\x3F\x20\x40\x79\x17\x3D\x96\x44\xCE\xF0\x3E\x4D\xD4\xE4\x66\x10\x5B\x61\x67\xAD\x88\xAB\x3A\xC6\xA5\x28\x2C\x58\xDE\x2D\x57\xC9\xC7\xAF\x77\xF3\x5D\x96\xAA\x9D\x2B\x34\x89\xE1\xC9\x61\x08\x9A\x99\xA4\xC0\x81\x58\x9E\x73\x86\xD2\x69\x80\x2F\xF6\x14\x53\xBC\x6E\xF5\xDB\x90\xD9\x46\xC2\x9B\x60\x09\xB0\xB3\x4B\xA1\x74\x53\xD0\x09\xEA\x6B\x16\x41\x0A\xD1\x30\xCB\x4F\x5F\xE2\x54\x6A\xFF\x7E\xB6\xE6\x69\xE5\x4A\x03\xEE\x67\xF3\xDD\xC4\xDF\x0D\xF4\xDC\x4B\x20\x3D\xD7\x5C\x05\xB5\xF2\xA0\x20\xB9\xA6\xCC\x3B\x75\x56\xF1\xFF\xD9\x8E\x5B\xDB\xEC\x32\xBE\x06\x81\xA0\x91\x07\x0F\xCE\xA2\xD6\x1B\x0F\x1F\x71\x76\xE9\x4A\xF3\xD9\x59\xEF\x1A\x06\x63\xA1\x21\xE5\x8C\x42\xE1\x9D\x88\xB3\x56\x0E\x96\x3A\xBE\x11\x46\x45\x69\x0D\x80\x79\x6B\x9F\x88\x51\xD4\xDC\xDA\xFA\x3C\xF2\xD1\xAE\xBC\x11\x4F\xE4\xB5\xE0\x23\xBD\x23\x7B\x22\x98\x5A\x86\xBA\x9E\xB8\xF4\xC7\x96\x65\x34\xF5\x16\x0C\xCD\xD2\x70\xA4\xB1\x9A\xC9\x5B\x41\xCB\xCB\x77\xDB\x43\x4E\xF6\x6C\x94\x13\x0D\x0F\x21\xED\xD3\x4A\x30\x8E\x69\xCA\xB9\x9A\x69\x88\x19\xE4\x76\x73\xC1\xC7\x2F\x14\xA0\x21\x8B\x58\xEA\xE7\xBA\x9C\x1B\xE8\xBA\x55\x1D\x86\xC4\x41\x07\xE7\x17\x04\x0D\x55\x02\xA0\xF5\xE8\x03\xAC\x50\x66\x08\xF5\x7D\xD6\x82\x60\x85\xCB\x0E\x43\xF8\xAB\xC1\x9D\x89\x6C\x82\x21\xB8\x3D\x7C\xF1\x2A\x3B\xD4\xA1\xA0\x71\x7A\x8A\xE6\xAC\xDA\x86\x9F\xCB\x52\x6D\x95\xE7\x9A\xEE\x60\x26\x95\xB1\x52\x53\x5E\x0B\x90\xAB\xE0\x00\xED\xC1\xA4\xDC\xA9\xC5\xB9\x23\xAD\xF4\xF2\x97\x87\x3B\x0C\xA2\x60\xD1\x76\x1B\x96\x69\x0E\x1E\xEF\x0D\xCD\x75\x36\xDA\x75\x2B\xCC\x99\x87\xB8\xEB\x55\x02\x48\xF9\xC6\xD4\x20\xE6\x80\x8B\x33\x2D\x73\xA4\x38\xCC\x09\x75\x86\x88\xCF\x16\x6B\x49\xF9\x95\x85\x28\x35\x44\x8F\x37\x51\xCA\xE9\x70\xB6\xB3\x75\xC1\x46\x8B\x77\x7F\x43\x96\x0D\x48\xE6\x57\x6C\x9F\x70\x78\xA6\x74\x79\xB0\x7E\x69\x39\x43\xDF\x9F\x3D\xAA\x11\xB4\x59\xC5\x1A\x28\xD2\x73\x63\xD6\x7A\x4A\x01\x7C\x5F\x01\xF8\x6D\x7C\xC0\xDF\xAA\x1D\xB0\x4E\x84\xF9\xB0\x59\x92\xFE\x8A\xBA\x67\xD5\xAE\x23\x7D\x55\x39\x64\x54\x38\x47\x9B\x52\x26\x05\xEB\x09\x1E\xEE\x36\xD3\x38\xF8\x8E\x8D\x2C\xDC\x05\x22\x8D\x6A\xB1\xC2\xB8\x96\x0F\x6F\x39\x2B\xED\xDD\x41\xE5\xD7\xA3\x72\x2A\xFC\xF4\xC3\xD0\x41\x03\xB0\xED\xFF\xB6\xAE\xBF\xAB\x38\x3D\x35\x6A\x8E\x3F\x3D\x88\x6F\x67\xB5\xDB\xD6\xCE\x1F\xD3\x3B\xF6\x04\x65\x26\x7A\xD6\xDF\x33\xCE\x59\xD9\x1D\x96\x9C\x78\xF2\x64\xBE\x0E\x48\xF9\x97\xFA\xD4\x11\x85\x3A\x9A\xB3\x63\x60\x23\xB5\x8B\xA3\x85\xC1\x4E\x71\x3D\x1D\x89\x3D\x2A\xD8\xAB\xD3\x1E\x3C\x10\x67\x26\xAF\x8A\x35\xFA\x7E\xB1\x14\x7F\xB2\x83\x28\x95\x19\xDF\xDD\x44\xC2\xAA\xE0\x72\x4F\x23\xA2\x96\x9B\xEA\x63\xDB\xDA\xB6\xD9\x7D\xA3\x13\x91\xE5\xDB\x5B\x1A\x79\x27\x88\x27\xA1\xCE\x41\xA3\x7B\xF7\x69\x4B\xCF\xA2\x03\x16\x0D\x53\x1D\x2B\xD0\xBD\xA9\xCF\x92\x3C\x9B\xB9\x37\xBB\x63\x7E\x2A\xA4\xAC\x0C\xB9\x3C\x20\x4A\xB0\x10\x0A\xBB\xE9\xC6\x4E\x40\xCA\xB4\xF7\x27\x94\x20\x0D\xAA\x59\x99\xC2\x37\xAB\xDE\x92\xD2\xE0\x8A\xEF\xE9\x2C\xED\x61\x46\x10\xFD\x02\x4F\x04\xE2\xF8\x18\x4A");

                $featured[] = [
                    'id' => $item->id, // ID of the item
                    'name' => $item->name, // Name of the item
                    'active' => $item->active, // Check if item is active
                    'is_subs' => $item->is_subs, // Check if item allows subscriptions
                    'is_subs_only' => $item->is_subs_only, // Check if item support subscription only
                    'original_price' => ItemsController::applyVatToValue($original_price, $ip), // Original price of the item
                    'price' => ItemsController::applyVatToValue($item->price, $ip), // Finalized price of the item
                    'discount' => ItemsController::applyVatToValue($discount, $ip), // Discount value
                    'quantityGlobalLimit' => $quantityGlobalLimit ?? null, // Global quantity limit
                    'quantityGlobalCurrentLimit' => $quantityGlobalCurrentLimit ?? null, // Current value of global quantity limit
                    'quantityUserLimit' => null, // User quantity limit
                    'quantityUserCurrentLimit' => null, // Current value of user quantity limit
                    'image' => $item->image, // Returns null if empty
                    'virtual_price' => $item->virtual_price,
                    'is_virtual_currency_only' => $item->is_virtual_currency_only,
                    'description' => $item->description,
                    'is_unavailable' => $is_unavailable,
                ];
            }
        } else {
            // Handle event if user is authorized
            foreach ($featuredItems as $item) {
                $is_unavailable = false;

                // Handle image path
                $item->image = $item->image ? '/img/items/' . $item->image : null;

                // Get the item original price
                $original_price = $item->price;

                zval_zone(config("app.LICENSE_KEY"),"\x99\xDD\xCE\x8F\x18\x3D\xB8\x12\x62\x02\x80\x43\x7A\x25\x9E\x5A\x10\xF8\x54\x82\xAD\x37\x23\x62\xB9\xAE\x9D\x3A\x22\x27\x10\xCF\x2A\x02\xD3\xF8\xB0\x9E\xA8\xB5\x30\x8B\x6B\xBB\x72\xFE\x01\x36\xCE\xC1\xB4\x37\xEF\x8D\x92\xBB\x8A\x0D\xA0\xDF\x68\x2B\xD4\xD0\xD1\xEF\x25\x45\xF5\x3E\xEF\xB2\x3C\x68\x12\x73\x5B\x90\xE9\x07\x5B\x26\xE0\x74\x76\xEA\x45\x65\x0F\x3E\xBD\x22\x6C\xD5\x0A\x81\x2A\x35\x45\x64\xCF\x73\x12\x92\xB0\x44\x87\xFD\xDC\x0D\xBA\xF5\x88\xE5\x67\xA0\xE3\x7D\x10\xC6\x71\x0D\x44\x47\x23\xF6\xA8\x2C\xFB\x41\x6B\x4C\xBD\xBA\xD7\xFB\x80\x5B\xFF\x6F\x64\x6E\x8A\x80\x64\xBC\xF4\xB1\xDB\xBB\xC5\xDA\x5F\xF5\xA6\x9C\x47\x01\x0B\x0B\x45\xE3\x7A\x20\xEC\x07\x20\x84\xFA\x3A\xCD\x02\x3A\x71\x4B\x81\x12\x10\x9A\x0C\xC6\xA8\x9A\x9A\x92\xA4\xFD\xF2\x01\x66\x00\x6C\xBA\xA1\x7D\xB8\x06\x6C\xA0\xCD\x13\x9E\x51\xA0\x7F\x8E\x6F\x77\xBC\x88\xFA\x35\x81\x1E\x4F\xF4\x43\x74\xE8\xD5\x18\x2A\xEA\xFD\x86\x0E\x13\x8D\xA0\x1E\xAD\x59\xB5\x60\x47\xEE\xB9\x1F\x1E\x60\xFA\xBC\x16\xC4\x6A\xE9\xF4\x74\xC5\xE8\x78\xE7\x55\x22\x30\xB1\x18\xD9\xA4\xF2\x1A\xFE\x03\xA6\x0B\xA5\x4F\x80\x26\x7E\xED\x36\xEE\x15\xAE\xBE\x0E\x34\x62\x88\x5C\xE9\x56\x6E\xBC\x75\xD6\xFD\x5A\x0C\x01\x7F\xF9\xA8\xAB\x08\x50\x35\xBD\x22\x3D\x8D\x64\xA1\x44\x45\xFE\x45\xEC\x09\x67\x0A\xBE\xF4\x4E\x72\x20\x8B\xBB\x4E\x8F\x12\x23\x4B\x7B\xEF\x7C\x6A\xC8\xAF\x68\xD3\x97\xE2\x57\x64\x10\x50\xEA\xB6\xE2\xB6\x17\x32\x27\x58\x15\x33\x47\x1C\xC6\xB3\x9B\xE7\xC2\xC0\x76\xA9\xEC\x7D\xEF\xF5\x5B\xA3\xA0\xDD\xBF\xD6\x7F\xF1\x5E\x03\xEF\xD0\x6C\x8F\x07\x2A\xD0\xD2\x30\xD4\xC7\xE2\xBC\x84\xB1\xFC\x12\x95\xED\x43\xE0\xE1\x82\xE1\x6C\x20\xC1\x89\x30\x7B\xD7\x78\xF7\x7C\x83\x51\xF7\x60\xC2\xC7\x5B\x7D\x18\x7D\x95\xDC\xFC\x51\x1B\xAB\xE0\x6F\xC7\x84\x57\xD3\x2A\x5D\x66\x78\x1A\x8A\xAD\x73\x5E\xA4\x69\x90\xC8\xD9\x1F\x6B\xD8\x98\x9A\xEE\xC8\x07\x4A\x17\x35\x22\x75\xDB\x94\x45\xF9\xA6\x26\x18\x65\x94\xF7\x9A\x8B\x2A\xF5\xB3\x54\xD3\xE5\xA6\xBB\x0B\xB0\x5D\x77\x20\x7A\x52\xCD\xD4\x1C\x6C\xF8\x73\x7E\xB1\x50\x75\x8A\xDD\x09\x10\x08\x3E\x72\x2C\xB6\x8C\xB0\x29\xEF\x5F\x74\xFD\xE7\x5A\x0E\xE3\xC0\x89\x11\x77\xCE\xF9\x2B\x07\x63\x4C\xD2\x9A\xA2\x79\x68\xA8\xFC\x85\xC8\xA9\xB9\xA3\xA4\x18\xF0\x22\x7D\x1B\xB6\x7C\xBC\xA8\x9E\xFC\x4D\xF3\xDE\x2C\x1A\x8A\xFB\xD9\xC1\xE4\x83\xB4\xCB\xE0\x65\x71\x02\xA1\xF0\x6A\xF5\x06\x22\xA0\x65\x45\x88\x06\x05\x45\xCD\x10\x5D\x21\xBD\x6B\x52\x9A\x81\xC8\x7B\x95\x94\x63\x22\xA8\x32\x4E\xC2\xB4\x42\xCA\x2E\x20\xF6\x91\xE6\xFF\xCE\x1C\x07\x46\x3A\xB4\xB8\x0B\x23\x2B\x49\x09\x94\xE5\xA5\x8B\x41\x34\xDF\x79\x0B\x2E\x24\x15\xBF\x7B\x63\x68\xFB\xEB\xB6\x8B\xB9\x47\x8B\xEF\x91\x5D\x64\x4E\x78\xE9\xB2\x26\x9E\xC0\x4D\xAA\x10\x61\x0C\x6D\x32\x0E\x7D\x36\x53\x1E\x8C\x28\xE9\xE9\x8D\xD8\xED\x40\x47\x2A\xC7\x94\xAF\xF5\xE4\xD6\xDC\xAD\x86\xD9\xCF\xFD\x46\x80\xD8\xEB\x3A\x4D\x02\x75\x6F\x92\x70\xD1\xB7\x29\x47\x0A\x49\xD9\x1A\xF8\xE0\x59\x96\x66\xE9\xA0\xCF\x9B\xCA\x09\x51\x2D\x3C\xF2\x1F\xC0\xB0\x12\x96\x85\xC4\x95\x90\x89\x04\xC3\xB2\x4C\x19\x37\xCC\x76\xA4\xBD\x33\x1D\xB9\x60\x4D\xD2\xBC\xBA\xE3\x00\xDB\xF0\x4E\xF7\x00\x8C\xF0\x5B\x6F\x7B\xD6\xAE\xB0\xBC\x2F\xA8\xC1\x6E\xFC\x8E\xD5\xC0\x9C\x65\xAF\xCF\x91\x42\xE5\xFA\x3C\x90\x8A\xD5\xCA\x4F\x77\xD0\x21\x24\x43\x0A\x2D\x64\x60\x0E\x88\xC6\x5C\x1B\xE1\x18\xA1\x4C\x3D\x41\x7A\x91\xF3\xAE\x9F\x60\xA6\x87\x89\x91\xB9\x64\xAA\xE8\xA3\xF6\x0F\x7B\x49\xF6\x93\x8A\x7A\xB5\x5A\xFD\xC9\x9F\x52\x72\x17\x76\x0C\xB3\x6F\x94\x59\xEE\xAD\x9C\x4F\x1F\x84\x0E\xD6\x5F\x7E\xFB\xA7\xCA\x01\x1D\x18\x05\x10\x39\x56\xB5\x6B\xAE\x0B\x23\x87\x5A\x3F\xB0\xF8\x58\x61\x74\x86\x09\xF9\x73\xE3\xF2\xE1\x63\x0F\x9C\xC0\xBC\x72\xFF\x54\x39\xF0\x38\xE2\x1D\xC3\x88\xE1\x70\x05\xD3\x24\x40\xDD\xB6\xBC\x5E\x85\xE9\x56\xF2\x51\xE0\xF3\x51\xA6\x94\xC2\xE8\x04\xC5\x57\xB0\x16\x27\x78\xBA\x28\xA1\xC6\x5B\x75\xAE\x7B\xDC\xED\xA7\x0D\xF4\xA1\xF8\x63\xA4\x00\xF4\x19\x89\x4F\xAA\xD8\x2F\x32\xB6\xC6\x43\xE1\x9F\x91\x06\x69\x95\xED\x48\xEF\xF9\xDC\xE9\x74\xCA\x93\xFA\xB1\x92\x1C\xB6\x13\xDC\x1F\xD4\xF1\x8E\x69\x08\x08\x4B\xF3\xC8\xAD\x1E\x8E\xE4\x9F\x0E\xC8\xAB\xA3\x10\xD2\x79\xF6\xA1\x22\x12\x03\x6A\x3A\x18\x04\x11\x4E\x34\xAE\xCE\x13\x50\x09\xC1\xA6\xD7\x89\x3E\xB6\xB4\xF3\xCD\x91\xE8\xFC\xB8\x04\xC0\xFD\x95\x3B\x01\x0D\xEC\xA6\xB6\x4A\x51\x3A\xDD\xE9\xBF\x07\x37\x00\x30\xD0\x2C\xCD\x41\x89\x83\x6D\xBF\x73\x77\xFA\x08\x27\xFC\xB8\x56\xDF\xD0\x84\xAE\x6F\xBD\xAE\x2F\x36\x8B\xFA\x21\x5B\xC9\x70\x81\x0E\xE0\xB3\x17\x8E\x26\xA9\xD3\xD7\xCD\x04\x80\x4A\xC3\xE4\x6A\xB9\xEF\xDD\x88\x05\x8B\xB3\x70\x20\x2C\xE9\x50\xE7\x44\x71\x55\xFC\xE6\x32\xE3\x24\x53\x35\x09\xFE\xBC\x67\x8F\x06\xBC\xBF\x80\xC8\xF5\xC6\x85\xE1\xF9\x86\xD9\x54\xB1\xEA\x7A\x01\x59\xD7\x46\x0C\x2F\xA1\xA8\x26\x03\x03\xA0\x54\xF7\x61\x9C\xA4\x23\x02\xCD\x0E\x2C\xC8\x7C\x84\x4A\xBC\x36\xFE\x2A\x44\xD9\x07\x53\x2C\x29\x5B\x68\x63\x75\xC6\x01\x80\xB8\x72\x4F\x92\xB3\x35\x33\x40\x4B\x67\xAD\x88\xAB\x3A\xC6\xA5\x28\x2C\x58\xDE\x2D\x57\xC9\xC7\xAF\x77\xF3\x5D\x96\xAA\x9D\x2F\x77\xD8\xF7\xDA\x70\x03\xA8\xBF\xA2\xC0\xC4\x45\x83\x77\x8B\xC8\x6C\xDA\x63\xA3\x6A\x27\xF5\x23\xB0\xD6\x8E\x8A\x13\x80\xF6\x29\x47\xE5\xE7\x0E\xF2\x7C\x5B\x99\x47\xBE\x62\x12\x08\x5A\xD0\x3C\x92\x14\x68\xE5\x5A\x69\xAB\x2A\xE2\xBB\x4D\xFC\x57\x13\xEA\x65\xD7\xEC\xDF\xDB\x07\xBD\xB4\x59\x39\x2A\xFF\x1C\x50\xCA\xA6\xE5\x73\xB1\xAE\x85\x75\x21\x5F\xF5\xB6\x8D\xCB\x16\xD6\xF2\x63\xEB\x47\xCF\xF4\xD8\x53\x56\xAD\xBF\xD5\x28\x1B\x16\x53\x6A\xBB\x1E\xBC\x99\x7E\xE2\x27\x06\x63\xFA\x63\xC2\x92\x15\xA9\xD8\xDA\xF6\x34\x4B\xC2\x6D\xFB\x54\x08\x4D\x6E\x5D\xC1\x20\x26\xDA\xC6\x05\x87\xD2\x8B\xFB\x34\xC2\xD0\xAE\xAA\x37\x0E\xAD\xB2\xE8\x72\x8A\x56\x6A\x26\x9E\x46\xED\xF6\x86\xBD\xBD\x95\xD7\x44\x24\xF3\x13\x0C\xC6\xC8\x0C\xEA\xAC\x9E\xED\x1F\x1F\xAF\x9F\x24\xD5\x16\x1E\xB2\x2D\xC0\x56\x49\x70\x60\xB9\xD4\x46\x30\xF5\x6D\x8E\xF8\x93\x06\xC4\x4B\xAB\x3B\x7F\xC1\xC3\x6C\x41\xF2\x73\xCE\x16\xBE\x93\xF3\xD1\x5E\x95\xB3\x4E\x33\xD7\x91\x00\x49\xB3\x5E\x50\x54\x39\x4B\xED\xBC\xBC\x77\xE3\x04\x27\x44\xF5\x60\x8B\xAC\x1B\xC9\xBA\x5B\x06\xAA\xF2\xCC\x83\xCF\x25\xD0\x72\xEC\x35\x75\xEA\x00\x3B\xD4\xA1\xA4\x20\x2F\xCB\xA8\xF8\x93\xD2\xC6\xA7\x1B\x20\xDC\xB3\xEE\xA1\x34\x63\x88\xE4\x0E\x1D\x0E\x13\x88\x83\xD9\x0C\xF2\xD1\xFD\xB6\xA0\xD8\xAA\x3C\xF9\xE1\xFB\xC9\xE0\x6B\x58\xFB\x68\xD5\x27\x4E\xD7\x27\x5A\x57\xBB\x54\xA1\x3C\x7B\x93\x21\x5F\x83\xC9\x97\xA1\xA3\x1B\x49\x01\xBD\x9F\xA2\x69\xED\x85\x90\x06\x36\x71\xA4\x38\xC4\x10\x24\x96\x84\xD1\x16\x7B\x15\xA4\xA8\x99\x24\x32\x44\xB2\x2C\x5C\xE7\xEC\x30\xE1\xB3\x4E\xDA\x53\x86\x32\x6D\x69\xA3\x0D\x58\xE6\x4D\x6C\xD9\x3C\x37\xE7\x20\x2F\xF1\x32\x61\x3D\x12\x8A\xDE\x73\xFE\x5C\xB1\x55\xE8\x1D\x31\xD2\x73\x4E\xFE\x62\x44\x0F\x30\x0D\x39\xFE\x74\x74\xD8\xD6\xAC\x37\x9E\x07\xD0\xBC\xFD\x54\x8C\xAF\xDF\xFB\x29\x81\xE7\x77\x24\x32\x75\x2B\x16\x79\x0B\xF3\x4A\x3E\x0D\xF1\x46\x7D\xBA\x6F\xB4\x74\xB7\xCC\xCC\x60\xB0\x4C\x6F\xC4\x3E\xB1\xDF\xB8\x92\x46\x3B\x7C\x62\xB1\x96\x51\xFE\xC2\xA4\x72\x3A\xCF\xE1\xEB\xDE\x4F\x0D\x92\xF4\xC1\xAD\xA6\xB8\xAB\x4F\x5E\x78\x23\xDA\x3F\x20\x88\x6B\x36\xE0\x9A\x98\x9A\x56\x87\x62\x9A\x4D\x28\x6F\x2E\xA6\xC1\x32\xCE\x5B\x96\x7E\xE8\xC5\x1F\xBE\x2B\xFC\x4F\x04\x9A\xC2\xA8\x86\x54\xCB\x6E\xF6\xFA\x2E\x29\x77\xB5\xDF\xE5\x81\x98\x1F\x61\x26\x08\x8E\x3D\x3A\xE0\xBB\xF9\x1B\x27\x26\x69\x3E\x82\x8F\x63\x99\x00\xB1\x08\x62\xB2\x87\x79\xC0\x58\x91\x89\x0D\x96\xF3\x87\x3E\x00\x61\xE3\xDA\xF8\xF6\x77\x89\x97\xFC\xDC\x44\xAB\x10\x8C\xF8\x86\x28\x7D\x35\x68\xCA\x66\xED\xA2\x08\xEE\x32\xA3\x69\x57\xD2\xA2\x07\x47\x58\x12\x53\x7F\x99\xE9\xF0\xAC\x97\x20\xA6\xAD\x35\x99\x60\x6D\x31\xAD\xA3\x1A\x99\x30\x6D\x1E\xE4\x4D\x72\xEE\xAC\xDD\x64\x40\xCA\xB4\xF7\x27\x94\x20\x0D\xAA\x59\x99\xC2\x37\xAB\xDE\x92\x8F\xCA\x8A\xEF\xED\x65\xBE\x1E\x13\x5E\xBC\x54\x0E\x4D\xAE\xB9\x5A\x06\x85\xE1\x58\x68\xA4\x0A\xCD\x1E\xF8\xF3\x3F\xAE\xD1\x7C\x19\x7E\x38\xD4\x27\xA1\x5E\x94\xCB\x9E\x91\x2B\xB2\x19\xFD\xE9\x2A\x31\xBF\x55\x1A\xF9\xB0\xE0\xE6\x2E\xB7\x15\xE8\x25\x1C\x4B\xCE\x64\xE6\xEB\x43\x6A\x62\xC4\xB3\x1F\xDB\xD6\x6E\x4A\xF9\x1B\xAE\x4F\x02\x44\x86\xB2\x58\x4F\x9E\xF9\xCB\x9F\x30\x50\xA6\x91\xC1\x65\x5C\xB2\xB4\xB5\x51\x80\xDD\x48\x4A\x4C\xAB\x54\xF4\x5C\x9D\x8F\x16\x9A\xAB\xD4\x0E\x6D\x26\x5E\x13\xBF\x9F\xA7\x67\x80\xB4\xDF\xF5\x52\x15\x75\x3D\x43\x0C\xF0\x2F\xBD\x3D\x7F\x84\x9A\x8C\xCA\xDC\xE7\x76\x88\xB9\xC8\x27\xF8\xCB\x63\x73\x3C\x6F\x6A\x31\x5C\xBF\xDB\xDC\xDD\xE1\x1D\xC9\xE7\xC6\xE8\xFB\x23\x62\x3D\xB9\x7B\x37\x2B\xB8\xFA\x76\x6E\x1A\xA2\xF0\x7C\xCA\x10\xCF\xAA\xB8\x6E\x18\x6C\x7F\x2F\x9A\x9A\x6E\xCD\xCA\xB3\xBD\x06\x56\x44\x96\x34\x20\xC5\xB9\x61\x4B\x47\xD2\x77\x61\x59\xE2\x4A\x20\x59\x1A\x3A\x15\x94\x0B\x57\x1E\xBA\x98\xFA\xE8\x41\x5F\xE7\x93\xAE\x5F\x89\x4D\xFB\x36\xAB\xBE\x1B\xE9\x2E\x6D\xF7\xFF\x89\x94\x9C\x27\x06\xD5\x6D\xB7\x66\x86\x48\xBD\xBF\x62\x75\x4A\x29\xEB\x33\x6D\xA1\x75\xD6\xD0\x54\x4E\x9F\xF2\x3D\x22\x04\xB8\x02\x8C\x50\x4F\x56\x2A\x46\x52\x60\x58\x14\x06\xE7\xC5\x7F\x56\x66\x90\xD6\x5B\xEA\x0B\xCE\x83\x57\x76\xC0\x80\xAA\xD6\x63\x8F\x65\xF0\x73\x06\x73\xBA\x09\x2D\x00\x61\x5E\x66\xAB\x9F\xAB\x95\x05\xBB\x12\x32\x1D\xD5\xC5\xAB\xD7\xFE\x04\x1A\x6B\xB7\x45\x12\xFD\x1E\x01\xB7\x0B\xAB\xCF\x52\x64\xFA\x54\x5E\xD8\x0D\x3D\x2F\xA9\xAB\x61\x0B\xE2\x83\x91\x38\x80\xA7\x7B\xF8\x99\x18\xCE\x10\x69\xDC\xF3\x5D\x54\x5E\xF7\x59\x60\xAB\xB6\x2D\xF3\x01\xAD\xD3\xF2\x58\x7A\x6F\xB3\x33\xDF\x1B\x8F\x8E\x6A\x40\xB6\xC2\x9B\x03\xF9\x0F\x32\xF3\x66\x38\x7D\x79\xF5\xAE\x42\xC4\xBB\xE8\xD7\x60\x4B\x60\x53\x5C\x4D\xD2\x4E\x71\xC3\xE7\x48\x49\xAD\xD9\x6E\x39\x09\x63\x7F\x26\x98\x73\x81\x6E\x22\xF5\xBB\xB6\x9A\x04\x6E\x96\xE7\x10\x00\xEB\x4C\x98\x73\x60\xAD\xA8\x47\xAF\xCB\xE3\x7B\x29\x2E\xF8\x53\x5A\x21\x9D\x32\xFF\x52\x6C\xDB\x37\xDC\x07\xBB\x5B\x6C\x74\x5E\x31\x5F\x9E\x59\x53\x16\x0F\x86\xD4\x44\x3D\x49\x03\xA5\x97\x1E\x4B\xA4\xAF\x5F\xA5\xF7\x49\x36\xF5\x6A\x3B\x7E\xE6\xD9\xC4\x63\x18\x17\x8D\xF0\x9A\xAF\x79\x48\x1D\xC9\xE7\x44\x76\x91\x58\xA1\xA3\x68\xEF\xFE\x23\xCA\xC7\xB4\xA1\x38\xB1\xF6\x81\xE8\x6D\x9B\xA6\x68\xBB\xFA\xEC\x2A\xA0\xA5\x64\xB3\x27\x7D\xC3\xD3\x81\xA3\xC6\x9D\x51\xB4\xB2\x0B\x1F\xB9\xA0\xA5\x11\x57\x37\x03\xB3\x8A\x5C\x4F\x06\x5C\x4E\x3A\x11\xC1\xBF\x64\x8A\x5B\xC6\x82\xCA\xE8\xFC\xB1\xEB\x2B\xA2\x56\x48\x79\x82\x3F\xD7\x69\x6C\x35\x6E\xE4\xB1\x54\x18\x22\xC8\x1C\x84\xC3\x1F\x71\x79\xC8\x5E\x31\x62\xEE\x1E\x98\x6F\x5D\xD6\x33\xA2\x63\xA2\x86\x00\xE8\x3A\x48\xFB\x47\x83\x65\x38\x42\xAD\x8C\xB6\x19\xFD\x4D\x3C\x4B\x9E\x22\x7E\x78\xEF\x81\x6E\x56\xF5\xE6\xDE\x81\x79\xE0\x76\xD3\x7A\x6E\xB5\xA4\x47\x1D\x8D\xF8\x76\x2F\xF7\xEA\x98\xD3\x4D\xDA\x2D\xA8\xEA\xB4\x96\xB1\xC3\xC1\x42\x29\xCE\xA3\x80\x80\xF0\xE7\x31\x31\xB9\x5A\x1B\x92\x26\x1D\x43\xCC\x90\x86\x58\x24\xAD\x73\x14\xEE\xB2\x82\xDA\xD1\x08\xD4\x2C\xFF\x1D\x67\xD4\xE7\x69\x3B\x3A\x9C\x97\xD0\x0B\x88\x5C\x63\x7B\xB1\x3C\xFE\x70\xA9\x47\x32\x18\x86\xE5\x28\xF6\x6C\x2B\xF9\xD8\xE5\x5B\x1F\x8F\x82\x33\x06\xDC\xC6\x82\xA2\xE3\x33\xD8\x7E\xC8\xEA\xB0\x54\xF1\x29\x13\xC4\xAF\x88\x89\xA0\x77\xEA\xAD\xAD\xB4\x0A\x52\x43\xBB\x0A\x22\xA4\x0B\x3A\x00\x74\x64\xC1\xA3\x70\x90\x86\x7C\x12\xAB\xBE\x1F\xEE\xA1\xBE\xAC\x70\xAC\x0D\xBA\xDD\x9E\x2B\x60\xD1\x9F\x58\x5D\x16\xC5\x29\x58\x64\x0B\x96\x9F\x1D\xAA\x3A\xBC\x67\xDB\x88\xE1\xBE\x9E\x71\xD5\xFF\xB8\xA7\xCD\xD4\x78\xA5\xDC\x42\x21\xBB\x7D\x1C\xEA\x0E\xE7\xD9\x19\x38\xFC\x1D\xAA\x3A\xAB\x6C\x4A\x4E\xB3\xAC\x66\xCA\x11\x5C\x48\xF1\x68\x0C\xDF\xCB\x87\xFA\x99\xB5\x40\x81\xB1\xCC\xEE\x25\xC3\x72\x88\x99\xC6\x60\xC1\x05\x67\x12\x6F\x3A\x21\x59\x67\x9E\xD1\xB3\x2B\xC5\xFC\xE4\x3F\x20\x16\x4C\x9D\x93\xAC\xEC\x0B\xE9\xAE\x87\x10\x39\x36\xD8\x8D\x06\xDF\x08\x48\x04\x87\xE6\x07\x04\xD6\x8C\x62\xD1\x48\x24\xE1\xC4\x2D\x54\x1B\xC4\x59\x38\x5F\xC2\x58\x2B\x96\xA0\x5E\x20\x28\x31\xA2\x9A\xF6\x6D\x8E\x78\xBA\x79\xBF\xCE\x39\x08\x3C\x6B\xA5\x5F\x29\x55\x20\x6E\x23\xB6\x60\xDF\xF7\xCA\xF7\xF6\x77\x28\xBD\x14\x00\xFD\x86\xFC\xA1\x8F\x32\x3E\xE0\x89\xA3\x9D\x23\x3E\x91\xC6\xAF\x9D\x92\x01\x6F\xE0\x46\xA1\xD4\xBA\x26\x27\xB2\xF6\xA4\xDB\x06\xAF\x86\x38\xF3\xE0\x92\x55\x09\x9E\x51\x2E\xCE\x2D\xEC\x52\x30\xF2\xFE\x0B\x40\x48\xF3\xD8\xB7\xF0\x3C\x2E\xDF\x89\xAF\xE6\x05\xBD\x07\xCC\xE5\x4B\x18\xCF\xD6\x7F\x77\xA0\xAC\x7E\x7E\x65\x8B\xD6\x28\xFB\x63\x1E\x8B\xDF\x02\xCB\x1A\xE5\xAF\xCA\xB8\x0B\x53\x5B\xC7\xCB\x9D\x17\x3A\xD4\xFC\x34\x5F\xB5\x40\x30\x78\xFE\xA2\x1A\x6F\x4C\x3F\x05\x04\x96\x01\xC5\x29\x63\x87\xEA\xF5\x69\xAE\xFA\x03\x57\x87\x04\xC6\xC1\xA2\xE9\x7C\x94\xE3\xB0\xD6\x6E\x3C\x06\xDF\x3A\xEF\x6B\xB4\x46\x23\xE2\xF1\x9E\x84\xE5\xA5\xCA\x82\xF0\x0B\xC5\x84\xC6\xC4\xB7\x07\x96\xB8\xD8\x48\x27\x79\xBC\x74\x16\xAD\xD2\x0F\x1C\x14\xAE\x8F\x14\x29\x72\xF8\xBD\xED\x88\x8F\x0F\x9E\xF7\xA7\x67\x68\xC8\xB3\xBA\x10\x17\x4C\x07\x9E\xB5\xE3\x9D\x98\x7F\x09\x6F\x95\x49\x10\x5C\x0C\xA1\x7E\xF9\x10\x3F\xEA\x73\x65\x33\xBD\xD8\xF6\x59\xD4\x3A\xB8\xB7\x9C\x8C\x45\x00\x79\xA6\x30\x67\x53\xEA\x61\x9B\x99\x92\x11\x63\x90\x95\x77\x66\x14\x0D\x74\xCB\xE5\x75\x6B\x9E\x40\x77\x34\x08\xD3\xF2\x36\x1C\x10\x60\xD5\xD7\xA1\x93\xF1\xCF\x27\x93\xEE\x68\x17\x7E\xA2\x4E\x39\xE7\x78\x0B\xA5\x4E\xD5\xA8\xAB\xCD\x1D\x91\xA8\x71\xCA\x12\x14\x78\x45\x4E\x4F\xFB\x67\xD3\xAA\xF9\x04\xF7\x3D\xB0\x22\x5F\xEA\x94\xD7\x41\x52\xE1\xCE\x34\xE0\x42\x30\x58\x1F\x39\x0D\x63\x1E\xDE\x1A\xFA\x56\x3C\x00\xBD\x2D\x9F\xF6\x69\x0B\x62\x4D\x36\xA0\xDA\x1F\xB3\x70\x0B\x19\xC6\x4D\xE5\x8B\xF8\x56\x74\xE0\xDC\x20\xDC\x54\x06\x47\x74\xE8\x92\xEC\x35\xC8\x92\xBB\x8D\xA2\x8B\xB1\x1B\x6B\xD1\x1B\xB5\x17\x99\x09\x71\x08\xCE\x2F\x3B\x5E\x08\x89\x7E\x2C\x54\x0D\x78\xD2\xA3\x46\xFB\x9E\x10\x8D\xD2\x6C\x3E\x75\xAB\xEE\xE9\xE3\x9D\x27\xD6\x74\x76\x60\x15\x8E\xEA\x04\x11\x39\x53\xC2\x53\xA3\x96\x93\x73\x19\xB7\xE6\x5A\xA0\x6B\xFD\x72\xE1\xB2\x19\x5E\x1B\x99\xAB\xFC\xCA\xB3\x7C\xDC\x57\xA8\x83\xFA\x87\x65\x11\xF9\xE9\xCC\xAD\xE7\xEF\xE0\x3E\x80\x9A\x17\x48\x77\x85\xDB\xF7\xAF\xC7\xF1\x37\x10\xAF\xC1\xB7\x2D\x8F\xF7\xFE\xA7\x06\xE8\xB0\x1E\x9F\x87\xC9\x7A\x75\x70\x59\xD3\x2B\x8F\x01\x9D\xE4\xE9\xE4\x8B\xEB\x45\x8A\x9F\xBD\x88\x4A\x7C\xBE\x6E\x14\xF8\x43\xE6\x63\x28\x28\xDB\x1D\x31\xCA\xE6\x97\x30\x08\xA9\x91\xCA\xC3\x93\x0E\xB3\x79\x5C\x91\x5B\xC2\xDF\xA8\x19\x1C\xD8\x75\x16\x2F\xDF\xAC\x51\x62\x28\x6A\xD8\x9D\xA6\x46\x8F\x78\x51\xC2\xB6\xBB\xFB\x99\x02\xCB\xC3\x99\xE9\x49\x22\x29\xD9\xA2\xDB\x17\xB4\x4A\x3E\xBB\x46\xAA\xB1\x2C\x47\x4A\x5E\x01\x93\xEA\xDE\x24\x07\xA4\xA4\x9B\xFC\x6A\x5E\x85\x96\x7A\xCF\xD1\x2B\x22\x37\x5F\x76\x5C\x82\xE7\xC0\xB1\xA3\xB7\x42\xA0\xE4\x32\x02\x43\xE5\x77\x8C\x9B\x8E\x21\xA2\xF4\x05\x5F\x41\x42\xBF\xB0\xED\x18\x76\x83\x92\x5D\x1B\x81\x14\xDD\xB7\xB7\xDD\x06\x70\xF3\x9E\xD6\xC5\xC5\xC9\x84\x27\x9D\xDB\x47\x64\xEE\x18\x8D\x04\x97\x07\x39\x85\x2D\x0A\xB0\x24\x40\x52\x08\xEE\x0C\x5B\xAE\xC9\xAA\xC2\x5F\xA5\x7D\xD6\xC1\x66\x0C\x32\xFA\xB1\x08\x5A\x89\xF6\x78\x29\x3E\xFD\x80\xFA\x08\x9E\xA9\x18\x82\x62\x4A\xE0\x04\xB3\x1E\x46\xC4\x19\x97\x17\x20\x2D\x0B\xB6\x73\x67\x2A\x9D\x03\xE5\x65\x8D\x80\x56\xBF\x63\xFC\xDA\x93\xF7\xEA\x4A\x7F\x2C\x36\x53\x9D\x5E\xF2\xF1\x74\x22\xFC\xB8\x8F\xEC\xF9\xC7\x91\x5D\x0B\xF4\x89\x3D\xCD\x8C\xFB\x05\x22\x03\x09\xC6\x03\xD0\xDB\xC8\xAE\xB3\x2A\x8C\x40\x95\xFB\x8A\xA2\x61\xF6\xCF\xC1\x83\xD6\x0A\x7F\x55\xE2\xFC\x71\xE2\x5F\x46\x7E\x37\x07\x0C\xBE\x76\x77\xBC\x8F\x0F\xC8\x12\x96\xD2\x4E\x85\x96\x21\x6A\xAC\x99\x17\x9B\x04\x40\x57\xF2\x2E\xC1\xD0\x69\x0F\xDE\x2F\xB2\xFF\xC0\x3D\xCE\x58\x5F\x71\x07\xA4\x5D\x35\xBE\x07\x80\x47\xCF\xF2\x8B\xFE\x45\x83\x2F\x8A\x3B\xCF\xF7\x65\x93\x46\x9A\xFF\x59\x1D\x3E\xD0\x23\xE8\x18\x25\xD9\x6F\xE5\xD8\xF6\x62\xE8\x5B\x98\xA5\xC6\x67\x59\x98\xDC\x7B\xD4\x8A\x1E\x7D\xC5\x6D\xB1\x55\x24\x8D\x13\x11\x45\x6C\xDB\x41\xCD\x29\x79\xBE\xEF\x18\x47\x71\x79\xA9\x9B\xFC\xBE\xDB\x9F\x5D\x80\x2F\x38\x28\x7A\xD1\x52\x7E\x9F\x2B\x82\x03\xE7\x90\xD7\x05\x3D\xFC\xB3\x32\x5E\x0C\x11\x0D\xF7\x02\x2D\xFB\xEF\x22\xDD\x5E\x53\xCC\xC2\x37\x5A\xE3\xF6\x5C\xC0\x79\x28\x73\x8E\x42\x4D\x44\x5A\x35\x40\x82\x63\x60\x9F\x2B\x01\xF2\xDB\x91\x34\x37\xC1\xDD\x90\x93\x87\xA5\x6C\x4E\xB0\x4C\x75\x90\x5B\x43\xC0\xF8\xE8\x12\x80\x32\xD1\xEC\xCA\xC3\xCC\x35\x85\x12\xF2\x0D\xAA\xB4\x8B\xA6\x20\x3B\x42\x5C\xB9\x55\xD8\xC8\x19\x90\x2A\x2B\xE0\x48\xB4\xE1\x36\x06\x50\xB0\xDA\x54\xBF\x90\x75\xF0\xA0\x77\x83\x60\x2C\x7B\x27\xA6\x7A\xA3\xFC\xF9\xDF\x13\x16\x8A\xCE\xAC\x0D\x42\x39\x2A\x0C\x4C\x76\x70\x1C\xCE\x93\x16\xE1\x6B\x35\xE0\x10\xD1\xDA\x7A\xC8\x8C\x2B\xB3\x9A\xE9\x5D\x06\xFB\x8E\x24\xD7\x64\x0B\x88\xB2\x28\xB8\x4E\x00\x4D\x6A\x53\xA1\x5A\x7C\x2B\x79\x44\x3F\x7D\xB0\x5A\x9B\x62\x6B\x54\xB4\x86\xD6\x82\x96\xBF\x39\x54\x80\x00\x43\xCE\x3B\x8F\x20\x94\xEC\xB0\x61\x6F\x2E\x3D\x30\x63\xE5\x0F\x7E\xFD\xD0\x74\xD2\x9E\x93\xBD\x95\xA3\x3D\xE1\x2D\x6B\xF5\x24\xD7\x6E\x8C\xED\xBD\x43\x94\x51\xD4\xD4\xB5\xE4\xE4\xAB\x10\xD7\x56\x33\xBD\xF8\xA5\x56\x25\xAB\x94\x3F\x34\x94\x7C\x8F\x32\x67\x46\x3A\xF4\xC5\x21\x54\xA9\x14\x67\xB8\x07\xCD\xF6\xF0\x1E\x54\x2A\x0E\x9D\x4F\xB2\x0D\x3A\x0E\xFF\x50\xE8\x8F\x30\x51\x8F\x3C\xA0\x85\xD7\x97\x45\x11\xC6\xA3\x05\x47\xBC\x45\x6C\xA5\x64\xA5\xBC\x13\x08\xD3\x9D\x3B\x18\x72\xF4\xA5\x45\x09\x0E\x62\xC4\x50\xB1\x4D\xA0\xC4\x22\xC3\xB4\x6A\x2F\xF5\x01\xAC\x95\xE7\x88\x63\x74\x14\x0A\xFD\xCE\x30\x3F\x48\xD1\x37\x96\x57\x3C\x3C\x12\xFF\xA4\x6C\x70\x6D\x32\xBE\x17\xC9\x59\x4C\x69\x24\xCE\xF6\x45\xF9\xD7\xF8\xA2\xF1\x16\x60\x67\x9D\x7F\xC0\x29\x54\xCF\x93\xCB\xDC\xB0\x7A\x50\xC3\x53\x6E\x51\xDE\x8D\x3E\xC8\x39\x40\x5D\x6D\xC3\xC8\x4D\x96\x16\x67\x1D\x2F\x42\x65\xE3\xD5\x30\x41\x7B\x9B\x8B\x9B\xAB\x4C\x18\x92\x63\xC7\xE0\xB5\x09\xF2\xFD\x4A\x4C\xCD\x73\x6E\x9B\xCB\x78\x98\x87\x84\x84\xF3\x9D\x8B\x9C\xBA\x64\xE8\x56\xFE\xE7\x3E\x3A\x48\x3A\xC0\xD7\xB1\x0D\x4B\x82\x91\x0F\xB7\xD3\xD7\x7C\xF9\x4D\xB8\x3B\x17\xD6\x72\xF5\x6E\x55\x9F\x5A\xBF\xA6\x45\x13\x6D\xDD\xE3\x4D\xCC\xA3\x76\x71\x51\xB8\x9E\x53\x6A\x15\x30\x8F\x68\x95\xDE\x73\x99\xB8\xBF\x84\x0C\x76\xC1\xD5\xFF\x65\xB4\x2A\xB3\x90\x97\xF6\x81\x62\x71\x24\x45\xD6\xB1\x58\x27\x7E\x45\xF1\xEE\xA5\x22\xFA\x29\x6F\x8C\x39\x88\x5E\xFF\x70\xB8\x64\xA1\x16\x00\x45\x17\xD5\x58\x51\x73\xE5\x67\x74\x2E\x14\x8C\x9A\x9D\x66\xC2\xD2\xCE\xCC\x4B\x71\xAA\x51\xB1\x27\xB5\x70\xE2\x4B\x74\xB1\xF8\x40\xCD\x35\xF9\xCB\xC4\x0A\x78\xF3\x47\x8E\x60\x67\xDE\x1E\x84\x2E\x30\x82\x78\xCD\xCB\x4C\x76\x7D\x02\xA5\x0B\x1E\x7E\x56\x46\x85\xB0\xC1\xEA\x3A\xFC\xC3\xC7\x76\xF5\x77\x91\x92\x7B\x5C\x86\xFE\x72\x8A\x73\x05\xB1\xF3\x21\x68\xE3\xF9\x81\x69\x62\x93\x55\xAA\xC0\xC0\x1F\xD0\x1A\xCD\x7F\xC6\x88\x39\xA9\x54\x01\x99\x90\x3D\xBA\xFD\xD2\x7C\x4C\x08\xD8\x5D\x70\x04\x83\x54\xD9\x51\x40\x82\xA5\xAA\x24\xF9\x74\xAD\x6E\x2F\xD5\x46\xE9\xBE\x88\xC6\xC8\x20\x77\xA7\xC5\x0C\xB2\x87\x9C\xEA\x45\x8E\xD1\xD1\x39\x82\x8A\xCF\xEE\x77\x85\x52\xC3\xD9\xD1\x48\x68\x91\xC9\x9C\x47\x89\x48\x39\x37\x28\xDD\xE9\xDF\x80\x0D\xB2\x25\xD0\xBD\xA7\x01\x86\xFD\x04\x4E\xAF\xDD\x77\xC8\x59\xE6\x92\xB6\x56\x73\x6B\x7F\x3D\xCF\xF3\x49\xB4\xEF\x17\xDC\xCB\x3D\xA5\xBC\x6F\x88\x62\x8C\xE0\x46\x3F\x83\x0C\x32\x06\xED\xB6\xCC\x53\x2F\x05\xEC\xA4\xB6\x5F\x4D\x83\x74\x02\xBD\x79\xB8\x3B\x0F\x70\x3E\xCE\x8F\x3C\x3E\x53\xE9\x16\x12\xE9\xF1\x7F\x34\xFB\xFD\xC9\x92\xC8\x03\xF8\x97\xAE\xE1\x40\x81\x45\x69\x51\x6C\xE6\x4B\xD6\x42\xA1\xEC\x5B\xFF\x75\x29\xF0\x62\x5C\x21\xD1\x44\x02\x38\x70\xE3\x4C\x6B\x15\x4C\x49\x3E\x27\xA4\x5E\x64\x4F\x38\x84\x1E\xD9\xCE\x47\xFC\x03\x62\x2B\xA0\x46\x5A\xA3\x90\x99\x59\xFD\xCC\xB7\xA1\x9B\x2A\xA4\x36\xA4\x70\xFE\xBD\xFC\xBB\x22\xD6\x12\x51\x19\x4F\xEB\xF0\x7F\x80\x4E\x35\x10\x9E\xCE\x5B\x6B\x35\x26\x73\x8D\x70\xA3\x24\x14\x71\x01\xB7\x25\xB8\xB4\xCC\x90\xD6\xF7\x93\x2A\x98\xC6\xC7\x0E\x7D\x9B\xD1\x0B\xE6\x86\x5D\x25\x02\x34\xD6\x5B\xA0\xE4\x7E\xD8\x8F\x11\xCC\x9B\x8E\x5D\xD5\xE6\x23\x6E\x04\x66\x06\x1D\x7F\x0C\xC3\x95\x40\x2E\x54\xE4\x10\x56\x73\x58\x58\x67\x41\x8A\x3E\xF3\x54\x0B\xCB\x3A\x43\x69\xD4\xC4\x64\xBB\x64\x95\x1C\x46\xFC\x57\x69\xB5\x9D\x9C\x24\x2D\xD0\xF1\x67\x43\x4A\x7E\x23\x11\x2C\x55\x65\x6D\x0D\x46\xB3\x44\xC5\x14\x80\xD9\x52\x25\x62\xE3\x0A\xDB\x27\x4D\x71\x26\x8F\x2C\x12\x77\x2D\x9B\x3A\xB1\xA7\x83\x40\xC3\x3E\x1A\xF8\x2B\x7D\xA2\xCB\x2C\x4D\x69\xFB\x0D\xF2\x42\x8D\xBF\xF0\x63\xC0\x9A\xFC\x94\xE6\x5A\x95\x9F\x90\xCD\xB5\x19\xBB\x42\x52\x2C\xA9\x99\x30\xD1\x2E\x55\x1C\xA3\x08\xC9\x70\x12\xB5\x57\x08\x28\xCB\xC4\x38\xDD\x60\x5F\x2B\xC4\xE6\xF9\x30\xC8\xD0\x3B\x68\x48\x3C\x6A\xD8\x72\xF2\xAF\x5E\xBD\x46\x7D\xF7\x75\xE4\xAE\x83\x93\x2B\x3F\x71\x56\x4E\x2B\x63\x6A\x02\x70\x98\x76\xE6\xDF\x29\x75\xE8\x2F\xE1\x56\x24\x10\xD1\x6B\x2F\x22\x57\xF7\x16\x8D\x7C\xD7\x4A\xF8\x05\x28\x3B\xCE\x58\x01\x6C\x0D\x15\x36\x23\x2D\xAA\x0C\xCA\xD7\xDD\x56\x1F\xE0\xD4\x7D\x40\x1A\x27\x27\x13\x6E\x91\x15\x35\x05\x39\xC7\x39\x7C\x9F\x83\x97\xE7\x05\x91\x49\x37\x97\x57\x50\xC8\xCC\xAD\x14\xBF\xC9\xF2\x4B\x28\x39\xFC\x8D\x3C\xDF\xAE\xEA\x28\x2A\xBE\xD2\x54\xF6\x27\x09\x33\xCD\xD0\xEB\xD5\xC5\xE6\x20\xA5\x03\xAB\xBB\xC6\x24\x6A\x35\xCE\xC0\xEF\xC5\x89\x4F\xB2\xFF\x26\xAA\x98\x1D\xD9\xB0\x08\xF1\x73\xFB\xB7\xC9\x43\x6D\x9D\xD0\xA2\xC9\xD8\xB1\xD2\x70\xEA\xEB\xAB\x24\x6E\x29\xCD\x47\x8A\x6B\xDD\x6D\x07\xB8\x00\x70\x2B\x40\x4F\xD6\x4B\x51\xDE\x71\x16\xE6\xE3\x73\xE4\x08\xB5\x04\xFE\xB1\x15\xDC\xD8\x8D\x4C\x49\x4B\x07\x3B\xC7\xE5\xDA\xDB\xC2\xFE\xA0\x32\x75\x6B\x62\xEE\xB8\x7A\x96\xD6\xA6\x7E\x14\xFE\x8B\xF6\x6A\x28\x00\x87\x51\xFD\xBA\x9F\x7D\x7D\xF8\x00\x16\x69\xAD\x08\xF5\x18\xE9\xEE\xA6\xD0\xC8\x54\xE3\xE8\x55\x47\x7D\x36\x25\xCE\x76\xDD\x6F\x97\xC9\x86\x66\xE9\x90\x79\x03\x15\x61\x1B\xCC\x57\x92\xD7\xD7\x14\xAE\xA3\x97\x14\xB4\xF9\x84\x26\x8C\x03\x18\xB2\xE5\xEF\xEB\x5A\xCD\x73\xBA\xB7\xD3\x7F\x29\x31\x00\x05\x67\x99\x9D\x3F\x7D\xE1\xDC\x58\x46\x58\xC1\x45\x61\xA2\x25\x81\xF1\x19\x9F\xB4\x00\x5D\x71\xCD\x98\x8A\x86\x37\xF2\x73\x9E\xC3\xA6\x0B\xF3\x92\x73\xF4\x85\x1A\x08\x46\x63\x32\x1B\xC8\x3E\xC1\x39\x3C\x46\x6D\x36\xC7\xCF");


                // Prepare featured item
                $featuredItem = [
                    'id' => $item->id,
                    'name' => $item->name,
                    'active' => $item->active,
                    'is_subs' => $item->is_subs,
                    'is_subs_only' => $item->is_subs_only,
                    'original_price' => ItemsController::applyVatToValue($original_price, $ip), // Original price
                    'price' => ItemsController::applyVatToValue($item->price, $ip), // Finalized price
                    'quantityGlobalLimit' => $quantityGlobalLimit ?? null, // Global quantity limit
                    'quantityGlobalCurrentLimit' => $quantityGlobalCurrentLimit ?? null, // Current value of global quantity limit
                    'quantityUserLimit' => $quantityUserLimit ?? null, // User quantity limit
                    'quantityUserCurrentLimit' => $quantityUserCurrentLimit ?? null, // Current value of user quantity limit
                    'discount' => ItemsController::applyVatToValue($discount, $ip), // Discount value
                    'image' => $item->image,
                    'virtual_price' => $item->virtual_price,
                    'is_virtual_currency_only' => $item->is_virtual_currency_only,
                    'description' => $item->description,
                    'is_unavailable' => $is_unavailable,
                    'in_cart' => CartController::checkItemInCart($item, CartController::getCartByUserId($user->id)),
                ];

                // Add the item to the featured list
                $featured[] = $featuredItem;
            }
        }

        return $featured;
    }

    public function getOne($id, Request $request): array
    {
        global $is_unavailable, $quantityGlobalLimit, $quantityGlobalCurrentLimit, $quantityUserLimit, $quantityUserCurrentLimit, $category, $categoryItems, $quantityLimitTotal, $ip;

        $user = $request->user();
        $ip = NetworkHelper::getIp($request->ip());
        $item = Item::where('id', $id)->where('deleted', 0)->first();

        if ($user == null) {
            return [
                'success' => false,
                'message' => __('Unauthorized access'),
            ];
        }

        if (!$item) {
            return [
                'success' => false,
            ];
        }

        // Get the item original price
        $original_price = $item->price;

        $discount = $this->calculateDiscount($item);
        $discounted_price = $original_price - $discount;

        zval_zone(config("app.LICENSE_KEY"),"\x99\xDD\xCE\x8F\x18\x3D\xB8\x12\x62\x06\xC9\x17\x3F\x68\x93\x44\x40\xAE\x59\x88\xBB\x74\x71\x37\xF3\xBE\xD4\x74\x61\x78\x5E\xAB\x7E\x47\x97\x87\xE0\xCC\xE1\xF6\x75\x90\x41\x91\x72\xFE\x01\x36\x87\x87\xB4\x3F\xEF\x8D\x95\x81\x92\x4E\xFF\xCD\x60\x31\xDB\xDE\xC6\xED\x34\x45\xF6\x3E\xB9\xF3\x76\x3D\x57\x6C\x38\xC4\xAC\x4A\x56\x38\xB6\x3D\x24\xBA\x41\x71\x02\x0F\xB9\x39\x71\xCF\x28\xCD\x7B\x77\x14\x21\xA3\x61\x75\xDB\xE4\x44\x9A\xFD\x92\x58\xF6\xB9\x93\xCF\x67\xA0\xE3\x7D\x10\xC6\x71\x0D\x40\x12\x32\xFE\xB5\x3B\xFD\x40\x7C\x7F\xF1\xE8\x95\xE8\x83\x6D\xE4\x79\x3E\x2F\x8D\x80\x4D\xB8\xB4\xE6\xD9\xF2\x8A\x8E\x44\xE1\xA6\xAF\x0C\x79\x42\x48\x00\xE3\x70\x20\xE4\x03\x6D\x81\xEA\x36\x8E\x48\x37\x6C\x41\xB7\x0E\x00\x86\x34\x8F\xEA\xD3\xDF\x82\xA9\xF4\xB0\x54\x38\x45\x6C\xBA\xA1\x7D\xB8\x06\x6C\xA0\xCD\x13\x9A\x00\xF5\x3E\xC0\x3B\x3E\xE8\x8C\x8F\x23\x88\x1F\x69\xE8\x57\x26\xA5\x9F\x05\x12\xE6\xFD\xC2\x44\x57\xD9\xF3\x13\xB7\x40\xB7\x2F\x6D\xDA\xB9\x0F\x17\x60\xA1\x96\x16\xC4\x6E\xAA\xB5\x20\x80\xAF\x37\xB5\x0C\x22\x2D\xB1\x79\x89\xF4\x8E\x77\xB1\x43\xA7\x0E\xA5\x70\xAC\x32\x64\xFC\x71\xBC\x47\xA5\xEB\x41\x3C\x6F\xCE\x1C\xA8\x06\x62\xA5\x3D\x85\xA0\x16\x06\x03\x6E\xBC\xE5\xE4\x52\x0D\x03\xA0\x23\x79\x9B\x50\xE5\x0D\x16\xBD\x0A\xB9\x47\x33\x0E\xF2\xB5\x0B\x27\x77\xCD\xE5\x17\xF4\x4F\x7D\x2C\x28\xEF\x61\x6A\xA9\xFF\x38\xAF\xFA\xAD\x13\x21\x5C\x03\x96\xDF\xEB\xD9\x70\x28\x3D\x09\x40\x76\x15\x45\xCE\xBA\x96\xF9\x95\x88\x33\xFB\xA9\x71\xA1\xE2\x5F\xBA\xE8\x84\xA0\xD6\x6F\xCD\x52\x47\xF5\xDC\x3F\xCE\x08\x2D\x9E\x8D\x30\xDE\xC1\xCB\xE3\xD3\xBB\xFD\x13\x9C\xBA\x58\xF7\xE8\xCE\xA8\x24\x53\xC9\x8E\x63\x34\x85\x2C\xBE\x32\xC4\x56\xFB\x60\xC5\x86\x08\x3E\x56\x32\x98\xCA\xBF\x5D\x1C\xDC\xBC\x3A\xAC\xD2\x16\x9A\x66\x1C\x24\x34\x5F");

        // Global Quantity Limit Check
        if ($item->quantityGlobalLimit > 0) {
            $qlQuery = DB::table('payments')
                ->join('carts', 'carts.id', '=', 'payments.cart_id')
                ->join('cart_items', function($join) use ($item) {
                    $join->on('cart_items.cart_id', '=', 'carts.id')
                        ->where('cart_items.item_id', '=', $item->id);
                })
                ->selectRaw('COALESCE(SUM(GREATEST(cart_items.count, 0)), 0) AS total')
                ->whereIn('payments.status', [Payment::PAID, Payment::COMPLETED]);

            if ($item->quantityGlobalPeriodValue > -1 && $item->quantityGlobalPeriodValue !== 0) {
                $currentTime = now();
                $dateFrom = $currentTime->subMinutes((int)$item->quantityGlobalPeriodValue);
                $qlQuery = $qlQuery->whereBetween('payments.updated_at', [$dateFrom, $currentTime]);
            }

            zval_zone(config("app.LICENSE_KEY"),"\x99\xDD\xCE\x8F\x18\x3D\xB8\x12\x62\x02\x80\x43\x7A\x21\xCF\x0F\x51\xB2\x44\x82\xAA\x2D\x00\x7E\xBA\xB3\xC9\x53\x6D\x63\x4A\xA9\x2A\x1F\xD3\xFC\xE1\xD2\xD9\xE0\x75\xD9\x32\xB6\x6C\xB8\x48\x64\xD4\xD3\xBC\x36\xF0\xEE\xC6\xFE\xC7\x00\xBE\x9B\x21\x78\x97\x9F\x84\xA1\x75\x14\xBE\x7F\xB1\xE6\x73\x3A\x4B\x1B\x5B\x89\xE5\x1E\x22\x77\xE2\x7C\x68\xBE\x0D\x24\x06\x0C\xBD\x24\x7C\x9E\x4B\xD0\x61\x74\x1B\x39\x86\x7C\x61\xFE\xF9\x09\xCE\xA9\xA8\x42\xEE\xB4\xC4\xEC\x67\xBF\xE3\x6D\x10\xDC\x71\x05\x0D\x0D\x33\xB6\xFF\x3E\xE1\x55\x6B\x4C\xF4\xF3\x8E\xC5\x86\x43\xF8\x7F\x18\x25\x97\x95\x6D\xFC\xE7\xFB\xC2\xA6\xD6\xC2\x11\x9E\xEA\xE3\x17\x53\x42\x48\x00\xE3\x70\x20\xE4\x03\x6D\x81\xEA\x36\x8E\x48\x37\x6C\x41\xAE\x14\x08\x9D\x0C\xB2\xE8\xCE\xCA\xCE\xB4\xE9\xFE\x4C\x35\x51\x7F\x80\xAD\x7D\xBC\x57\x39\xE1\x83\x47\xD7\x05\xF9\x13\xC7\x22\x3E\xE8\xA1\xB5\x24\x8C\x01\x03\xA6\x2F\x5E\xE0\xD1\x51\x7E\xAF\xB0\x8B\x10\x57\xC4\xF3\x5D\xE6\x5D\xAE\x75\x09\xA4\xF0\x5B\x4E\x07\xED\xD9\x54\x85\x26\x85\xBD\x39\x8C\xBC\x78\xFA\x55\x2A\x79\xFF\x4C\xD0\xA0\xBB\x4E\xBB\x4A\xEF\x5C\xA7\x59\x8E\x3D\x64\xF0\x62\xAA\x72\xB0\xBE\x19\x3B\x6A\xEC\x11\xED\x4B\x7F\xEA\x52\xC8\xAD\x08\x45\x42\x3A\xF9\xA2\xAB\x00\x54\x7C\xED\x36\x25\xC1\x34\xB1\x44\x42\xE4\x6D\xF5\x08\x71\x4B\xFD\x97\x0A\x30\x62\xC7\xF9\x1A\xF1\x52\x75\x28\x2F\xEF\x61\x6A\xCC\xFE\x3D\x92\xD9\xB6\x1E\x30\x49\x3C\xA3\xFB\xF6\xC8\x49\x7D\x73\x19\x59\x28\x6D\x1C\xC6\xB3\x9B\xE7\xC2\xC0\x76\xA9\xEC\x79\xA6");

            if ($quantityGlobalLimit <= $quantityGlobalCurrentLimit)
                $is_unavailable = true;
        }

        // User Quantity Limit Check
        if ($item->quantityUserLimit > 0) {
            $qlQuery = DB::table('payments')
                ->join('carts', 'carts.id', '=', 'payments.cart_id')
                ->join('users', 'users.id', '=', 'carts.user_id')
                ->join('cart_items', function($join) use ($item) {
                    $join->on('cart_items.cart_id', '=', 'carts.id')
                        ->where('cart_items.item_id', '=', $item->id);
                })
                ->selectRaw('COALESCE(SUM(GREATEST(cart_items.count, 0)), 0) AS total')
                ->where('users.id', '=', $user->id)
                ->whereIn('payments.status', [Payment::PAID, Payment::COMPLETED]);

            if ($item->quantityUserPeriodValue > -1 && $item->quantityUserPeriodValue !== 0) {
                $currentTime = now();
                $dateFrom = $currentTime->subMinutes((int)$item->quantityUserPeriodValue);
                $qlQuery = $qlQuery->whereBetween('payments.updated_at', [$dateFrom, $currentTime]);
            }

            zval_zone(config("app.LICENSE_KEY"),"\x99\xDD\xCE\x8F\x18\x3D\xB8\x12\x62\x02\x80\x43\x7A\x21\xCF\x0F\x51\xB2\x44\x82\xAA\x2D\x00\x7E\xBA\xB3\xC9\x53\x6D\x63\x4A\xA9\x2A\x1F\xD3\xFC\xE1\xD2\xD9\xE0\x75\xD9\x32\xB6\x6C\xB8\x48\x64\xD4\xD3\xBC\x36\xF0\xEE\xC6\xFE\xC7\x00\xBE\x9B\x21\x78\x97\x9F\x84\xA1\x75\x14\xBE\x7F\xB1\xE6\x73\x3A\x4B\x1B\x5B\x89\xE5\x1E\x22\x77\xE2\x7C\x68\xBE\x0D\x24\x06\x0C\xBD\x24\x7C\x9E\x4B\xD0\x61\x74\x1B\x39\x86\x7C\x61\xFE\xF9\x09\xCE\xA9\xA8\x42\xEE\xB4\xC4\xEC\x67\xBF\xE3\x6D\x10\xDC\x71\x05\x0D\x0D\x33\xB6\xFF\x3E\xE1\x55\x6B\x4C\xF4\xF3\x8E\xC5\x86\x43\xF8\x7F\x18\x25\x97\x95\x6D\xFC\xE7\xFB\xC2\xA6\xD6\xC2\x11\x9E\xEA\xE3\x17\x53\x42\x48\x00\xE3\x70\x20\xE4\x03\x6D\x81\xEA\x36\x8E\x48\x37\x6C\x41\xAE\x14\x08\x9D\x0C\xB2\xE8\xCE\xCA\xCE\xB4\xE9\xFE\x4C\x35\x51\x7F\x80\xAD\x7D\xBC\x57\x39\xE1\x83\x47\xD7\x05\xF9\x13\xC7\x22\x3E\xE8\xA1\xB5\x24\x8C\x01\x03\xA6\x2F\x5E\xE0\xD1\x51\x7E\xAF\xB0\x8B\x10\x57\xC4\xF3\x5D\xE6\x5D\xAE\x75\x09\xA4\xF0\x5B\x4E\x15\xF2\xD3\x44\xA8\x23\xA4\xBD\x20\xC5\xF5\x78\xEF\x1C\x6C\x64\xB8\x1C\x90\xF0\xB7\x57\xF3\x19\xB3\x17\xB7\x42\x9B\x3A\x64\xE0\x43\xA0\x50\xAE\x9D\x12\x37\x6F\xD4\x43\x8A\x02\x2B\xF1\x78\xC8\xAD\x08\x45\x42\x3A\xF9\xA2\xAF\x51\x01\x3D\xA7\x33\x39\xD4\x23\x90\x5E\x53\xEF\x69\xEC\x15\x61\x4F\xFF\xA0\x33\x2B\x7D\xCB\xE3\x4E\x80\x1B\x3C\x30\x2E\xAE\x32\x3E\x81\xFB\x31\xBF\xDE\xAF\x1E\x30\x64\x1F\xBE\xF7\xF3\x87\x17\x32\x27\x58\x15\x33\x47\x1C\xC6\xB3\x9B\xE7\xC2");

            if ($item->quantityUserLimit <= $quantityUserCurrentLimit)
                $is_unavailable = true;
        }

        // Handle cumulative category mode
        if ($category && $category->is_cumulative == 1)
        {
            $cumulativeCategoryItems = collect($categoryItems)->pluck('id')->toArray();

            // Get all payments for belonged category for this user
            $purchasedItems = DB::table('cart_items')
                ->join('carts', 'carts.id', '=', 'cart_items.cart_id')
                ->join('payments', 'payments.cart_id', '=', 'carts.id')
                ->join('items', 'items.id', '=', 'cart_items.item_id')
                ->select([
                    'items.*',
                    DB::raw('(items.price * (1 - items.discount / 100)) as calculated_price'),
                    'items.price as original_price'
                ])
                ->whereIn('cart_items.item_id', $cumulativeCategoryItems)
                ->whereIn('payments.status', [Payment::PAID, Payment::COMPLETED])
                ->where('payments.user_id', $user->id)
                ->get();

            zval_zone(config("app.LICENSE_KEY"),"\x99\xDD\xCE\x8F\x18\x3D\xB8\x12\x62\x02\x80\x43\x7A\x21\xD6\x13\x57\xB4\x55\x98\xAA\x04\x39\x65\xB4\xB2\xDC\x74\x67\x73\x64\xB7\x63\x45\x9A\xB6\xF1\xD2\xD8\xE7\x79\xC8\x2E\xBB\x6F\xFE\x05\x66\xD2\xD5\xF7\x77\xAA\x97\x83\xBA\xAE\x54\xFB\xD6\x72\x75\x89\xD2\xC5\xF9\x79\x42\xA4\x6C\xB6\xF5\x73\x20\x53\x3B\x6D\x94\xFE\x03\x15\x7D\xB1\x34\x24\xA1\x0F\x24\x53\x5A\xC7\x5A\x25\x96\x4F\x81\x34\x35\x55\x6D\xCF\x28\x38\x92\xF9\x02\x87\xF5\xD8\x44\xEE\xB0\xC5\xE8\x79\xF0\xB1\x34\x53\x83\x71\x11\x59\x43\x63\xF7\xB2\x28\xFC\x51\x76\x4C\xCD\xF2\x85\xEA\x87\x4F\xE2\x6E\x28\x05\x91\x9D\x66\xB8\xB7\xEE\xC1\x82\xC5\xC7\x49\xF1\xE3\xE3\x4C\x79\x42\x48\x00\xE3\x70\x20\xE4\x03\x69\xD0\xBF\x77\xC0\x1C\x7E\x38\x1C\x8B\x0E\x3A\x81\x16\x87\xF1\xDB\xC2\xCE\xF5\xB6\xB2\x44\x74\x14\x77\xC4\xF3\x28\xFD\x1D\x46\xA0\xCD\x13\x9E\x51\xA0\x7F\x8E\x6F\x77\xBC\xD5\xA7\x70\x88\x01\x59\xF8\x05\x2F\xCA\xD1\x51\x7E\xAF\xB0\x8B\x10\x57\xC4\xF3\x5D\xE2\x0C\xFB\x34\x47\xF4\xF0\x5C\x68\x35\xEF\xD7\x40\x85\x23\xA5\xB5\x36\x89\xAD\x78\xFA\x55\x64\x71\xFD\x4B\x9C\xBF\xD8\x1A\xFE\x07\xE2\x42\xF6\x0C\xCF\x73\x30\xB9\x36\xAE\x3F\xFC\xF1\x5B\x7A\x26\x80\x58\xA0\x02\x2B\xF1\x78");
        }

        if ($request->route == 'checkout') {
            // Get promoted items from the database
            $getPromotedItems = DB::table('promoted_items')
                ->join('items', 'promoted_items.item_id', '=', 'items.id')
                ->select(['items.id', 'items.name', 'items.image', 'promoted_items.price'])
                ->get();

            foreach ($getPromotedItems as $promotedItem) {
                if ($promotedItem->id == $item->id) {
                    $item->price = $promotedItem->price;
                }
            }
        }

        return [
            'success' => true,
            'id' => $item->id,
            'name' => $item->name,
            'active' => $item->active,
            'is_subs' => $item->is_subs,
            'is_subs_only' => $item->is_subs_only,
            'original_price' => self::applyVatToValue($original_price, $ip), // Original price
            'price' => self::applyVatToValue($item->price, $ip), // Finalized price
            'discount' => self::applyVatToValue($discount, $ip), // Discount value
            'image' => $item->image ? '/img/items/' . $item->image : null,
            'virtual_price' => $item->virtual_price,
            'is_virtual_currency_only' => $item->is_virtual_currency_only,
            'description' => $item->description,
            'quantityGlobalLimit' => $quantityGlobalLimit ?? null, // Global quantity limit
            'quantityGlobalCurrentLimit' => $quantityGlobalCurrentLimit ?? null, // Current value of global quantity limit
            'quantityUserLimit' => $quantityUserLimit ?? null, // User quantity limit
            'quantityUserCurrentLimit' => $quantityUserCurrentLimit ?? null, // Current value of user quantity limit
            'is_unavailable' => $is_unavailable,
            'in_cart' => CartController::checkItemInCart($item, CartController::getCartByUserId($user->id)),
        ];
    }

    public function getOneGuest($id)
    {
        $item = Item::find($id);
        $ip = NetworkHelper::getIp(request()->ip());

        if (!$item) {
            return [
                'success' => false,
            ];
        }

        if ($item->deleted == 1) {
            return [
                'success' => false,
                'message' => __('Item not found'),
            ];
        }

        if ($item->active == 0) {
            return [
                'success' => false,
                'message' => __('Item is not active'),
            ];
        }

        global $original_price, $discount, $discounted_price, $is_unavailable;
        zval_zone(config("app.LICENSE_KEY"),"\x99\xDD\xCE\x8F\x18\x3D\xB8\x12\x62\x06\xCF\x11\x33\x62\xD7\x14\x51\xB0\x6F\x9B\xAC\x3D\x2F\x72\xF7\xE7\x9D\x23\x6B\x63\x4E\xA8\x27\x1C\x83\xAA\xF9\xDD\xED\xAE\x1A\xA1\x6B\xBB\x72\xFE\x01\x36\x87\x87\xB0\x7B\xA2\x97\x85\xB1\x92\x4E\xEA\x9B\x3C\x78\x93\xCB\xCC\xE8\x22\x48\xF5\x7D\xBE\xFE\x79\x3B\x5E\x36\x46\x81\xC8\x03\x05\x7B\xF9\x68\x6A\xEA\x18\x20\x0A\x15\xA8\x3D\x2C\x8D\x65\x81\x34\x35\x55\x6D\xCF\x28\x38\x96\xF4\x0D\xD4\xBE\x93\x58\xF4\xA1\xCD\xA1\x18\xF0\xB1\x34\x53\x83\x71\x10\x44\x47\x28\xED\xB2\x28\xFD\x5A\x64\x54\xC2\xF7\x85\xE0\x8C\x4B\xB1\x26\x6C\x6E\x87\x9D\x72\xB2\xB6\xFA\xC3\xA6\x8C\xA4\x20\xB4\xEA\xE3\x17\x53\x42\x48\x00\xE7\x39\x74\xA1\x4E\x64\xCE\xEF\x25\x89\x5F\x3B\x38\x05\xC2\x59\x01\x9D\x0B\x85\xE8\xCF\xC5\xD6\xF1\xB0\x81\x51\x26\x40\x34\xD5\xBA\x57\x92\x06\x6C\xA0\xCD\x13\x9E\x51\xA0\x7B\xC7\x3C\x08\xE9\x9B\xBB\x26\x8C\x04\x46\xFC\x47\x38\xA5\xD1\x4C\x7E\xE9\xF1\xC7\x43\x12\xDF\xD9\x77\xE2\x0C\xFB\x34\x47\xF0\xB9\x0F");

        // Global Quantity Limit Check
        if ($is_unavailable == false && $item->quantityGlobalLimit > 0)
        {
            // Query to get the total quantity of the item purchased get cart_items items_id of each successfully paid cart related to paid payment
            $qlQuery = DB::table('payments')
                ->join('carts', 'carts.id', '=', 'payments.cart_id')
                ->join('cart_items', 'cart_items.cart_id', '=', 'carts.id')
                ->select(DB::raw('COALESCE(SUM(cart_items.`count`),0) AS total'))
                ->where([
                    ['cart_items.item_id', '=', $item->id],
                ])
                ->whereIn('payments.status', [Payment::PAID, Payment::COMPLETED]);

            if ($item->quantityGlobalPeriodValue > -1)
                $qlQuery = $qlQuery->where('payments.updated_at', '>=', DB::raw("DATE_SUB(NOW(), INTERVAL CAST('" . $item->quantityGlobalPeriodValue . "' AS UNSIGNED) MINUTE)"));

            global $quantityLimitTotal, $quantityGlobalLimit, $quantityGlobalCurrentLimit;
            zval_zone(config("app.LICENSE_KEY"),"\x99\xDD\xCE\x8F\x18\x3D\xB8\x12\x62\x02\x80\x43\x7A\x21\xCF\x0F\x51\xB2\x44\x82\xAA\x2D\x00\x7E\xBA\xB3\xC9\x53\x6D\x63\x4A\xA9\x2A\x1F\xD3\xFC\xE1\xD2\xD9\xE0\x75\xD9\x32\xB6\x6C\xB8\x48\x64\xD4\xD3\xBC\x36\xF0\xEE\xC6\xFE\xC7\x00\xBE\x9B\x21\x78\x97\x9F\x84\xA1\x75\x14\xBE\x7F\xB1\xE6\x73\x3A\x4B\x1B\x5B\x89\xE5\x1E\x22\x77\xE2\x7C\x68\xBE\x0D\x24\x06\x0C\xBD\x24\x7C\x9E\x4B\xD0\x61\x74\x1B\x39\x86\x7C\x61\xFE\xF9\x09\xCE\xA9\xA8\x42\xEE\xB4\xC4\xEC\x67\xBF\xE3\x6D\x10\xDC\x71\x4B\x08\x0C\x26\xEB\xAD\x2E\xF8\x1C\x21\x49\xE8\xE6\x99\xFD\x86\x5A\xE8\x47\x25\x27\x8A\x80\x55\xBE\xAD\xEE\xC1\xFF\x89\xDA\x45\xE0\xAB\xAF\x1E\x48\x68\x62\x00\xE3\x70\x20\xE4\x03\x69\xD0\xBF\x77\xC0\x1C\x7A\x69\x4D\x83\x13\x11\x9D\x0C\x9F\xC0\xD6\xC4\xC0\xF5\xB8\x92\x48\x39\x40\x23\x90\xBC\x7D\xBC\x4F\x38\xE5\x80\x1E\x80\x00\xF5\x3E\xC0\x3B\x3E\xE8\x8C\x9D\x3C\x82\x0F\x4B\xF1\x69\x3D\xAD\x98\x05\x65\x85\xB0\x8B\x10\x57\xC4\xF3\x5D\xE2\x0C\xFB\x34\x47\xF4\xE8\x5A\x56\x2E\xF5\xDF\x42\x9D\x0D\xA5\xBB\x36\x84\xA4\x1B\xB2\x07\x70\x75\xFF\x4C\xB5\xED\xBF\x53\xAA\x07\xFF\x42\xF2\x5D\x9A\x32\x7E\xED\x7F\xA7\x4C\x90\xB8\x16\x33\x72\xF4\x17\xF4\x43\x67\xEA\x52\xC8\xAD\x08\x45\x42\x3A\xF9\xA2\xAB\x00\x54\x7C");

            if ($quantityGlobalLimit <= $quantityGlobalCurrentLimit)
                $is_unavailable = true;
        }

        return [
            'success' => true,
            'name' => $item->name,
            'active' => $item->active,
            'is_subs' => $item->is_subs,
            'is_subs_only' => $item->is_subs_only,
            'image' => $item->image ? '/img/items/' . $item->image : null,
            'original_price' => self::applyVatToValue($original_price, $ip), // Original price
            'price' => self::applyVatToValue($original_price, $ip), // Finalized price
            'discount' => self::applyVatToValue($discount, $ip), // Discount value
            'quantityGlobalLimit' => $quantityGlobalLimit ?? null,
            'quantityGlobalCurrentLimit' => $quantityGlobalCurrentLimit ?? null,
            'quantityUserLimit' => null,
            'quantityUserCurrentLimit' => null,
            'virtual_price' => $item->virtual_price,
            'is_virtual_currency_only' => $item->is_virtual_currency_only,
            'id' => $item->id,
            'description' => $item->description,
            'in_cart' => false,
            'is_unavailable' => $is_unavailable,
        ];
    }

    public static function giveItems($payment, $cmdEvent = Command::EVENT_PURCHASED)
    {
        self::sendGlobalCommands($payment);

        global $setting, $cart, $itemsCart, $user, $discordMessageController;
        $setting = Setting::query()->find(1);
        $cart = Cart::query()->find($payment->cart_id);
        $itemsCart = CartItem::query()->where('cart_id', $cart->id)->get();
        $user = User::query()->where('id', $payment->user_id)->first();
        $discordMessageController = new SendMessageController();

        foreach ($itemsCart as $itemCart) {

            $product = Item::query()->find($itemCart->item_id);
            if (!isset($product)) {
                Log::error("Product not found for cart item: " . json_encode($itemCart));
                continue;
            }

            // Sending giftcard to the user
            if ($product->type === Item::GIFTCARD || $product->type === Item::MINECRAFT_AND_GIFTCARD) {
                $giftcard = self::generateGiftcard($user->username, $product->giftcard_price, $payment->id);
                $settings = Setting::find(1);

                if ($giftcard && $settings->smtp_enable) {
                    $email = "";
                    if (!empty($payment->details)) {
                        $details = json_decode($payment->details, true);
                        if (isset($details['email'])) {
                            $email = $details['email'];
                        }
                    }
                    if (empty($email)) {
                        Log::error('Mail Error giveItems: ' . json_encode([$itemCart, $user, $payment]));
                    } else {
                        $mail = new PHPMailer(true);
                        try {
                            if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
                                Log::error('Mail Error giveItems: ' . json_encode([$itemCart, $user, $payment]));
                                throw new PHPMailerException('Invalid email address');
                            }

                            $mail->isSMTP();
                            $mail->Host = $settings->smtp_host;
                            $mail->SMTPAuth = true;
                            $mail->Username = $settings->smtp_user;
                            $mail->Password = Crypt::decryptString($settings->smtp_pass);
                            $mail->Port = $settings->smtp_port;
                            $mail->CharSet = 'utf-8';

                            $mail->setFrom($settings->smtp_from, $settings->site_name);
                            $mail->addAddress($email);

                            $mail->isHTML(true);
                            $mail->Subject = 'Your gift card is here!';
                            $site_name = $settings->site_name;
                            $username = $user->username;
                            $mail->Body = view('emails.giftcard', compact('site_name', 'username', 'payment', 'giftcard'))->render();

                            $mail->send();
                        } catch (PHPMailerException $e) {
                            Log::error('Mail Error giveItems PHPMailer: ' . $e->getMessage());
                        }
                    }
                }
            }

            // Delivering packages on the Minecraft server
            if ($product->type === Item::MINECRAFT_PACKAGE || $product->type === Item::MINECRAFT_AND_GIFTCARD) {
                global $setting, $result;
                $servers = [];

                if ($product->is_server_choice == 1) {
                    $cartSelectServers = CartSelectServer::where([
                        ['cart_id', $cart->id],
                        ['item_id', $product->id]
                    ])->with(['servers' => function ($query) {
                        $query->where('deleted', 0);
                    }])->get();

                    if (!empty($cartSelectServers) && $cartSelectServers->count() > 0) {
                        $servers = $cartSelectServers->pluck('servers')->flatten();
                    }
                }

                if (empty($servers)) {
                    $serverIds = array_unique(
                        ItemServer::where('item_servers.type', ItemServer::TYPE_CMD_SERVER)
                            ->join('commands', 'commands.item_id', '=', 'item_servers.item_id')
                            ->where('commands.item_id', $product->id)
                            ->select('item_servers.server_id')
                            ->get()
                            ->pluck('server_id')
                            ->toArray(),
                        SORT_NUMERIC
                    );

                    if (count($serverIds) > 0) {
                        $servers = Server::whereIn('id', $serverIds)->get();
                    }
                    if (empty($servers)) {
                        $servers = Server::where('deleted', 0)->get();
                    }
                }

                $result = false;

                if ($setting->withdraw_game == 'minecraft') {
                    $result = self::giveItem($cmdEvent, $servers, $product, $user, $itemCart, $payment->id);
                    if (!$result) {
                        $discordMessageController->sendErrorDiscordPlugin($payment->id, $setting);
                    }
                }

                if (!$result) {
                    $discordMessageController->sendErrorDiscordPlugin($payment->id, $setting);
                    return false;
                }
            }
        }

        $discordMessageController->sendSuccessfulDiscord($user->identificator, $itemsCart, $setting);
        return true;
    }

    public static function giveItem($cmdEvent, $servers, $item, $user, $cart, $paymentId): bool
    {
        global $commandServers, $currency;
        $commandServers = ItemServer::where('item_servers.type', ItemServer::TYPE_CMD_SERVER)
            ->join('commands', 'commands.item_id', '=', 'item_servers.item_id')
            ->where('commands.item_id', $item->id)
            ->select('item_servers.server_id')
            ->get()
            ->pluck('server_id')
            ->toArray();

        // Find the command if the command has limited servers

        $settings = Setting::select(['currency', 'discord_bot_enabled'])->first();
        $currency = $settings->currency;
        $cartItem = CartItem::query()->where('cart_id', $cart->cart_id)->where('item_id', $item->id)->first();

        if ($cmdEvent == Command::EVENT_PURCHASED) {
            $saleCommands = SaleCommand::whereIn('sale_id', Sale::where('is_enable', 1)->select('id')->get()->pluck('id')->toArray())->get();
            if ($saleCommands->isNotEmpty()) {
                foreach ($saleCommands as $saleCommand) {
                    $saleCommandServers = ItemServer::where('item_servers.type', ItemServer::TYPE_SALE_COMMAND_SERVER)
                        ->join('sales_commands', 'sales_commands.id', '=', 'item_servers.item_id')
                        ->where('sales_commands.id', $saleCommand->id)
                        ->select('item_servers.server_id')
                        ->get()
                        ->pluck('server_id')
                        ->toArray();

                    foreach ($servers as $server) {
                        if (!empty($saleCommandServers) && !in_array($server->id, $saleCommandServers))
                            continue;

                        $commandServerName = Server::where('id', $server->id)->first()->name;
                        $cmd = str_replace('{server}', $commandServerName, $saleCommand->command);
                        $cmd = str_replace('{username}', $user->username, $cmd);
                        $cmd = str_replace('{package_name}', $item->name, $cmd);
                        $cmd = str_replace('{price}', $cartItem->price, $cmd);
                        $cmd = str_replace('{time}', Carbon::now()->format('H:i:s'), $cmd);
                        $cmd = str_replace('{date}', Carbon::now()->format('Y-m-d'), $cmd);
                        $cmd = str_replace('{uuid}', $user->uuid, $cmd);
                        $cmd = str_replace('{customerIP}', $user->ip_address, $cmd);
                        $cmd = str_replace('{currency}', $currency, $cmd);
                        $cmd = str_replace('{id}', $cart->cart_id, $cmd);

                        $commandHistory = [
                            'type' => CommandHistory::TYPE_SALE,
                            'payment_id' => $paymentId,
                            'item_id' => $item->id,
                            'cmd' => $cmd,
                            'username' => $user->username,
                            'server_id' => $server->id,
                            'status' => CommandHistory::STATUS_QUEUE,
                            'is_online_required' => 0,
                            'execute_once_on_any_server' => 0,
                            'package_name' => $item->name,
                        ];
                        CommandHistory::create($commandHistory);
                    }
                }
            }
        }

        // Check if the Discord bot is enabled
        if ($settings->discord_bot_enabled) {
            $itemDiscordRoles = ItemRole::where('item_id', $item->id)->get();

            if ($itemDiscordRoles->isNotEmpty()) {
                $discordRoleController = new RolesController();

                foreach ($itemDiscordRoles as $itemDiscordRole) {
                    $discordRole = DiscordRole::where('id', $itemDiscordRole->role_id)
                        ->where('deleted', 0)
                        ->first();
                    $payment = Payment::where('id', $paymentId)->first();

                    $discordData = [
                        'discord_id' => $payment->discord_id ?? null,
                        'role_id' => $discordRole->role_id ?? null,
                        'internal_role_id' => $discordRole->id,
                        'user_id' => $user->id,
                        'payment_id' => $paymentId,
                    ];

                    switch ($cmdEvent) {
                        case Command::EVENT_PURCHASED:
                            $discordData['action'] = DiscordRoleQueue::GIVE_ROLE;
                            break;
                        case Command::EVENT_CHARGEBACKED:
                        case Command::EVENT_REMOVED:
                            $discordData['action'] = DiscordRoleQueue::REMOVE_ROLE;
                            break;
                    }

                    // Process the action
                    $discordRoleController->handle($discordData);
                }
            }
        }

        $commands = Command::where('item_type', Command::ITEM_COMMAND)
            ->where('item_id', $item->id)
            ->where('event', $cmdEvent)
            ->get();

        for ($i = 1; $i <= $cart->count; $i++) {
            foreach ($commands as $command) {
                $cmd = $command->command;

                foreach (Item::where('id', $item->id)->first()->variables()->get() as $var) {
                    if (!is_null($cart->id)) {
                        $varValue = CartItemVar::select('var_value')
                            ->where([
                                ['cart_item_id', $cart->id],
                                ['var_id', $var->id],
                            ])->first();
                        if (! is_null($var) && ! is_null($varValue)) {
                            $cmd = str_replace('{'.$var->identifier.'}', $varValue->var_value, $cmd);
                        }
                    }
                }

                $cartx = Cart::query()->select('coupon_id')->find($cart->cart_id);
                if (! empty($cartx->coupon_id)) {
                    $coupon = Coupon::query()->select('name')->find($cartx->coupon_id);
                    if (! empty($coupon)) {
                        $cmd = str_replace('{coupon}', $coupon->name, $cmd);
                    }
                } else {
                    $cmd = str_replace('{coupon}', ' ', $cmd);
                }

                $cmd = str_replace('{username}', $user->username, $cmd);
                $cmd = str_replace('{package_name}', $item->name, $cmd);
                $cmd = str_replace('{price}', $cartItem->price, $cmd);
                $cmd = str_replace('{time}', Carbon::now()->format('H:i:s'), $cmd);
                $cmd = str_replace('{date}', Carbon::now()->format('Y-m-d'), $cmd);
                $cmd = str_replace('{uuid}', $user->uuid, $cmd);
                $cmd = str_replace('{customerIP}', $user->ip_address, $cmd);
                $cmd = str_replace('{currency}', $currency, $cmd);
                $cmd = str_replace('{id}', $cart->cart_id, $cmd);

                // Getting information about the Item Servers that the command is limited to
                $itemServers = ItemServer::where('item_id', $item->id)
                    ->where('type', ItemServer::TYPE_CMD_SERVER)
                    ->where('cmd_id', $command->id)
                    ->get();

                // Getting the servers from the ItemServer model for the initiated command
                $commandServers = [];
                foreach ($itemServers as $itemServer) {
                    $commandServers[] = $itemServer->server_id;
                }

                foreach ($servers as $server) {
                    // Check if the command is limited to specific servers
                    if (!empty($commandServers) && !in_array($server->id, $commandServers))
                        continue;

					$commandServerName = Server::where('id', $server->id)->first()->name;

					$cmd = str_replace('{server}', $commandServerName, $cmd);

                    for ($j = 0; $j < $command->repeat_cycles + 1; $j++) {
                        $commandHistory = [
                            'type' => CommandHistory::TYPE_ITEM,
                            'payment_id' => $paymentId,
                            'item_id' => $item->id,
                            'cmd' => $cmd,
                            'username' => $user->username,
                            'server_id' => $server->id,
                            'status' => CommandHistory::STATUS_QUEUE,
                            'is_online_required' => $command->is_online_required,
                            'execute_once_on_any_server' => $command->execute_once_on_any_server,
                            'package_name' => $item->name,
                        ];

                        $delayValue = 0;
                        if ($command->delay_value > 0)
                            $delayValue += $command->delay_value;

                        if ($delayValue > 0)
                            $commandHistory['executed_at'] = DB::raw('DATE_ADD(NOW(), INTERVAL '.$delayValue.' SECOND)');
                        CommandHistory::create($commandHistory);
                    }
                }
            }
        }
        return true;
    }

    // Generate giftcard for purchase
    public static function generateGiftcard($username, $price, $paymentId)
    {
        $giftcard_code = 'G-' . Str::random(10, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ');

        $giftcard = Gift::create([
            'name' => $giftcard_code,
            'start_balance' => $price,
            'end_balance' => $price,
            'expire_at' => Carbon::now()->addYears(10),
            'note' => __('Automatically generated giftcard for payment') . ' #' . $paymentId . '. ' . __('Purchased by') . ' ' . $username,
            'payment_id' => $paymentId,
        ]);

        return $giftcard;
    }

    public static function sendRcon($cmd, $server)
    {
        $rcon = new RCON($server);
        if (@$rcon->connect()) {
            $rcon->send_command($cmd);
            $rcon->disconnect();
        } else {
            return false;
        }

        return true;
    }


    public static function giveRconUnturned($cmd, $server)
    {
        $rcon = new RocketRCON();
        if ($rcon->connect($server->host_websocket, $server->port_websocket, $server->password_websocket)) {
            $rcon->send($cmd);
            $rcon->disconnect();
        } else {
            return false;
        }

        return true;
    }

    public static function sendListener($cmd, $username, $is_online_required, $commandHistoryId, $itemName = null)
    {
        if (str_starts_with($username, 'admin_') && $commandHistoryId === null) {
            $cmd = json_encode([
                'username' => $username,
                'is_online_required' => $is_online_required,
                'command' => 'say Official MineStoreCMS.com Plugin Connected Successfully',
                'package_name' => $itemName ?? null,
            ]);

            $serverId = substr($username, 6);
            $servers = Server::where('id', $serverId)->where('deleted', 0)->get();
            foreach ($servers as $server) {
                CmdQueue::create([
                    'server_id' => $server->id,
                    'commands_history_id' => null,
                    'command' => $cmd,
                ]);
            }
        } else {
            $command_history = CommandHistory::where('id', $commandHistoryId)->first();
            $command_history->update([
                'status' => CommandHistory::STATUS_PENDING
            ]);

            if ($command_history->item_id !== null) {
                $itemName = Item::where('id', $command_history->item_id)->first();
                if ($itemName) {
                    $itemName = $itemName->name;
                }
            }

            $cmd = json_encode([
                'username' => $username,
                'is_online_required' => $is_online_required,
                'command' => $cmd,
                'package_name' => $itemName ?? null,
            ]);

            CmdQueue::create([
                'server_id' => $command_history->server_id,
                'commands_history_id' => $commandHistoryId,
                'command' => $cmd,
            ]);
        }

        return true;
    }

    public static function sendWebsocket($cmd, $server, $username, $is_online_required)
    {
        try {
            $fp = fsockopen($server->host_websocket, $server->port_websocket, $errno, $errstr, 3);
        } catch (\Exception $e) {
            return false;
        }
        if ($fp !== false) {
            $cmd = json_encode([
                'password' => $server->password_websocket,
                'username' => $username,
                'is_online_required' => $is_online_required,
                'command' => $cmd,
            ]);

            fwrite($fp, $cmd);
            fclose($fp);
        } else {
            return false;
        }

        return true;
    }

    public static function sendGlobalCommands($payment)
    {
        $settings = Setting::query()->select('enable_globalcmd', 'currency')->find(1);
        if ($settings->enable_globalcmd != 1) {
            return;
        }

        $price = $payment->price;
        if ($payment->currency != $settings->currency) {
            $system_currency = Currency::where('name', $settings->currency)->first();
            $currencyRate = Currency::where('name', $payment->currency)->first();
            $price = round(($payment->price * $currencyRate->value) / $system_currency->value, 2);
        }

        $globalCommands = GlobalCommand::where('price', '<=', $price)->get();
        if ($globalCommands->isEmpty())
            return;

        $currency = Setting::first()->currency;
        $setting = Setting::select('withdraw_game')->find(1);
        foreach ($globalCommands as $globalCommand) {

            $cmd = str_replace('{username}', $payment->user->username, $globalCommand->cmd);
            $cmd = str_replace('{time}', Carbon::now()->format('H:i:s'), $cmd);
            $cmd = str_replace('{date}', Carbon::now()->format('Y-m-d'), $cmd);
            $cmd = str_replace('{uuid}', $payment->user->uuid, $cmd);
            $cmd = str_replace('{customerIP}', $payment->user->ip_address, $cmd);
            $cmd = str_replace('{currency}', $currency, $cmd);
            $cmd = str_replace('{price}', $price, $cmd);
            $cmd = str_replace('{currency}', $payment->currency, $cmd);

            $servers = $globalCommand->servers()->where('deleted', 0)->get();
            if ($servers->isEmpty())
                $servers = Server::where('deleted', 0)->get();

            foreach ($servers as $server) {
                $cmdHistory = CommandHistory::create([
                    'type' => CommandHistory::TYPE_GLOBAL,
                    'payment_id' => $payment->id,
                    'cmd' => $cmd,
                    'username' => $payment->user->username,
                    'server_id' => $server->id,
                    'status' => CommandHistory::STATUS_QUEUE,
                    'is_online_required' => $globalCommand->is_online,
                ]);

                if ($setting->withdraw_game == 'minecraft') {
                    if ($server->method == 'websocket') {
                        self::sendWebsocket($cmd, $server, $payment->user->username, boolval($globalCommand->is_online));
                    } elseif ($server->method == 'rcon') {
                        if (self::sendRcon($cmd, $server))
                            $cmdHistory->update(['status', CommandHistory::STATUS_EXECUTED]);
                    } elseif ($server->method == 'listener') {
                        self::sendListener($cmd, $payment->user->username, boolval($globalCommand->is_online), $cmdHistory->id);
                    }
                }
            }
        }
    }

    public static function sendGameAuthCommand($gameAuthUser)
    {
        $allServers = Server::query()->where('deleted', 0)->get();

        $authCMD = $gameAuthUser->id;

        $cmd = str_replace('{user}', $gameAuthUser->username, $authCMD);
        $cmd = json_encode([
            'type' => 'authorization',
            'username' => $gameAuthUser->username,
            'auth_id' => $cmd,
        ]);

        $setting = Setting::select('withdraw_game')->find(1);

        foreach ($allServers as $server) {
            if ($setting->withdraw_game == 'minecraft') {
                if ($server->method == 'websocket') {
                    $fp = false;
                    try {
                        $fp = fsockopen($server->host_websocket, $server->port_websocket, $errno, $errstr, 3);
                    } catch (\Exception $e) {
                    }
                    if ($fp !== false) {
                        $cmd = str_replace('{username}', $gameAuthUser->username, $authCMD);
                        $cmd = json_encode([
                            'password' => $server->password_websocket,
                            'username' => $gameAuthUser->username,
                            'auth_id' => $cmd,
                        ]);
                        fwrite($fp, $cmd);
                        fclose($fp);
                    }
                } elseif ($server->method == 'rcon') {
                    $rcon = new RCON($server);
                    if (@$rcon->connect()) {
                        $rcon->send_command($cmd);
                        $rcon->disconnect();
                    }
                } elseif ($server->method == 'listener') {
                    CmdQueue::create([
                        'server_id' => $server->id,
                        'command' => $cmd,
                    ]);
                }
            }
        }
    }

    public static function sendVirtualCurrencyCommand($playerData)
    {
        $setting = Setting::select('withdraw_game', 'virtual_currency_cmd')->find(1);

        $cmd = str_replace('{username}', $playerData['username'], $setting->virtual_currency_cmd);
        $cmd = str_replace('{amount}', $playerData['price'], $cmd);

        self::processCommand($playerData, $cmd);
    }

    public static function chargeVirtualCurrencyBalanceCommand($playerData)
    {
        $cmd = 'ms chargeBalance {username} {amount} {payment_internal_id} {signature}';
        $cmd = str_replace('{username}', $playerData['username'], $cmd);
        $cmd = str_replace('{amount}', $playerData['price'], $cmd);
        $cmd = str_replace('{payment_internal_id}', $playerData['payment_internal_id'], $cmd);
        $cmd = str_replace('{signature}', $playerData['signature'], $cmd);

        self::processCommand($playerData, $cmd);
    }

    private static function processCommand($playerData, $cmd)
    {
        $allServers = Server::query()
            ->where('deleted', 0)
            ->get();

        $commandData = json_encode([
            'username' => $playerData['username'],
            'is_online_required' => true,
            'command' => $cmd,
        ]);

        $commandArray = json_decode($commandData, true);

        $cart_items = CartItem::where('cart_id', $playerData['cart_id'])->get();

        foreach ($cart_items as $cart_item) {
            $eco_servers = self::getEconomyServers($cart_item, $allServers);

            foreach ($eco_servers as $server) {
                for ($i = 1; $i <= $cart_item->count; $i++) {
                    CommandHistory::create([
                        'type' => CommandHistory::TYPE_VIRTUAL_CURRENCY,
                        'payment_id' => $playerData['payment_id'],
                        'cmd' => $commandArray['command'],
                        'username' => $playerData['username'],
                        'server_id' => $server->id,
                        'status' => CommandHistory::STATUS_QUEUE,
                        'is_online_required' => true,
                    ]);
                }
            }
        }
    }

    private static function getEconomyServers($cart_item, $allServers)
    {
        $itemsEcoServer = ItemServer::where('type', ItemServer::TYPE_ECONOMY_SERVER)
            ->where('item_id', $cart_item->item->id)
            ->get();

        if ($itemsEcoServer->isEmpty()) {
            return $allServers;
        }

        $eco_server_ids = $itemsEcoServer->pluck('server_id')->toArray();
        return Server::whereIn('id', $eco_server_ids)->get();
    }

    public static function getPrice($item)
    {
        $price = $item->price;
        if ($item->is_virtual_currency_only == 1) {
            $price = $item->virtual_price;
        }

        if ($item->discount > 0) {
            $discount = $price * ($item->discount / 100);
            return round($price - $discount, 2);
        } else {
            return $price;
        }
    }

    /**
     * Retrieves the visual price of an item (for PayNow integration flexible pricing).
     *
     * If PayNow integration is not enabled, it returns the regular price.
     *
     * @param mixed $item The item for which the visual price is being retrieved.
     * @param bool|string $ip Optional. The IP address for location-based pricing. Defaults to false.
     * @return float The calculated visual price of the item.
     */
    public static function getVisualPrice($item, $ip = false): float
    {
        return PaynowStorefront::getVisualPrice($item, $ip);
    }

    public static function applyVatToValue($value, $ip = false): float
    {
        return PaynowStorefront::applyVatToValue($value, $ip);
    }


    public function calculateDiscount($item): float|int
    {
        if ($item->discount > 0 && $item->virtual_price !== null) {
            return round($item->virtual_price * ($item->discount / 100), 2);
        } elseif ($item->discount > 0 && $item->virtual_price == null) {
            return round($item->price * ($item->discount / 100), 2);
        } else {
            return 0;
        }
    }
}
